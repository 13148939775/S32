/*
 * @author 008196
 * @for application log example
 * @version 0.1
 * @date 2023-02 ~ 2023-03
 * 
 * @copyright Copyright (c) 2023
 * 
 */

#include <chrono>

#include <node_log.h>

void runBenchmark();

int main(int argc, char** argv) {

    HHT::NodeLog node("mylogtest0625");
    // node.SetLevel(LOG_LEVEL_INFO,LOG_LEVEL_INFO,"./logs/");


    // HHT_LOG(INFO)<<"hello"<<"111";
    //    node.SetLevel(LOG_LEVEL_WARNING,true); 
    // HHT_LOG(WARNING)<<"hello"<<"111";
    //   //      node.SetLevel(LOG_LEVEL_ERROR,false); 
    // HHT_LOG(ERROR)<<"hello"<<"111";
    // HHT_LOG(INFO)<<"hello"<<"111";

    // HHT_LOG(INFO)<<"hello"<<"222";
    // HHT_LOG(WARNING)<<"hello"<<"222";
    // node.SetLevel(LOG_LEVEL_WARNING);
    // HHT_LOG(ERROR)<<"hello"<<"222";
    // HHT_LOG(INFO)<<"hello"<<"222";

    node.InitLog(LOG_LEVEL_INFO,LOG_LEVEL_INFO);
    std::string str="InitLog function called !!";
    HHT_LOG(INFO)<<str<<"hello"<<"666";
    HHT_LOG(WARNING)<<str<<"hello"<<"666";
    node.SetLevel(LOG_LEVEL_WARNING);
    HHT_LOG(ERROR)<<str<<"hello"<<"66";
    HHT_LOG(INFO)<<str<<"hello"<<"666";

    // HiphiPlatform::NodeLog node("testApp");
    // node.SetLogFile("/tmp/logFileTestNode");
    // node.Preallocate();

    // node.SetLevel(NanoLog::LogLevel::WARNING);

    // HHT_LOG_STREAM(NanoLog::LogLevel::DEBUG, "This message wont be logged since it is lower "
    //                     "than the current log level.");

    // // Log levels can be named explicitly if one does not import the LogLevels
    // // namespace with 'using'
    // HHT_LOG_STREAM(NanoLog::LogLevel::DEBUG, "Another message.");

    // // All the standard printf specifiers (except %n) can be used
    // char randomString[] = "Hello World";
    // HHT_LOG_STREAM(NanoLog::LogLevel::INFO, "A string, pointer, number, and float: '%s', %p, %d, %f",
    //                     randomString,
    //                     &randomString,
    //                     512,
    //                     3.14159);

    // // Even with width and length specifiers
    // HHT_LOG_STREAM(NanoLog::LogLevel::INFO, "Shortend String: '%5s' and shortend float %0.2lf",
    //                  randomString,
    //                  3.14159);


    // runBenchmark();

    // // Optional: Flush all pending log messages to disk
    // node.Sync();

    // // Optional: Gather statics generated by NanoLog
    // //std::string stats = NanoLog::getStats();
    // //printf("%s", stats.c_str());

    // // Optional: Prints NanoLog configuration parameters
    // //NanoLog::printConfig();
}

// void runBenchmark() {
//     const uint64_t RECORDS = 1000;

//     std::chrono::high_resolution_clock::time_point start, stop;
//     double time_span;

//     start = std::chrono::high_resolution_clock::now();
//     for (int i = 0; i < RECORDS; ++i) {
//         HHT_LOG_STREAM(NanoLog::LogLevel::INFO, "Simple log message with 0 parameters");
//     }
//     stop = std::chrono::high_resolution_clock::now();

//     time_span = std::chrono::duration_cast<std::chrono::duration<double>>(
//                                                         stop - start).count();
//     printf("The total time spent invoking NANO_LOG with no parameters %lu "
//             "times took %0.2lf seconds (%0.2lf ns/message average)\r\n",
//             RECORDS, time_span, (time_span/RECORDS)*1e9);

//     start = std::chrono::high_resolution_clock::now();
//     // Flush all pending log messages to disk
//     HiphiPlatform::NodeLog::Sync();
//     stop = std::chrono::high_resolution_clock::now();

//     time_span = std::chrono::duration_cast<std::chrono::duration<double>>(
//                                                         stop - start).count();
//     printf("Flushing the log statements to disk took an additional "
//                 "%0.2lf secs\r\n", time_span);
// }

