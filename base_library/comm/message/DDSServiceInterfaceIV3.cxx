

/*
WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

This file was generated from DDSServiceInterfaceIV3.idl
using RTI Code Generator (rtiddsgen) version 3.1.1.
The rtiddsgen tool is part of the RTI Connext DDS distribution.
For more information, type 'rtiddsgen -help' at a command shell
or consult the Code Generator User's Manual.
*/

#include <iosfwd>
#include <iomanip>

#include "rti/topic/cdr/Serialization.hpp"

#include "DDSServiceInterfaceIV3.hpp"
#include "DDSServiceInterfaceIV3Plugin.hpp"

#include <rti/util/ostream_operators.hpp>

namespace BodyDomain {

    // ---- BdArm_Set_struct: 

    BdArm_Set_struct::BdArm_Set_struct() :
        m_VehicleUnlock_Set_ (0) ,
        m_ReturnPUnlock_Set_ (0) ,
        m_AwayVclLck_Set_ (0) ,
        m_CloseVclUnlck_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdArm_Set_struct::BdArm_Set_struct (
        uint8_t VehicleUnlock_Set,
        uint8_t ReturnPUnlock_Set,
        uint8_t AwayVclLck_Set,
        uint8_t CloseVclUnlck_Set,
        const std::string& CtrlSource)
        :
            m_VehicleUnlock_Set_( VehicleUnlock_Set ),
            m_ReturnPUnlock_Set_( ReturnPUnlock_Set ),
            m_AwayVclLck_Set_( AwayVclLck_Set ),
            m_CloseVclUnlck_Set_( CloseVclUnlck_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_Set_struct::BdArm_Set_struct(BdArm_Set_struct&& other_) OMG_NOEXCEPT  :m_VehicleUnlock_Set_ (std::move(other_.m_VehicleUnlock_Set_))
    ,
    m_ReturnPUnlock_Set_ (std::move(other_.m_ReturnPUnlock_Set_))
    ,
    m_AwayVclLck_Set_ (std::move(other_.m_AwayVclLck_Set_))
    ,
    m_CloseVclUnlck_Set_ (std::move(other_.m_CloseVclUnlck_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdArm_Set_struct& BdArm_Set_struct::operator=(BdArm_Set_struct&&  other_) OMG_NOEXCEPT {
        BdArm_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdArm_Set_struct::swap(BdArm_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_VehicleUnlock_Set_, other_.m_VehicleUnlock_Set_);
        swap(m_ReturnPUnlock_Set_, other_.m_ReturnPUnlock_Set_);
        swap(m_AwayVclLck_Set_, other_.m_AwayVclLck_Set_);
        swap(m_CloseVclUnlck_Set_, other_.m_CloseVclUnlck_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdArm_Set_struct::operator == (const BdArm_Set_struct& other_) const {
        if (m_VehicleUnlock_Set_ != other_.m_VehicleUnlock_Set_) {
            return false;
        }
        if (m_ReturnPUnlock_Set_ != other_.m_ReturnPUnlock_Set_) {
            return false;
        }
        if (m_AwayVclLck_Set_ != other_.m_AwayVclLck_Set_) {
            return false;
        }
        if (m_CloseVclUnlck_Set_ != other_.m_CloseVclUnlck_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdArm_Set_struct::operator != (const BdArm_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "VehicleUnlock_Set: " << (int)sample.VehicleUnlock_Set() <<", ";
        o << "ReturnPUnlock_Set: " << (int)sample.ReturnPUnlock_Set() <<", ";
        o << "AwayVclLck_Set: " << (int)sample.AwayVclLck_Set() <<", ";
        o << "CloseVclUnlck_Set: " << (int)sample.CloseVclUnlck_Set() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdArm_Get_struct: 

    BdArm_Get_struct::BdArm_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdArm_Get_struct::BdArm_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_Get_struct::BdArm_Get_struct(BdArm_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdArm_Get_struct& BdArm_Get_struct::operator=(BdArm_Get_struct&&  other_) OMG_NOEXCEPT {
        BdArm_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdArm_Get_struct::swap(BdArm_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdArm_Get_struct::operator == (const BdArm_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdArm_Get_struct::operator != (const BdArm_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdArm_Rsp_struct: 

    BdArm_Rsp_struct::BdArm_Rsp_struct() :
        m_VehicleUnlock_Rsp_ (0) ,
        m_ReturnPUnlock_Rsp_ (0) ,
        m_AwayVclLck_Rsp_ (0) ,
        m_CloseVclUnlck_Rsp_ (0)  {
    }   

    BdArm_Rsp_struct::BdArm_Rsp_struct (
        uint8_t VehicleUnlock_Rsp,
        uint8_t ReturnPUnlock_Rsp,
        uint8_t AwayVclLck_Rsp,
        uint8_t CloseVclUnlck_Rsp)
        :
            m_VehicleUnlock_Rsp_( VehicleUnlock_Rsp ),
            m_ReturnPUnlock_Rsp_( ReturnPUnlock_Rsp ),
            m_AwayVclLck_Rsp_( AwayVclLck_Rsp ),
            m_CloseVclUnlck_Rsp_( CloseVclUnlck_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_Rsp_struct::BdArm_Rsp_struct(BdArm_Rsp_struct&& other_) OMG_NOEXCEPT  :m_VehicleUnlock_Rsp_ (std::move(other_.m_VehicleUnlock_Rsp_))
    ,
    m_ReturnPUnlock_Rsp_ (std::move(other_.m_ReturnPUnlock_Rsp_))
    ,
    m_AwayVclLck_Rsp_ (std::move(other_.m_AwayVclLck_Rsp_))
    ,
    m_CloseVclUnlck_Rsp_ (std::move(other_.m_CloseVclUnlck_Rsp_))
    {
    } 

    BdArm_Rsp_struct& BdArm_Rsp_struct::operator=(BdArm_Rsp_struct&&  other_) OMG_NOEXCEPT {
        BdArm_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdArm_Rsp_struct::swap(BdArm_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_VehicleUnlock_Rsp_, other_.m_VehicleUnlock_Rsp_);
        swap(m_ReturnPUnlock_Rsp_, other_.m_ReturnPUnlock_Rsp_);
        swap(m_AwayVclLck_Rsp_, other_.m_AwayVclLck_Rsp_);
        swap(m_CloseVclUnlck_Rsp_, other_.m_CloseVclUnlck_Rsp_);
    }  

    bool BdArm_Rsp_struct::operator == (const BdArm_Rsp_struct& other_) const {
        if (m_VehicleUnlock_Rsp_ != other_.m_VehicleUnlock_Rsp_) {
            return false;
        }
        if (m_ReturnPUnlock_Rsp_ != other_.m_ReturnPUnlock_Rsp_) {
            return false;
        }
        if (m_AwayVclLck_Rsp_ != other_.m_AwayVclLck_Rsp_) {
            return false;
        }
        if (m_CloseVclUnlck_Rsp_ != other_.m_CloseVclUnlck_Rsp_) {
            return false;
        }
        return true;
    }
    bool BdArm_Rsp_struct::operator != (const BdArm_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "VehicleUnlock_Rsp: " << (int)sample.VehicleUnlock_Rsp() <<", ";
        o << "ReturnPUnlock_Rsp: " << (int)sample.ReturnPUnlock_Rsp() <<", ";
        o << "AwayVclLck_Rsp: " << (int)sample.AwayVclLck_Rsp() <<", ";
        o << "CloseVclUnlck_Rsp: " << (int)sample.CloseVclUnlck_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- BdArm_St_struct: 

    BdArm_St_struct::BdArm_St_struct() :
        m_CenterLck_St_ (0) ,
        m_BodyBglAlarm_St_ (0) ,
        m_ExLckReq_St_ (0)  {
    }   

    BdArm_St_struct::BdArm_St_struct (
        uint8_t CenterLck_St,
        uint8_t BodyBglAlarm_St,
        uint8_t ExLckReq_St)
        :
            m_CenterLck_St_( CenterLck_St ),
            m_BodyBglAlarm_St_( BodyBglAlarm_St ),
            m_ExLckReq_St_( ExLckReq_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_St_struct::BdArm_St_struct(BdArm_St_struct&& other_) OMG_NOEXCEPT  :m_CenterLck_St_ (std::move(other_.m_CenterLck_St_))
    ,
    m_BodyBglAlarm_St_ (std::move(other_.m_BodyBglAlarm_St_))
    ,
    m_ExLckReq_St_ (std::move(other_.m_ExLckReq_St_))
    {
    } 

    BdArm_St_struct& BdArm_St_struct::operator=(BdArm_St_struct&&  other_) OMG_NOEXCEPT {
        BdArm_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdArm_St_struct::swap(BdArm_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_CenterLck_St_, other_.m_CenterLck_St_);
        swap(m_BodyBglAlarm_St_, other_.m_BodyBglAlarm_St_);
        swap(m_ExLckReq_St_, other_.m_ExLckReq_St_);
    }  

    bool BdArm_St_struct::operator == (const BdArm_St_struct& other_) const {
        if (m_CenterLck_St_ != other_.m_CenterLck_St_) {
            return false;
        }
        if (m_BodyBglAlarm_St_ != other_.m_BodyBglAlarm_St_) {
            return false;
        }
        if (m_ExLckReq_St_ != other_.m_ExLckReq_St_) {
            return false;
        }
        return true;
    }
    bool BdArm_St_struct::operator != (const BdArm_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "CenterLck_St: " << (int)sample.CenterLck_St() <<", ";
        o << "BodyBglAlarm_St: " << (int)sample.BodyBglAlarm_St() <<", ";
        o << "ExLckReq_St: " << (int)sample.ExLckReq_St()  ;
        o <<"]";
        return o;
    }

    // ---- BdArm_St_Get_struct: 

    BdArm_St_Get_struct::BdArm_St_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdArm_St_Get_struct::BdArm_St_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_St_Get_struct::BdArm_St_Get_struct(BdArm_St_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdArm_St_Get_struct& BdArm_St_Get_struct::operator=(BdArm_St_Get_struct&&  other_) OMG_NOEXCEPT {
        BdArm_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdArm_St_Get_struct::swap(BdArm_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdArm_St_Get_struct::operator == (const BdArm_St_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdArm_St_Get_struct::operator != (const BdArm_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdArm_Ctrl_struct: 

    BdArm_Ctrl_struct::BdArm_Ctrl_struct() :
        m_CenterLck_Act_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdArm_Ctrl_struct::BdArm_Ctrl_struct (
        uint8_t CenterLck_Act,
        const std::string& CtrlSource)
        :
            m_CenterLck_Act_( CenterLck_Act ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_Ctrl_struct::BdArm_Ctrl_struct(BdArm_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_CenterLck_Act_ (std::move(other_.m_CenterLck_Act_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdArm_Ctrl_struct& BdArm_Ctrl_struct::operator=(BdArm_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        BdArm_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdArm_Ctrl_struct::swap(BdArm_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_CenterLck_Act_, other_.m_CenterLck_Act_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdArm_Ctrl_struct::operator == (const BdArm_Ctrl_struct& other_) const {
        if (m_CenterLck_Act_ != other_.m_CenterLck_Act_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdArm_Ctrl_struct::operator != (const BdArm_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "CenterLck_Act: " << (int)sample.CenterLck_Act() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdArm_Ctrl_SOA_struct: 

    BdArm_Ctrl_SOA_struct::BdArm_Ctrl_SOA_struct() :
        m_BdArm_Ctrl_SOA_u8_ (0)  {
    }   

    BdArm_Ctrl_SOA_struct::BdArm_Ctrl_SOA_struct (
        uint8_t BdArm_Ctrl_SOA_u8)
        :
            m_BdArm_Ctrl_SOA_u8_( BdArm_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_Ctrl_SOA_struct::BdArm_Ctrl_SOA_struct(BdArm_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_BdArm_Ctrl_SOA_u8_ (std::move(other_.m_BdArm_Ctrl_SOA_u8_))
    {
    } 

    BdArm_Ctrl_SOA_struct& BdArm_Ctrl_SOA_struct::operator=(BdArm_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        BdArm_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdArm_Ctrl_SOA_struct::swap(BdArm_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_BdArm_Ctrl_SOA_u8_, other_.m_BdArm_Ctrl_SOA_u8_);
    }  

    bool BdArm_Ctrl_SOA_struct::operator == (const BdArm_Ctrl_SOA_struct& other_) const {
        if (m_BdArm_Ctrl_SOA_u8_ != other_.m_BdArm_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool BdArm_Ctrl_SOA_struct::operator != (const BdArm_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "BdArm_Ctrl_SOA_u8: " << (int)sample.BdArm_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- BdArm_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_Srv_Req_Union::BdArm_Srv_Req_Union(BdArm_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BdArm_Set( std::move(other_.BdArm_Set()));
            } break;
            case 1:
            {  
                BdArm_Get( std::move(other_.BdArm_Get()));
            } break;
            case 2:
            {  
                BdArm_Ctrl( std::move(other_.BdArm_Ctrl()));
            } break;
            case 3:
            {  
                BdArm_St_Get( std::move(other_.BdArm_St_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    BdArm_Srv_Req_Union& BdArm_Srv_Req_Union::operator=(BdArm_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        BdArm_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    BdArm_Srv_Req_Union::Union_::Union_()  {
    }

    BdArm_Srv_Req_Union::Union_::Union_(
        const BodyDomain::BdArm_Set_struct& BdArm_Set,
        const BodyDomain::BdArm_Get_struct& BdArm_Get,
        const BodyDomain::BdArm_Ctrl_struct& BdArm_Ctrl,
        const BodyDomain::BdArm_St_Get_struct& BdArm_St_Get)
        :
            m_BdArm_Set_( BdArm_Set ),
            m_BdArm_Get_( BdArm_Get ),
            m_BdArm_Ctrl_( BdArm_Ctrl ),
            m_BdArm_St_Get_( BdArm_St_Get ) {
    }

    BdArm_Srv_Req_Union::BdArm_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void BdArm_Srv_Req_Union::swap(BdArm_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BdArm_Set_, other_.m_u_.m_BdArm_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BdArm_Get_, other_.m_u_.m_BdArm_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BdArm_Ctrl_, other_.m_u_.m_BdArm_Ctrl_);
            } break;
            case 3:
            {  
                swap(m_u_.m_BdArm_St_Get_, other_.m_u_.m_BdArm_St_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BdArm_Set_, other_.m_u_.m_BdArm_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BdArm_Get_, other_.m_u_.m_BdArm_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BdArm_Ctrl_, other_.m_u_.m_BdArm_Ctrl_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_BdArm_St_Get_, other_.m_u_.m_BdArm_St_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool BdArm_Srv_Req_Union::operator == (const BdArm_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BdArm_Set_ != other_.m_u_.m_BdArm_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BdArm_Get_ != other_.m_u_.m_BdArm_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BdArm_Ctrl_ != other_.m_u_.m_BdArm_Ctrl_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_BdArm_St_Get_ != other_.m_u_.m_BdArm_St_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool BdArm_Srv_Req_Union::operator != (const BdArm_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BdArm_Set: " << sample.BdArm_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "BdArm_Get: " << sample.BdArm_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "BdArm_Ctrl: " << sample.BdArm_Ctrl()<<", ";
            } break ;
            case 3:
            {  
                o << "BdArm_St_Get: " << sample.BdArm_St_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t BdArm_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- BdArm_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdArm_Srv_Resp_Union::BdArm_Srv_Resp_Union(BdArm_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BdArm_Set_SOA( std::move(other_.BdArm_Set_SOA()));
            } break;
            case 1:
            {  
                BdArm_Get_SOA( std::move(other_.BdArm_Get_SOA()));
            } break;
            case 2:
            {  
                BdArm_Ctrl_SOA( std::move(other_.BdArm_Ctrl_SOA()));
            } break;
            case 3:
            {  
                BdArm_St_Get_struct( std::move(other_.BdArm_St_Get_struct()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    BdArm_Srv_Resp_Union& BdArm_Srv_Resp_Union::operator=(BdArm_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        BdArm_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    BdArm_Srv_Resp_Union::Union_::Union_()  {
    }

    BdArm_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::BdArm_Rsp_struct& BdArm_Set_SOA,
        const BodyDomain::BdArm_Rsp_struct& BdArm_Get_SOA,
        const BodyDomain::BdArm_Ctrl_SOA_struct& BdArm_Ctrl_SOA,
        const BodyDomain::BdArm_St_struct& BdArm_St_Get_struct)
        :
            m_BdArm_Set_SOA_( BdArm_Set_SOA ),
            m_BdArm_Get_SOA_( BdArm_Get_SOA ),
            m_BdArm_Ctrl_SOA_( BdArm_Ctrl_SOA ),
            m_BdArm_St_Get_struct_( BdArm_St_Get_struct ) {
    }

    BdArm_Srv_Resp_Union::BdArm_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void BdArm_Srv_Resp_Union::swap(BdArm_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BdArm_Set_SOA_, other_.m_u_.m_BdArm_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BdArm_Get_SOA_, other_.m_u_.m_BdArm_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BdArm_Ctrl_SOA_, other_.m_u_.m_BdArm_Ctrl_SOA_);
            } break;
            case 3:
            {  
                swap(m_u_.m_BdArm_St_Get_struct_, other_.m_u_.m_BdArm_St_Get_struct_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BdArm_Set_SOA_, other_.m_u_.m_BdArm_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BdArm_Get_SOA_, other_.m_u_.m_BdArm_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BdArm_Ctrl_SOA_, other_.m_u_.m_BdArm_Ctrl_SOA_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_BdArm_St_Get_struct_, other_.m_u_.m_BdArm_St_Get_struct_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool BdArm_Srv_Resp_Union::operator == (const BdArm_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BdArm_Set_SOA_ != other_.m_u_.m_BdArm_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BdArm_Get_SOA_ != other_.m_u_.m_BdArm_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BdArm_Ctrl_SOA_ != other_.m_u_.m_BdArm_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_BdArm_St_Get_struct_ != other_.m_u_.m_BdArm_St_Get_struct_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool BdArm_Srv_Resp_Union::operator != (const BdArm_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdArm_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BdArm_Set_SOA: " << sample.BdArm_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "BdArm_Get_SOA: " << sample.BdArm_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "BdArm_Ctrl_SOA: " << sample.BdArm_Ctrl_SOA()<<", ";
            } break ;
            case 3:
            {  
                o << "BdArm_St_Get_struct: " << sample.BdArm_St_Get_struct() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t BdArm_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- VsWsh_Set_struct: 

    VsWsh_Set_struct::VsWsh_Set_struct() :
        m_FwiperSW_Set_ (0) ,
        m_FwiperAutoSenst_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    VsWsh_Set_struct::VsWsh_Set_struct (
        uint8_t FwiperSW_Set,
        uint8_t FwiperAutoSenst_Set,
        const std::string& CtrlSource)
        :
            m_FwiperSW_Set_( FwiperSW_Set ),
            m_FwiperAutoSenst_Set_( FwiperAutoSenst_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_Set_struct::VsWsh_Set_struct(VsWsh_Set_struct&& other_) OMG_NOEXCEPT  :m_FwiperSW_Set_ (std::move(other_.m_FwiperSW_Set_))
    ,
    m_FwiperAutoSenst_Set_ (std::move(other_.m_FwiperAutoSenst_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    VsWsh_Set_struct& VsWsh_Set_struct::operator=(VsWsh_Set_struct&&  other_) OMG_NOEXCEPT {
        VsWsh_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void VsWsh_Set_struct::swap(VsWsh_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FwiperSW_Set_, other_.m_FwiperSW_Set_);
        swap(m_FwiperAutoSenst_Set_, other_.m_FwiperAutoSenst_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool VsWsh_Set_struct::operator == (const VsWsh_Set_struct& other_) const {
        if (m_FwiperSW_Set_ != other_.m_FwiperSW_Set_) {
            return false;
        }
        if (m_FwiperAutoSenst_Set_ != other_.m_FwiperAutoSenst_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool VsWsh_Set_struct::operator != (const VsWsh_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FwiperSW_Set: " << (int)sample.FwiperSW_Set() <<", ";
        o << "FwiperAutoSenst_Set: " << (int)sample.FwiperAutoSenst_Set() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- VsWsh_Get_struct: 

    VsWsh_Get_struct::VsWsh_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    VsWsh_Get_struct::VsWsh_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_Get_struct::VsWsh_Get_struct(VsWsh_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    VsWsh_Get_struct& VsWsh_Get_struct::operator=(VsWsh_Get_struct&&  other_) OMG_NOEXCEPT {
        VsWsh_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void VsWsh_Get_struct::swap(VsWsh_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool VsWsh_Get_struct::operator == (const VsWsh_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool VsWsh_Get_struct::operator != (const VsWsh_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- VsWsh_Rsp_struct: 

    VsWsh_Rsp_struct::VsWsh_Rsp_struct() :
        m_FwiperSW_Rsp_ (0) ,
        m_FwiperAutoSenst_Rsp_ (0)  {
    }   

    VsWsh_Rsp_struct::VsWsh_Rsp_struct (
        uint8_t FwiperSW_Rsp,
        uint8_t FwiperAutoSenst_Rsp)
        :
            m_FwiperSW_Rsp_( FwiperSW_Rsp ),
            m_FwiperAutoSenst_Rsp_( FwiperAutoSenst_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_Rsp_struct::VsWsh_Rsp_struct(VsWsh_Rsp_struct&& other_) OMG_NOEXCEPT  :m_FwiperSW_Rsp_ (std::move(other_.m_FwiperSW_Rsp_))
    ,
    m_FwiperAutoSenst_Rsp_ (std::move(other_.m_FwiperAutoSenst_Rsp_))
    {
    } 

    VsWsh_Rsp_struct& VsWsh_Rsp_struct::operator=(VsWsh_Rsp_struct&&  other_) OMG_NOEXCEPT {
        VsWsh_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void VsWsh_Rsp_struct::swap(VsWsh_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FwiperSW_Rsp_, other_.m_FwiperSW_Rsp_);
        swap(m_FwiperAutoSenst_Rsp_, other_.m_FwiperAutoSenst_Rsp_);
    }  

    bool VsWsh_Rsp_struct::operator == (const VsWsh_Rsp_struct& other_) const {
        if (m_FwiperSW_Rsp_ != other_.m_FwiperSW_Rsp_) {
            return false;
        }
        if (m_FwiperAutoSenst_Rsp_ != other_.m_FwiperAutoSenst_Rsp_) {
            return false;
        }
        return true;
    }
    bool VsWsh_Rsp_struct::operator != (const VsWsh_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FwiperSW_Rsp: " << (int)sample.FwiperSW_Rsp() <<", ";
        o << "FwiperAutoSenst_Rsp: " << (int)sample.FwiperAutoSenst_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- VsWsh_St_Get_struct: 

    VsWsh_St_Get_struct::VsWsh_St_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    VsWsh_St_Get_struct::VsWsh_St_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_St_Get_struct::VsWsh_St_Get_struct(VsWsh_St_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    VsWsh_St_Get_struct& VsWsh_St_Get_struct::operator=(VsWsh_St_Get_struct&&  other_) OMG_NOEXCEPT {
        VsWsh_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void VsWsh_St_Get_struct::swap(VsWsh_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool VsWsh_St_Get_struct::operator == (const VsWsh_St_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool VsWsh_St_Get_struct::operator != (const VsWsh_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- VsWsh_St_struct: 

    VsWsh_St_struct::VsWsh_St_struct() :
        m_Fwiper_St_ (0) ,
        m_WashLqdHgtWarn_St_ (0) ,
        m_ExMirHt_Rsp_ (0) ,
        m_FwiperSWDisplay_st_ (0) ,
        m_RWndShldHt_Rsp_ (0)  {
    }   

    VsWsh_St_struct::VsWsh_St_struct (
        uint8_t Fwiper_St,
        uint8_t WashLqdHgtWarn_St,
        uint8_t ExMirHt_Rsp,
        uint8_t FwiperSWDisplay_st,
        uint8_t RWndShldHt_Rsp)
        :
            m_Fwiper_St_( Fwiper_St ),
            m_WashLqdHgtWarn_St_( WashLqdHgtWarn_St ),
            m_ExMirHt_Rsp_( ExMirHt_Rsp ),
            m_FwiperSWDisplay_st_( FwiperSWDisplay_st ),
            m_RWndShldHt_Rsp_( RWndShldHt_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_St_struct::VsWsh_St_struct(VsWsh_St_struct&& other_) OMG_NOEXCEPT  :m_Fwiper_St_ (std::move(other_.m_Fwiper_St_))
    ,
    m_WashLqdHgtWarn_St_ (std::move(other_.m_WashLqdHgtWarn_St_))
    ,
    m_ExMirHt_Rsp_ (std::move(other_.m_ExMirHt_Rsp_))
    ,
    m_FwiperSWDisplay_st_ (std::move(other_.m_FwiperSWDisplay_st_))
    ,
    m_RWndShldHt_Rsp_ (std::move(other_.m_RWndShldHt_Rsp_))
    {
    } 

    VsWsh_St_struct& VsWsh_St_struct::operator=(VsWsh_St_struct&&  other_) OMG_NOEXCEPT {
        VsWsh_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void VsWsh_St_struct::swap(VsWsh_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_Fwiper_St_, other_.m_Fwiper_St_);
        swap(m_WashLqdHgtWarn_St_, other_.m_WashLqdHgtWarn_St_);
        swap(m_ExMirHt_Rsp_, other_.m_ExMirHt_Rsp_);
        swap(m_FwiperSWDisplay_st_, other_.m_FwiperSWDisplay_st_);
        swap(m_RWndShldHt_Rsp_, other_.m_RWndShldHt_Rsp_);
    }  

    bool VsWsh_St_struct::operator == (const VsWsh_St_struct& other_) const {
        if (m_Fwiper_St_ != other_.m_Fwiper_St_) {
            return false;
        }
        if (m_WashLqdHgtWarn_St_ != other_.m_WashLqdHgtWarn_St_) {
            return false;
        }
        if (m_ExMirHt_Rsp_ != other_.m_ExMirHt_Rsp_) {
            return false;
        }
        if (m_FwiperSWDisplay_st_ != other_.m_FwiperSWDisplay_st_) {
            return false;
        }
        if (m_RWndShldHt_Rsp_ != other_.m_RWndShldHt_Rsp_) {
            return false;
        }
        return true;
    }
    bool VsWsh_St_struct::operator != (const VsWsh_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "Fwiper_St: " << (int)sample.Fwiper_St() <<", ";
        o << "WashLqdHgtWarn_St: " << (int)sample.WashLqdHgtWarn_St() <<", ";
        o << "ExMirHt_Rsp: " << (int)sample.ExMirHt_Rsp() <<", ";
        o << "FwiperSWDisplay_st: " << (int)sample.FwiperSWDisplay_st() <<", ";
        o << "RWndShldHt_Rsp: " << (int)sample.RWndShldHt_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- VsWsh_Ctrl_struct: 

    VsWsh_Ctrl_struct::VsWsh_Ctrl_struct() :
        m_FWiperSvcSW_Req_ (0) ,
        m_ExMirHt_Req_ (0) ,
        m_RWndShldHt_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    VsWsh_Ctrl_struct::VsWsh_Ctrl_struct (
        uint8_t FWiperSvcSW_Req,
        uint8_t ExMirHt_Req,
        uint8_t RWndShldHt_Req,
        const std::string& CtrlSource)
        :
            m_FWiperSvcSW_Req_( FWiperSvcSW_Req ),
            m_ExMirHt_Req_( ExMirHt_Req ),
            m_RWndShldHt_Req_( RWndShldHt_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_Ctrl_struct::VsWsh_Ctrl_struct(VsWsh_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_FWiperSvcSW_Req_ (std::move(other_.m_FWiperSvcSW_Req_))
    ,
    m_ExMirHt_Req_ (std::move(other_.m_ExMirHt_Req_))
    ,
    m_RWndShldHt_Req_ (std::move(other_.m_RWndShldHt_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    VsWsh_Ctrl_struct& VsWsh_Ctrl_struct::operator=(VsWsh_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        VsWsh_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void VsWsh_Ctrl_struct::swap(VsWsh_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FWiperSvcSW_Req_, other_.m_FWiperSvcSW_Req_);
        swap(m_ExMirHt_Req_, other_.m_ExMirHt_Req_);
        swap(m_RWndShldHt_Req_, other_.m_RWndShldHt_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool VsWsh_Ctrl_struct::operator == (const VsWsh_Ctrl_struct& other_) const {
        if (m_FWiperSvcSW_Req_ != other_.m_FWiperSvcSW_Req_) {
            return false;
        }
        if (m_ExMirHt_Req_ != other_.m_ExMirHt_Req_) {
            return false;
        }
        if (m_RWndShldHt_Req_ != other_.m_RWndShldHt_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool VsWsh_Ctrl_struct::operator != (const VsWsh_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FWiperSvcSW_Req: " << (int)sample.FWiperSvcSW_Req() <<", ";
        o << "ExMirHt_Req: " << (int)sample.ExMirHt_Req() <<", ";
        o << "RWndShldHt_Req: " << (int)sample.RWndShldHt_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- VsWsh_Ctrl_SOA_struct: 

    VsWsh_Ctrl_SOA_struct::VsWsh_Ctrl_SOA_struct() :
        m_VsWsh_Ctrl_SOA_u8_ (0)  {
    }   

    VsWsh_Ctrl_SOA_struct::VsWsh_Ctrl_SOA_struct (
        uint8_t VsWsh_Ctrl_SOA_u8)
        :
            m_VsWsh_Ctrl_SOA_u8_( VsWsh_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_Ctrl_SOA_struct::VsWsh_Ctrl_SOA_struct(VsWsh_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_VsWsh_Ctrl_SOA_u8_ (std::move(other_.m_VsWsh_Ctrl_SOA_u8_))
    {
    } 

    VsWsh_Ctrl_SOA_struct& VsWsh_Ctrl_SOA_struct::operator=(VsWsh_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        VsWsh_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void VsWsh_Ctrl_SOA_struct::swap(VsWsh_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_VsWsh_Ctrl_SOA_u8_, other_.m_VsWsh_Ctrl_SOA_u8_);
    }  

    bool VsWsh_Ctrl_SOA_struct::operator == (const VsWsh_Ctrl_SOA_struct& other_) const {
        if (m_VsWsh_Ctrl_SOA_u8_ != other_.m_VsWsh_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool VsWsh_Ctrl_SOA_struct::operator != (const VsWsh_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "VsWsh_Ctrl_SOA_u8: " << (int)sample.VsWsh_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- VsWsh_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_Srv_Req_Union::VsWsh_Srv_Req_Union(VsWsh_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                VsWsh_Set( std::move(other_.VsWsh_Set()));
            } break;
            case 1:
            {  
                VsWsh_Get( std::move(other_.VsWsh_Get()));
            } break;
            case 2:
            {  
                VsWsh_Ctrl( std::move(other_.VsWsh_Ctrl()));
            } break;
            case 3:
            {  
                VsWsh_St_Get( std::move(other_.VsWsh_St_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    VsWsh_Srv_Req_Union& VsWsh_Srv_Req_Union::operator=(VsWsh_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        VsWsh_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    VsWsh_Srv_Req_Union::Union_::Union_()  {
    }

    VsWsh_Srv_Req_Union::Union_::Union_(
        const BodyDomain::VsWsh_Set_struct& VsWsh_Set,
        const BodyDomain::VsWsh_Get_struct& VsWsh_Get,
        const BodyDomain::VsWsh_Ctrl_struct& VsWsh_Ctrl,
        const BodyDomain::VsWsh_St_Get_struct& VsWsh_St_Get)
        :
            m_VsWsh_Set_( VsWsh_Set ),
            m_VsWsh_Get_( VsWsh_Get ),
            m_VsWsh_Ctrl_( VsWsh_Ctrl ),
            m_VsWsh_St_Get_( VsWsh_St_Get ) {
    }

    VsWsh_Srv_Req_Union::VsWsh_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void VsWsh_Srv_Req_Union::swap(VsWsh_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_VsWsh_Set_, other_.m_u_.m_VsWsh_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_VsWsh_Get_, other_.m_u_.m_VsWsh_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_VsWsh_Ctrl_, other_.m_u_.m_VsWsh_Ctrl_);
            } break;
            case 3:
            {  
                swap(m_u_.m_VsWsh_St_Get_, other_.m_u_.m_VsWsh_St_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_VsWsh_Set_, other_.m_u_.m_VsWsh_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_VsWsh_Get_, other_.m_u_.m_VsWsh_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_VsWsh_Ctrl_, other_.m_u_.m_VsWsh_Ctrl_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_VsWsh_St_Get_, other_.m_u_.m_VsWsh_St_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool VsWsh_Srv_Req_Union::operator == (const VsWsh_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_VsWsh_Set_ != other_.m_u_.m_VsWsh_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_VsWsh_Get_ != other_.m_u_.m_VsWsh_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_VsWsh_Ctrl_ != other_.m_u_.m_VsWsh_Ctrl_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_VsWsh_St_Get_ != other_.m_u_.m_VsWsh_St_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool VsWsh_Srv_Req_Union::operator != (const VsWsh_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "VsWsh_Set: " << sample.VsWsh_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "VsWsh_Get: " << sample.VsWsh_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "VsWsh_Ctrl: " << sample.VsWsh_Ctrl()<<", ";
            } break ;
            case 3:
            {  
                o << "VsWsh_St_Get: " << sample.VsWsh_St_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t VsWsh_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- VsWsh_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VsWsh_Srv_Resp_Union::VsWsh_Srv_Resp_Union(VsWsh_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                VsWsh_Set_SOA( std::move(other_.VsWsh_Set_SOA()));
            } break;
            case 1:
            {  
                VsWsh_Get_SOA( std::move(other_.VsWsh_Get_SOA()));
            } break;
            case 2:
            {  
                VsWsh_Ctrl_SOA( std::move(other_.VsWsh_Ctrl_SOA()));
            } break;
            case 3:
            {  
                VsWsh_St_Get_SOA( std::move(other_.VsWsh_St_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    VsWsh_Srv_Resp_Union& VsWsh_Srv_Resp_Union::operator=(VsWsh_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        VsWsh_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    VsWsh_Srv_Resp_Union::Union_::Union_()  {
    }

    VsWsh_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::VsWsh_Rsp_struct& VsWsh_Set_SOA,
        const BodyDomain::VsWsh_Rsp_struct& VsWsh_Get_SOA,
        const BodyDomain::VsWsh_Ctrl_SOA_struct& VsWsh_Ctrl_SOA,
        const BodyDomain::VsWsh_St_struct& VsWsh_St_Get_SOA)
        :
            m_VsWsh_Set_SOA_( VsWsh_Set_SOA ),
            m_VsWsh_Get_SOA_( VsWsh_Get_SOA ),
            m_VsWsh_Ctrl_SOA_( VsWsh_Ctrl_SOA ),
            m_VsWsh_St_Get_SOA_( VsWsh_St_Get_SOA ) {
    }

    VsWsh_Srv_Resp_Union::VsWsh_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void VsWsh_Srv_Resp_Union::swap(VsWsh_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_VsWsh_Set_SOA_, other_.m_u_.m_VsWsh_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_VsWsh_Get_SOA_, other_.m_u_.m_VsWsh_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_VsWsh_Ctrl_SOA_, other_.m_u_.m_VsWsh_Ctrl_SOA_);
            } break;
            case 3:
            {  
                swap(m_u_.m_VsWsh_St_Get_SOA_, other_.m_u_.m_VsWsh_St_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_VsWsh_Set_SOA_, other_.m_u_.m_VsWsh_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_VsWsh_Get_SOA_, other_.m_u_.m_VsWsh_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_VsWsh_Ctrl_SOA_, other_.m_u_.m_VsWsh_Ctrl_SOA_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_VsWsh_St_Get_SOA_, other_.m_u_.m_VsWsh_St_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool VsWsh_Srv_Resp_Union::operator == (const VsWsh_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_VsWsh_Set_SOA_ != other_.m_u_.m_VsWsh_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_VsWsh_Get_SOA_ != other_.m_u_.m_VsWsh_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_VsWsh_Ctrl_SOA_ != other_.m_u_.m_VsWsh_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_VsWsh_St_Get_SOA_ != other_.m_u_.m_VsWsh_St_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool VsWsh_Srv_Resp_Union::operator != (const VsWsh_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VsWsh_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "VsWsh_Set_SOA: " << sample.VsWsh_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "VsWsh_Get_SOA: " << sample.VsWsh_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "VsWsh_Ctrl_SOA: " << sample.VsWsh_Ctrl_SOA()<<", ";
            } break ;
            case 3:
            {  
                o << "VsWsh_St_Get_SOA: " << sample.VsWsh_St_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t VsWsh_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- SSd_Set_struct: 

    SSd_Set_struct::SSd_Set_struct() :
        m_LockVoiWarn_Req_ (0) ,
        m_LowSpdVoi_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    SSd_Set_struct::SSd_Set_struct (
        uint8_t LockVoiWarn_Req,
        uint8_t LowSpdVoi_Set,
        const std::string& CtrlSource)
        :
            m_LockVoiWarn_Req_( LockVoiWarn_Req ),
            m_LowSpdVoi_Set_( LowSpdVoi_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SSd_Set_struct::SSd_Set_struct(SSd_Set_struct&& other_) OMG_NOEXCEPT  :m_LockVoiWarn_Req_ (std::move(other_.m_LockVoiWarn_Req_))
    ,
    m_LowSpdVoi_Set_ (std::move(other_.m_LowSpdVoi_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    SSd_Set_struct& SSd_Set_struct::operator=(SSd_Set_struct&&  other_) OMG_NOEXCEPT {
        SSd_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SSd_Set_struct::swap(SSd_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LockVoiWarn_Req_, other_.m_LockVoiWarn_Req_);
        swap(m_LowSpdVoi_Set_, other_.m_LowSpdVoi_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool SSd_Set_struct::operator == (const SSd_Set_struct& other_) const {
        if (m_LockVoiWarn_Req_ != other_.m_LockVoiWarn_Req_) {
            return false;
        }
        if (m_LowSpdVoi_Set_ != other_.m_LowSpdVoi_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool SSd_Set_struct::operator != (const SSd_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SSd_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LockVoiWarn_Req: " << (int)sample.LockVoiWarn_Req() <<", ";
        o << "LowSpdVoi_Set: " << (int)sample.LowSpdVoi_Set() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- SSd_Get_struct: 

    SSd_Get_struct::SSd_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    SSd_Get_struct::SSd_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SSd_Get_struct::SSd_Get_struct(SSd_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    SSd_Get_struct& SSd_Get_struct::operator=(SSd_Get_struct&&  other_) OMG_NOEXCEPT {
        SSd_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SSd_Get_struct::swap(SSd_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool SSd_Get_struct::operator == (const SSd_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool SSd_Get_struct::operator != (const SSd_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SSd_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- SSd_Rsp_struct: 

    SSd_Rsp_struct::SSd_Rsp_struct() :
        m_LockVoiWarn_Rsp_ (0) ,
        m_LowSpdVoi_Rsp_ (0)  {
    }   

    SSd_Rsp_struct::SSd_Rsp_struct (
        uint8_t LockVoiWarn_Rsp,
        uint8_t LowSpdVoi_Rsp)
        :
            m_LockVoiWarn_Rsp_( LockVoiWarn_Rsp ),
            m_LowSpdVoi_Rsp_( LowSpdVoi_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SSd_Rsp_struct::SSd_Rsp_struct(SSd_Rsp_struct&& other_) OMG_NOEXCEPT  :m_LockVoiWarn_Rsp_ (std::move(other_.m_LockVoiWarn_Rsp_))
    ,
    m_LowSpdVoi_Rsp_ (std::move(other_.m_LowSpdVoi_Rsp_))
    {
    } 

    SSd_Rsp_struct& SSd_Rsp_struct::operator=(SSd_Rsp_struct&&  other_) OMG_NOEXCEPT {
        SSd_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SSd_Rsp_struct::swap(SSd_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LockVoiWarn_Rsp_, other_.m_LockVoiWarn_Rsp_);
        swap(m_LowSpdVoi_Rsp_, other_.m_LowSpdVoi_Rsp_);
    }  

    bool SSd_Rsp_struct::operator == (const SSd_Rsp_struct& other_) const {
        if (m_LockVoiWarn_Rsp_ != other_.m_LockVoiWarn_Rsp_) {
            return false;
        }
        if (m_LowSpdVoi_Rsp_ != other_.m_LowSpdVoi_Rsp_) {
            return false;
        }
        return true;
    }
    bool SSd_Rsp_struct::operator != (const SSd_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SSd_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LockVoiWarn_Rsp: " << (int)sample.LockVoiWarn_Rsp() <<", ";
        o << "LowSpdVoi_Rsp: " << (int)sample.LowSpdVoi_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- SSd_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SSd_Srv_Req_Union::SSd_Srv_Req_Union(SSd_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                SSd_Set( std::move(other_.SSd_Set()));
            } break;
            case 1:
            {  
                SSd_Get( std::move(other_.SSd_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    SSd_Srv_Req_Union& SSd_Srv_Req_Union::operator=(SSd_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        SSd_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    SSd_Srv_Req_Union::Union_::Union_()  {
    }

    SSd_Srv_Req_Union::Union_::Union_(
        const BodyDomain::SSd_Set_struct& SSd_Set,
        const BodyDomain::SSd_Get_struct& SSd_Get)
        :
            m_SSd_Set_( SSd_Set ),
            m_SSd_Get_( SSd_Get ) {
    }

    SSd_Srv_Req_Union::SSd_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void SSd_Srv_Req_Union::swap(SSd_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_SSd_Set_, other_.m_u_.m_SSd_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_SSd_Get_, other_.m_u_.m_SSd_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_SSd_Set_, other_.m_u_.m_SSd_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_SSd_Get_, other_.m_u_.m_SSd_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool SSd_Srv_Req_Union::operator == (const SSd_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_SSd_Set_ != other_.m_u_.m_SSd_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_SSd_Get_ != other_.m_u_.m_SSd_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool SSd_Srv_Req_Union::operator != (const SSd_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SSd_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "SSd_Set: " << sample.SSd_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "SSd_Get: " << sample.SSd_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t SSd_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- SSd_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SSd_Srv_Resp_Union::SSd_Srv_Resp_Union(SSd_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                SSd_Set_SOA( std::move(other_.SSd_Set_SOA()));
            } break;
            case 1:
            {  
                SSd_Get_SOA( std::move(other_.SSd_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    SSd_Srv_Resp_Union& SSd_Srv_Resp_Union::operator=(SSd_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        SSd_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    SSd_Srv_Resp_Union::Union_::Union_()  {
    }

    SSd_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::SSd_Rsp_struct& SSd_Set_SOA,
        const BodyDomain::SSd_Rsp_struct& SSd_Get_SOA)
        :
            m_SSd_Set_SOA_( SSd_Set_SOA ),
            m_SSd_Get_SOA_( SSd_Get_SOA ) {
    }

    SSd_Srv_Resp_Union::SSd_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void SSd_Srv_Resp_Union::swap(SSd_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_SSd_Set_SOA_, other_.m_u_.m_SSd_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_SSd_Get_SOA_, other_.m_u_.m_SSd_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_SSd_Set_SOA_, other_.m_u_.m_SSd_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_SSd_Get_SOA_, other_.m_u_.m_SSd_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool SSd_Srv_Resp_Union::operator == (const SSd_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_SSd_Set_SOA_ != other_.m_u_.m_SSd_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_SSd_Get_SOA_ != other_.m_u_.m_SSd_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool SSd_Srv_Resp_Union::operator != (const SSd_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SSd_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "SSd_Set_SOA: " << sample.SSd_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "SSd_Get_SOA: " << sample.SSd_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t SSd_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- Win_Set_struct: 

    Win_Set_struct::Win_Set_struct() :
        m_LckCloseWin_Set_ (0) ,
        m_RainCloseWin_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    Win_Set_struct::Win_Set_struct (
        uint8_t LckCloseWin_Set,
        uint8_t RainCloseWin_Set,
        const std::string& CtrlSource)
        :
            m_LckCloseWin_Set_( LckCloseWin_Set ),
            m_RainCloseWin_Set_( RainCloseWin_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Win_Set_struct::Win_Set_struct(Win_Set_struct&& other_) OMG_NOEXCEPT  :m_LckCloseWin_Set_ (std::move(other_.m_LckCloseWin_Set_))
    ,
    m_RainCloseWin_Set_ (std::move(other_.m_RainCloseWin_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    Win_Set_struct& Win_Set_struct::operator=(Win_Set_struct&&  other_) OMG_NOEXCEPT {
        Win_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Win_Set_struct::swap(Win_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LckCloseWin_Set_, other_.m_LckCloseWin_Set_);
        swap(m_RainCloseWin_Set_, other_.m_RainCloseWin_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool Win_Set_struct::operator == (const Win_Set_struct& other_) const {
        if (m_LckCloseWin_Set_ != other_.m_LckCloseWin_Set_) {
            return false;
        }
        if (m_RainCloseWin_Set_ != other_.m_RainCloseWin_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool Win_Set_struct::operator != (const Win_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Win_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LckCloseWin_Set: " << (int)sample.LckCloseWin_Set() <<", ";
        o << "RainCloseWin_Set: " << (int)sample.RainCloseWin_Set() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- Win_Get_struct: 

    Win_Get_struct::Win_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    Win_Get_struct::Win_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Win_Get_struct::Win_Get_struct(Win_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    Win_Get_struct& Win_Get_struct::operator=(Win_Get_struct&&  other_) OMG_NOEXCEPT {
        Win_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Win_Get_struct::swap(Win_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool Win_Get_struct::operator == (const Win_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool Win_Get_struct::operator != (const Win_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Win_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- Win_Rsp_struct: 

    Win_Rsp_struct::Win_Rsp_struct() :
        m_LckCloseWin_Rsp_ (0) ,
        m_RainCloseWin_Rsp_ (0)  {
    }   

    Win_Rsp_struct::Win_Rsp_struct (
        uint8_t LckCloseWin_Rsp,
        uint8_t RainCloseWin_Rsp)
        :
            m_LckCloseWin_Rsp_( LckCloseWin_Rsp ),
            m_RainCloseWin_Rsp_( RainCloseWin_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Win_Rsp_struct::Win_Rsp_struct(Win_Rsp_struct&& other_) OMG_NOEXCEPT  :m_LckCloseWin_Rsp_ (std::move(other_.m_LckCloseWin_Rsp_))
    ,
    m_RainCloseWin_Rsp_ (std::move(other_.m_RainCloseWin_Rsp_))
    {
    } 

    Win_Rsp_struct& Win_Rsp_struct::operator=(Win_Rsp_struct&&  other_) OMG_NOEXCEPT {
        Win_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Win_Rsp_struct::swap(Win_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LckCloseWin_Rsp_, other_.m_LckCloseWin_Rsp_);
        swap(m_RainCloseWin_Rsp_, other_.m_RainCloseWin_Rsp_);
    }  

    bool Win_Rsp_struct::operator == (const Win_Rsp_struct& other_) const {
        if (m_LckCloseWin_Rsp_ != other_.m_LckCloseWin_Rsp_) {
            return false;
        }
        if (m_RainCloseWin_Rsp_ != other_.m_RainCloseWin_Rsp_) {
            return false;
        }
        return true;
    }
    bool Win_Rsp_struct::operator != (const Win_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Win_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LckCloseWin_Rsp: " << (int)sample.LckCloseWin_Rsp() <<", ";
        o << "RainCloseWin_Rsp: " << (int)sample.RainCloseWin_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- WinPct_Ctrl_struct: 

    WinPct_Ctrl_struct::WinPct_Ctrl_struct() :
        m_FLWinPst_Act_ (0) ,
        m_FRWinPst_Act_ (0) ,
        m_RLWinPst_Act_ (0) ,
        m_RRWinPst_Act_ (0) ,
        m_WinFastCtl_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    WinPct_Ctrl_struct::WinPct_Ctrl_struct (
        uint8_t FLWinPst_Act,
        uint8_t FRWinPst_Act,
        uint8_t RLWinPst_Act,
        uint8_t RRWinPst_Act,
        uint8_t WinFastCtl_Req,
        const std::string& CtrlSource)
        :
            m_FLWinPst_Act_( FLWinPst_Act ),
            m_FRWinPst_Act_( FRWinPst_Act ),
            m_RLWinPst_Act_( RLWinPst_Act ),
            m_RRWinPst_Act_( RRWinPst_Act ),
            m_WinFastCtl_Req_( WinFastCtl_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    WinPct_Ctrl_struct::WinPct_Ctrl_struct(WinPct_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_FLWinPst_Act_ (std::move(other_.m_FLWinPst_Act_))
    ,
    m_FRWinPst_Act_ (std::move(other_.m_FRWinPst_Act_))
    ,
    m_RLWinPst_Act_ (std::move(other_.m_RLWinPst_Act_))
    ,
    m_RRWinPst_Act_ (std::move(other_.m_RRWinPst_Act_))
    ,
    m_WinFastCtl_Req_ (std::move(other_.m_WinFastCtl_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    WinPct_Ctrl_struct& WinPct_Ctrl_struct::operator=(WinPct_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        WinPct_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void WinPct_Ctrl_struct::swap(WinPct_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLWinPst_Act_, other_.m_FLWinPst_Act_);
        swap(m_FRWinPst_Act_, other_.m_FRWinPst_Act_);
        swap(m_RLWinPst_Act_, other_.m_RLWinPst_Act_);
        swap(m_RRWinPst_Act_, other_.m_RRWinPst_Act_);
        swap(m_WinFastCtl_Req_, other_.m_WinFastCtl_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool WinPct_Ctrl_struct::operator == (const WinPct_Ctrl_struct& other_) const {
        if (m_FLWinPst_Act_ != other_.m_FLWinPst_Act_) {
            return false;
        }
        if (m_FRWinPst_Act_ != other_.m_FRWinPst_Act_) {
            return false;
        }
        if (m_RLWinPst_Act_ != other_.m_RLWinPst_Act_) {
            return false;
        }
        if (m_RRWinPst_Act_ != other_.m_RRWinPst_Act_) {
            return false;
        }
        if (m_WinFastCtl_Req_ != other_.m_WinFastCtl_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool WinPct_Ctrl_struct::operator != (const WinPct_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const WinPct_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLWinPst_Act: " << (int)sample.FLWinPst_Act() <<", ";
        o << "FRWinPst_Act: " << (int)sample.FRWinPst_Act() <<", ";
        o << "RLWinPst_Act: " << (int)sample.RLWinPst_Act() <<", ";
        o << "RRWinPst_Act: " << (int)sample.RRWinPst_Act() <<", ";
        o << "WinFastCtl_Req: " << (int)sample.WinFastCtl_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- WinPct_Ctrl_SOA_struct: 

    WinPct_Ctrl_SOA_struct::WinPct_Ctrl_SOA_struct() :
        m_WinPct_Ctrl_SOA_u8_ (0)  {
    }   

    WinPct_Ctrl_SOA_struct::WinPct_Ctrl_SOA_struct (
        uint8_t WinPct_Ctrl_SOA_u8)
        :
            m_WinPct_Ctrl_SOA_u8_( WinPct_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    WinPct_Ctrl_SOA_struct::WinPct_Ctrl_SOA_struct(WinPct_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_WinPct_Ctrl_SOA_u8_ (std::move(other_.m_WinPct_Ctrl_SOA_u8_))
    {
    } 

    WinPct_Ctrl_SOA_struct& WinPct_Ctrl_SOA_struct::operator=(WinPct_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        WinPct_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void WinPct_Ctrl_SOA_struct::swap(WinPct_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_WinPct_Ctrl_SOA_u8_, other_.m_WinPct_Ctrl_SOA_u8_);
    }  

    bool WinPct_Ctrl_SOA_struct::operator == (const WinPct_Ctrl_SOA_struct& other_) const {
        if (m_WinPct_Ctrl_SOA_u8_ != other_.m_WinPct_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool WinPct_Ctrl_SOA_struct::operator != (const WinPct_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const WinPct_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "WinPct_Ctrl_SOA_u8: " << (int)sample.WinPct_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- Win_St_Get_struct: 

    Win_St_Get_struct::Win_St_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    Win_St_Get_struct::Win_St_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Win_St_Get_struct::Win_St_Get_struct(Win_St_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    Win_St_Get_struct& Win_St_Get_struct::operator=(Win_St_Get_struct&&  other_) OMG_NOEXCEPT {
        Win_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Win_St_Get_struct::swap(Win_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool Win_St_Get_struct::operator == (const Win_St_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool Win_St_Get_struct::operator != (const Win_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Win_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- Win_St_struct: 

    Win_St_struct::Win_St_struct() :
        m_FLWinPst_St_ (0) ,
        m_FRWinPst_St_ (0) ,
        m_RLWinPst_St_ (0) ,
        m_RRWinPst_St_ (0) ,
        m_FLWdwMov_St_ (0) ,
        m_FRWdwMov_St_ (0) ,
        m_RLWdwMov_St_ (0) ,
        m_RRWdwMov_St_ (0) ,
        m_FLWinStpRsn_St_ (0) ,
        m_FRWinStpRsn_St_ (0) ,
        m_RLWinStpRsn_St_ (0) ,
        m_RRWinStpRsn_St_ (0) ,
        m_AllWinClose_St_ (0) ,
        m_AllWinOpen_St_ (0) ,
        m_AllWinFrshAir_St_ (0) ,
        m_WinVent_St_ (0)  {
    }   

    Win_St_struct::Win_St_struct (
        uint8_t FLWinPst_St,
        uint8_t FRWinPst_St,
        uint8_t RLWinPst_St,
        uint8_t RRWinPst_St,
        uint8_t FLWdwMov_St,
        uint8_t FRWdwMov_St,
        uint8_t RLWdwMov_St,
        uint8_t RRWdwMov_St,
        uint8_t FLWinStpRsn_St,
        uint8_t FRWinStpRsn_St,
        uint8_t RLWinStpRsn_St,
        uint8_t RRWinStpRsn_St,
        uint8_t AllWinClose_St,
        uint8_t AllWinOpen_St,
        uint8_t AllWinFrshAir_St,
        uint8_t WinVent_St)
        :
            m_FLWinPst_St_( FLWinPst_St ),
            m_FRWinPst_St_( FRWinPst_St ),
            m_RLWinPst_St_( RLWinPst_St ),
            m_RRWinPst_St_( RRWinPst_St ),
            m_FLWdwMov_St_( FLWdwMov_St ),
            m_FRWdwMov_St_( FRWdwMov_St ),
            m_RLWdwMov_St_( RLWdwMov_St ),
            m_RRWdwMov_St_( RRWdwMov_St ),
            m_FLWinStpRsn_St_( FLWinStpRsn_St ),
            m_FRWinStpRsn_St_( FRWinStpRsn_St ),
            m_RLWinStpRsn_St_( RLWinStpRsn_St ),
            m_RRWinStpRsn_St_( RRWinStpRsn_St ),
            m_AllWinClose_St_( AllWinClose_St ),
            m_AllWinOpen_St_( AllWinOpen_St ),
            m_AllWinFrshAir_St_( AllWinFrshAir_St ),
            m_WinVent_St_( WinVent_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Win_St_struct::Win_St_struct(Win_St_struct&& other_) OMG_NOEXCEPT  :m_FLWinPst_St_ (std::move(other_.m_FLWinPst_St_))
    ,
    m_FRWinPst_St_ (std::move(other_.m_FRWinPst_St_))
    ,
    m_RLWinPst_St_ (std::move(other_.m_RLWinPst_St_))
    ,
    m_RRWinPst_St_ (std::move(other_.m_RRWinPst_St_))
    ,
    m_FLWdwMov_St_ (std::move(other_.m_FLWdwMov_St_))
    ,
    m_FRWdwMov_St_ (std::move(other_.m_FRWdwMov_St_))
    ,
    m_RLWdwMov_St_ (std::move(other_.m_RLWdwMov_St_))
    ,
    m_RRWdwMov_St_ (std::move(other_.m_RRWdwMov_St_))
    ,
    m_FLWinStpRsn_St_ (std::move(other_.m_FLWinStpRsn_St_))
    ,
    m_FRWinStpRsn_St_ (std::move(other_.m_FRWinStpRsn_St_))
    ,
    m_RLWinStpRsn_St_ (std::move(other_.m_RLWinStpRsn_St_))
    ,
    m_RRWinStpRsn_St_ (std::move(other_.m_RRWinStpRsn_St_))
    ,
    m_AllWinClose_St_ (std::move(other_.m_AllWinClose_St_))
    ,
    m_AllWinOpen_St_ (std::move(other_.m_AllWinOpen_St_))
    ,
    m_AllWinFrshAir_St_ (std::move(other_.m_AllWinFrshAir_St_))
    ,
    m_WinVent_St_ (std::move(other_.m_WinVent_St_))
    {
    } 

    Win_St_struct& Win_St_struct::operator=(Win_St_struct&&  other_) OMG_NOEXCEPT {
        Win_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Win_St_struct::swap(Win_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLWinPst_St_, other_.m_FLWinPst_St_);
        swap(m_FRWinPst_St_, other_.m_FRWinPst_St_);
        swap(m_RLWinPst_St_, other_.m_RLWinPst_St_);
        swap(m_RRWinPst_St_, other_.m_RRWinPst_St_);
        swap(m_FLWdwMov_St_, other_.m_FLWdwMov_St_);
        swap(m_FRWdwMov_St_, other_.m_FRWdwMov_St_);
        swap(m_RLWdwMov_St_, other_.m_RLWdwMov_St_);
        swap(m_RRWdwMov_St_, other_.m_RRWdwMov_St_);
        swap(m_FLWinStpRsn_St_, other_.m_FLWinStpRsn_St_);
        swap(m_FRWinStpRsn_St_, other_.m_FRWinStpRsn_St_);
        swap(m_RLWinStpRsn_St_, other_.m_RLWinStpRsn_St_);
        swap(m_RRWinStpRsn_St_, other_.m_RRWinStpRsn_St_);
        swap(m_AllWinClose_St_, other_.m_AllWinClose_St_);
        swap(m_AllWinOpen_St_, other_.m_AllWinOpen_St_);
        swap(m_AllWinFrshAir_St_, other_.m_AllWinFrshAir_St_);
        swap(m_WinVent_St_, other_.m_WinVent_St_);
    }  

    bool Win_St_struct::operator == (const Win_St_struct& other_) const {
        if (m_FLWinPst_St_ != other_.m_FLWinPst_St_) {
            return false;
        }
        if (m_FRWinPst_St_ != other_.m_FRWinPst_St_) {
            return false;
        }
        if (m_RLWinPst_St_ != other_.m_RLWinPst_St_) {
            return false;
        }
        if (m_RRWinPst_St_ != other_.m_RRWinPst_St_) {
            return false;
        }
        if (m_FLWdwMov_St_ != other_.m_FLWdwMov_St_) {
            return false;
        }
        if (m_FRWdwMov_St_ != other_.m_FRWdwMov_St_) {
            return false;
        }
        if (m_RLWdwMov_St_ != other_.m_RLWdwMov_St_) {
            return false;
        }
        if (m_RRWdwMov_St_ != other_.m_RRWdwMov_St_) {
            return false;
        }
        if (m_FLWinStpRsn_St_ != other_.m_FLWinStpRsn_St_) {
            return false;
        }
        if (m_FRWinStpRsn_St_ != other_.m_FRWinStpRsn_St_) {
            return false;
        }
        if (m_RLWinStpRsn_St_ != other_.m_RLWinStpRsn_St_) {
            return false;
        }
        if (m_RRWinStpRsn_St_ != other_.m_RRWinStpRsn_St_) {
            return false;
        }
        if (m_AllWinClose_St_ != other_.m_AllWinClose_St_) {
            return false;
        }
        if (m_AllWinOpen_St_ != other_.m_AllWinOpen_St_) {
            return false;
        }
        if (m_AllWinFrshAir_St_ != other_.m_AllWinFrshAir_St_) {
            return false;
        }
        if (m_WinVent_St_ != other_.m_WinVent_St_) {
            return false;
        }
        return true;
    }
    bool Win_St_struct::operator != (const Win_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Win_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLWinPst_St: " << (int)sample.FLWinPst_St() <<", ";
        o << "FRWinPst_St: " << (int)sample.FRWinPst_St() <<", ";
        o << "RLWinPst_St: " << (int)sample.RLWinPst_St() <<", ";
        o << "RRWinPst_St: " << (int)sample.RRWinPst_St() <<", ";
        o << "FLWdwMov_St: " << (int)sample.FLWdwMov_St() <<", ";
        o << "FRWdwMov_St: " << (int)sample.FRWdwMov_St() <<", ";
        o << "RLWdwMov_St: " << (int)sample.RLWdwMov_St() <<", ";
        o << "RRWdwMov_St: " << (int)sample.RRWdwMov_St() <<", ";
        o << "FLWinStpRsn_St: " << (int)sample.FLWinStpRsn_St() <<", ";
        o << "FRWinStpRsn_St: " << (int)sample.FRWinStpRsn_St() <<", ";
        o << "RLWinStpRsn_St: " << (int)sample.RLWinStpRsn_St() <<", ";
        o << "RRWinStpRsn_St: " << (int)sample.RRWinStpRsn_St() <<", ";
        o << "AllWinClose_St: " << (int)sample.AllWinClose_St() <<", ";
        o << "AllWinOpen_St: " << (int)sample.AllWinOpen_St() <<", ";
        o << "AllWinFrshAir_St: " << (int)sample.AllWinFrshAir_St() <<", ";
        o << "WinVent_St: " << (int)sample.WinVent_St()  ;
        o <<"]";
        return o;
    }

    // ---- Win_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Win_Srv_Req_Union::Win_Srv_Req_Union(Win_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                Win_Set( std::move(other_.Win_Set()));
            } break;
            case 1:
            {  
                Win_Get( std::move(other_.Win_Get()));
            } break;
            case 2:
            {  
                WinPct_Ctrl( std::move(other_.WinPct_Ctrl()));
            } break;
            case 3:
            {  
                Win_St_Get( std::move(other_.Win_St_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    Win_Srv_Req_Union& Win_Srv_Req_Union::operator=(Win_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        Win_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    Win_Srv_Req_Union::Union_::Union_()  {
    }

    Win_Srv_Req_Union::Union_::Union_(
        const BodyDomain::Win_Set_struct& Win_Set,
        const BodyDomain::Win_Get_struct& Win_Get,
        const BodyDomain::WinPct_Ctrl_struct& WinPct_Ctrl,
        const BodyDomain::Win_St_Get_struct& Win_St_Get)
        :
            m_Win_Set_( Win_Set ),
            m_Win_Get_( Win_Get ),
            m_WinPct_Ctrl_( WinPct_Ctrl ),
            m_Win_St_Get_( Win_St_Get ) {
    }

    Win_Srv_Req_Union::Win_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void Win_Srv_Req_Union::swap(Win_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_Win_Set_, other_.m_u_.m_Win_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_Win_Get_, other_.m_u_.m_Win_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_WinPct_Ctrl_, other_.m_u_.m_WinPct_Ctrl_);
            } break;
            case 3:
            {  
                swap(m_u_.m_Win_St_Get_, other_.m_u_.m_Win_St_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_Win_Set_, other_.m_u_.m_Win_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_Win_Get_, other_.m_u_.m_Win_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_WinPct_Ctrl_, other_.m_u_.m_WinPct_Ctrl_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_Win_St_Get_, other_.m_u_.m_Win_St_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool Win_Srv_Req_Union::operator == (const Win_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_Win_Set_ != other_.m_u_.m_Win_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_Win_Get_ != other_.m_u_.m_Win_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_WinPct_Ctrl_ != other_.m_u_.m_WinPct_Ctrl_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_Win_St_Get_ != other_.m_u_.m_Win_St_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool Win_Srv_Req_Union::operator != (const Win_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Win_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "Win_Set: " << sample.Win_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "Win_Get: " << sample.Win_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "WinPct_Ctrl: " << sample.WinPct_Ctrl()<<", ";
            } break ;
            case 3:
            {  
                o << "Win_St_Get: " << sample.Win_St_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t Win_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- Win_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Win_Srv_Resp_Union::Win_Srv_Resp_Union(Win_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                Win_Set_SOA( std::move(other_.Win_Set_SOA()));
            } break;
            case 1:
            {  
                Win_Get_SOA( std::move(other_.Win_Get_SOA()));
            } break;
            case 2:
            {  
                WinPct_Ctrl_SOA( std::move(other_.WinPct_Ctrl_SOA()));
            } break;
            case 3:
            {  
                Win_St_Get_SOA( std::move(other_.Win_St_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    Win_Srv_Resp_Union& Win_Srv_Resp_Union::operator=(Win_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        Win_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    Win_Srv_Resp_Union::Union_::Union_()  {
    }

    Win_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::Win_Rsp_struct& Win_Set_SOA,
        const BodyDomain::Win_Rsp_struct& Win_Get_SOA,
        const BodyDomain::WinPct_Ctrl_SOA_struct& WinPct_Ctrl_SOA,
        const BodyDomain::Win_St_struct& Win_St_Get_SOA)
        :
            m_Win_Set_SOA_( Win_Set_SOA ),
            m_Win_Get_SOA_( Win_Get_SOA ),
            m_WinPct_Ctrl_SOA_( WinPct_Ctrl_SOA ),
            m_Win_St_Get_SOA_( Win_St_Get_SOA ) {
    }

    Win_Srv_Resp_Union::Win_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void Win_Srv_Resp_Union::swap(Win_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_Win_Set_SOA_, other_.m_u_.m_Win_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_Win_Get_SOA_, other_.m_u_.m_Win_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_WinPct_Ctrl_SOA_, other_.m_u_.m_WinPct_Ctrl_SOA_);
            } break;
            case 3:
            {  
                swap(m_u_.m_Win_St_Get_SOA_, other_.m_u_.m_Win_St_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_Win_Set_SOA_, other_.m_u_.m_Win_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_Win_Get_SOA_, other_.m_u_.m_Win_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_WinPct_Ctrl_SOA_, other_.m_u_.m_WinPct_Ctrl_SOA_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_Win_St_Get_SOA_, other_.m_u_.m_Win_St_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool Win_Srv_Resp_Union::operator == (const Win_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_Win_Set_SOA_ != other_.m_u_.m_Win_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_Win_Get_SOA_ != other_.m_u_.m_Win_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_WinPct_Ctrl_SOA_ != other_.m_u_.m_WinPct_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_Win_St_Get_SOA_ != other_.m_u_.m_Win_St_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool Win_Srv_Resp_Union::operator != (const Win_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Win_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "Win_Set_SOA: " << sample.Win_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "Win_Get_SOA: " << sample.Win_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "WinPct_Ctrl_SOA: " << sample.WinPct_Ctrl_SOA()<<", ";
            } break ;
            case 3:
            {  
                o << "Win_St_Get_SOA: " << sample.Win_St_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t Win_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- BdPst_Set_struct: 

    BdPst_Set_struct::BdPst_Set_struct() :
        m_ExMirAutoTurnOver_Set_ (0) ,
        m_ExMirFoldEn_Set_ (0) ,
        m_ExMirUnfoldAlt_Set_ (0) ,
        m_FLSeatWelcome_Set_ (0) ,
        m_ExitVehicleMemory_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdPst_Set_struct::BdPst_Set_struct (
        uint8_t ExMirAutoTurnOver_Set,
        uint8_t ExMirFoldEn_Set,
        uint8_t ExMirUnfoldAlt_Set,
        uint8_t FLSeatWelcome_Set,
        uint8_t ExitVehicleMemory_Set,
        const std::string& CtrlSource)
        :
            m_ExMirAutoTurnOver_Set_( ExMirAutoTurnOver_Set ),
            m_ExMirFoldEn_Set_( ExMirFoldEn_Set ),
            m_ExMirUnfoldAlt_Set_( ExMirUnfoldAlt_Set ),
            m_FLSeatWelcome_Set_( FLSeatWelcome_Set ),
            m_ExitVehicleMemory_Set_( ExitVehicleMemory_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_Set_struct::BdPst_Set_struct(BdPst_Set_struct&& other_) OMG_NOEXCEPT  :m_ExMirAutoTurnOver_Set_ (std::move(other_.m_ExMirAutoTurnOver_Set_))
    ,
    m_ExMirFoldEn_Set_ (std::move(other_.m_ExMirFoldEn_Set_))
    ,
    m_ExMirUnfoldAlt_Set_ (std::move(other_.m_ExMirUnfoldAlt_Set_))
    ,
    m_FLSeatWelcome_Set_ (std::move(other_.m_FLSeatWelcome_Set_))
    ,
    m_ExitVehicleMemory_Set_ (std::move(other_.m_ExitVehicleMemory_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdPst_Set_struct& BdPst_Set_struct::operator=(BdPst_Set_struct&&  other_) OMG_NOEXCEPT {
        BdPst_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdPst_Set_struct::swap(BdPst_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ExMirAutoTurnOver_Set_, other_.m_ExMirAutoTurnOver_Set_);
        swap(m_ExMirFoldEn_Set_, other_.m_ExMirFoldEn_Set_);
        swap(m_ExMirUnfoldAlt_Set_, other_.m_ExMirUnfoldAlt_Set_);
        swap(m_FLSeatWelcome_Set_, other_.m_FLSeatWelcome_Set_);
        swap(m_ExitVehicleMemory_Set_, other_.m_ExitVehicleMemory_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdPst_Set_struct::operator == (const BdPst_Set_struct& other_) const {
        if (m_ExMirAutoTurnOver_Set_ != other_.m_ExMirAutoTurnOver_Set_) {
            return false;
        }
        if (m_ExMirFoldEn_Set_ != other_.m_ExMirFoldEn_Set_) {
            return false;
        }
        if (m_ExMirUnfoldAlt_Set_ != other_.m_ExMirUnfoldAlt_Set_) {
            return false;
        }
        if (m_FLSeatWelcome_Set_ != other_.m_FLSeatWelcome_Set_) {
            return false;
        }
        if (m_ExitVehicleMemory_Set_ != other_.m_ExitVehicleMemory_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdPst_Set_struct::operator != (const BdPst_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ExMirAutoTurnOver_Set: " << (int)sample.ExMirAutoTurnOver_Set() <<", ";
        o << "ExMirFoldEn_Set: " << (int)sample.ExMirFoldEn_Set() <<", ";
        o << "ExMirUnfoldAlt_Set: " << (int)sample.ExMirUnfoldAlt_Set() <<", ";
        o << "FLSeatWelcome_Set: " << (int)sample.FLSeatWelcome_Set() <<", ";
        o << "ExitVehicleMemory_Set: " << (int)sample.ExitVehicleMemory_Set() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdPst_Get_struct: 

    BdPst_Get_struct::BdPst_Get_struct() :
        m_BdPstSetBit_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdPst_Get_struct::BdPst_Get_struct (
        uint8_t BdPstSetBit,
        const std::string& CtrlSource)
        :
            m_BdPstSetBit_( BdPstSetBit ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_Get_struct::BdPst_Get_struct(BdPst_Get_struct&& other_) OMG_NOEXCEPT  :m_BdPstSetBit_ (std::move(other_.m_BdPstSetBit_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdPst_Get_struct& BdPst_Get_struct::operator=(BdPst_Get_struct&&  other_) OMG_NOEXCEPT {
        BdPst_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdPst_Get_struct::swap(BdPst_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_BdPstSetBit_, other_.m_BdPstSetBit_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdPst_Get_struct::operator == (const BdPst_Get_struct& other_) const {
        if (m_BdPstSetBit_ != other_.m_BdPstSetBit_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdPst_Get_struct::operator != (const BdPst_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "BdPstSetBit: " << (int)sample.BdPstSetBit() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdPst_Rsp_struct: 

    BdPst_Rsp_struct::BdPst_Rsp_struct() :
        m_ExMirAutoTurnOverSet_Rsp_ (0) ,
        m_ExMirFoldEn_Rsp_ (0) ,
        m_ExMirUnfoldAlt_Rsp_ (0) ,
        m_FLSeatWelcome_Rsp_ (0) ,
        m_ExitVehicleMemory_Rsp_ (0)  {
    }   

    BdPst_Rsp_struct::BdPst_Rsp_struct (
        uint8_t ExMirAutoTurnOverSet_Rsp,
        uint8_t ExMirFoldEn_Rsp,
        uint8_t ExMirUnfoldAlt_Rsp,
        uint8_t FLSeatWelcome_Rsp,
        uint8_t ExitVehicleMemory_Rsp)
        :
            m_ExMirAutoTurnOverSet_Rsp_( ExMirAutoTurnOverSet_Rsp ),
            m_ExMirFoldEn_Rsp_( ExMirFoldEn_Rsp ),
            m_ExMirUnfoldAlt_Rsp_( ExMirUnfoldAlt_Rsp ),
            m_FLSeatWelcome_Rsp_( FLSeatWelcome_Rsp ),
            m_ExitVehicleMemory_Rsp_( ExitVehicleMemory_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_Rsp_struct::BdPst_Rsp_struct(BdPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_ExMirAutoTurnOverSet_Rsp_ (std::move(other_.m_ExMirAutoTurnOverSet_Rsp_))
    ,
    m_ExMirFoldEn_Rsp_ (std::move(other_.m_ExMirFoldEn_Rsp_))
    ,
    m_ExMirUnfoldAlt_Rsp_ (std::move(other_.m_ExMirUnfoldAlt_Rsp_))
    ,
    m_FLSeatWelcome_Rsp_ (std::move(other_.m_FLSeatWelcome_Rsp_))
    ,
    m_ExitVehicleMemory_Rsp_ (std::move(other_.m_ExitVehicleMemory_Rsp_))
    {
    } 

    BdPst_Rsp_struct& BdPst_Rsp_struct::operator=(BdPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        BdPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdPst_Rsp_struct::swap(BdPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ExMirAutoTurnOverSet_Rsp_, other_.m_ExMirAutoTurnOverSet_Rsp_);
        swap(m_ExMirFoldEn_Rsp_, other_.m_ExMirFoldEn_Rsp_);
        swap(m_ExMirUnfoldAlt_Rsp_, other_.m_ExMirUnfoldAlt_Rsp_);
        swap(m_FLSeatWelcome_Rsp_, other_.m_FLSeatWelcome_Rsp_);
        swap(m_ExitVehicleMemory_Rsp_, other_.m_ExitVehicleMemory_Rsp_);
    }  

    bool BdPst_Rsp_struct::operator == (const BdPst_Rsp_struct& other_) const {
        if (m_ExMirAutoTurnOverSet_Rsp_ != other_.m_ExMirAutoTurnOverSet_Rsp_) {
            return false;
        }
        if (m_ExMirFoldEn_Rsp_ != other_.m_ExMirFoldEn_Rsp_) {
            return false;
        }
        if (m_ExMirUnfoldAlt_Rsp_ != other_.m_ExMirUnfoldAlt_Rsp_) {
            return false;
        }
        if (m_FLSeatWelcome_Rsp_ != other_.m_FLSeatWelcome_Rsp_) {
            return false;
        }
        if (m_ExitVehicleMemory_Rsp_ != other_.m_ExitVehicleMemory_Rsp_) {
            return false;
        }
        return true;
    }
    bool BdPst_Rsp_struct::operator != (const BdPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ExMirAutoTurnOverSet_Rsp: " << (int)sample.ExMirAutoTurnOverSet_Rsp() <<", ";
        o << "ExMirFoldEn_Rsp: " << (int)sample.ExMirFoldEn_Rsp() <<", ";
        o << "ExMirUnfoldAlt_Rsp: " << (int)sample.ExMirUnfoldAlt_Rsp() <<", ";
        o << "FLSeatWelcome_Rsp: " << (int)sample.FLSeatWelcome_Rsp() <<", ";
        o << "ExitVehicleMemory_Rsp: " << (int)sample.ExitVehicleMemory_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- BdPst_Ctrl_struct: 

    BdPst_Ctrl_struct::BdPst_Ctrl_struct() :
        m_ExMirCtrl_Act_ (0) ,
        m_LExMirUDAdj_Act_ (0) ,
        m_LExMirLRAdj_Act_ (0) ,
        m_RExMirUDAdj_Act_ (0) ,
        m_RExMirLRAdj_Act_ (0) ,
        m_SteerTiltAdj_Act_ (0) ,
        m_SteerTeleAdj_Act_ (0) ,
        m_SteerLongStroke_Req_ (0) ,
        m_FLMemPstExport_req_ (0) ,
        m_FRMemPstExPort_req_ (0) ,
        m_FLSeatPstMem_Req_ (0) ,
        m_FRSeatPstMem_Req_ (0) ,
        m_SteerTiltPst_Req_ (0) ,
        m_SteerTelePst_Req_ (0) ,
        m_LExMirUDPst_Req_ (0) ,
        m_LExMirLRPst_Req_ (0) ,
        m_RExMirUDPst_Req_ (0) ,
        m_RExMirLRPst_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdPst_Ctrl_struct::BdPst_Ctrl_struct (
        uint8_t ExMirCtrl_Act,
        uint8_t LExMirUDAdj_Act,
        uint8_t LExMirLRAdj_Act,
        uint8_t RExMirUDAdj_Act,
        uint8_t RExMirLRAdj_Act,
        uint8_t SteerTiltAdj_Act,
        uint8_t SteerTeleAdj_Act,
        uint8_t SteerLongStroke_Req,
        uint8_t FLMemPstExport_req,
        uint8_t FRMemPstExPort_req,
        uint8_t FLSeatPstMem_Req,
        uint8_t FRSeatPstMem_Req,
        uint8_t SteerTiltPst_Req,
        uint8_t SteerTelePst_Req,
        uint8_t LExMirUDPst_Req,
        uint8_t LExMirLRPst_Req,
        uint8_t RExMirUDPst_Req,
        uint8_t RExMirLRPst_Req,
        const std::string& CtrlSource)
        :
            m_ExMirCtrl_Act_( ExMirCtrl_Act ),
            m_LExMirUDAdj_Act_( LExMirUDAdj_Act ),
            m_LExMirLRAdj_Act_( LExMirLRAdj_Act ),
            m_RExMirUDAdj_Act_( RExMirUDAdj_Act ),
            m_RExMirLRAdj_Act_( RExMirLRAdj_Act ),
            m_SteerTiltAdj_Act_( SteerTiltAdj_Act ),
            m_SteerTeleAdj_Act_( SteerTeleAdj_Act ),
            m_SteerLongStroke_Req_( SteerLongStroke_Req ),
            m_FLMemPstExport_req_( FLMemPstExport_req ),
            m_FRMemPstExPort_req_( FRMemPstExPort_req ),
            m_FLSeatPstMem_Req_( FLSeatPstMem_Req ),
            m_FRSeatPstMem_Req_( FRSeatPstMem_Req ),
            m_SteerTiltPst_Req_( SteerTiltPst_Req ),
            m_SteerTelePst_Req_( SteerTelePst_Req ),
            m_LExMirUDPst_Req_( LExMirUDPst_Req ),
            m_LExMirLRPst_Req_( LExMirLRPst_Req ),
            m_RExMirUDPst_Req_( RExMirUDPst_Req ),
            m_RExMirLRPst_Req_( RExMirLRPst_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_Ctrl_struct::BdPst_Ctrl_struct(BdPst_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_ExMirCtrl_Act_ (std::move(other_.m_ExMirCtrl_Act_))
    ,
    m_LExMirUDAdj_Act_ (std::move(other_.m_LExMirUDAdj_Act_))
    ,
    m_LExMirLRAdj_Act_ (std::move(other_.m_LExMirLRAdj_Act_))
    ,
    m_RExMirUDAdj_Act_ (std::move(other_.m_RExMirUDAdj_Act_))
    ,
    m_RExMirLRAdj_Act_ (std::move(other_.m_RExMirLRAdj_Act_))
    ,
    m_SteerTiltAdj_Act_ (std::move(other_.m_SteerTiltAdj_Act_))
    ,
    m_SteerTeleAdj_Act_ (std::move(other_.m_SteerTeleAdj_Act_))
    ,
    m_SteerLongStroke_Req_ (std::move(other_.m_SteerLongStroke_Req_))
    ,
    m_FLMemPstExport_req_ (std::move(other_.m_FLMemPstExport_req_))
    ,
    m_FRMemPstExPort_req_ (std::move(other_.m_FRMemPstExPort_req_))
    ,
    m_FLSeatPstMem_Req_ (std::move(other_.m_FLSeatPstMem_Req_))
    ,
    m_FRSeatPstMem_Req_ (std::move(other_.m_FRSeatPstMem_Req_))
    ,
    m_SteerTiltPst_Req_ (std::move(other_.m_SteerTiltPst_Req_))
    ,
    m_SteerTelePst_Req_ (std::move(other_.m_SteerTelePst_Req_))
    ,
    m_LExMirUDPst_Req_ (std::move(other_.m_LExMirUDPst_Req_))
    ,
    m_LExMirLRPst_Req_ (std::move(other_.m_LExMirLRPst_Req_))
    ,
    m_RExMirUDPst_Req_ (std::move(other_.m_RExMirUDPst_Req_))
    ,
    m_RExMirLRPst_Req_ (std::move(other_.m_RExMirLRPst_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdPst_Ctrl_struct& BdPst_Ctrl_struct::operator=(BdPst_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        BdPst_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdPst_Ctrl_struct::swap(BdPst_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ExMirCtrl_Act_, other_.m_ExMirCtrl_Act_);
        swap(m_LExMirUDAdj_Act_, other_.m_LExMirUDAdj_Act_);
        swap(m_LExMirLRAdj_Act_, other_.m_LExMirLRAdj_Act_);
        swap(m_RExMirUDAdj_Act_, other_.m_RExMirUDAdj_Act_);
        swap(m_RExMirLRAdj_Act_, other_.m_RExMirLRAdj_Act_);
        swap(m_SteerTiltAdj_Act_, other_.m_SteerTiltAdj_Act_);
        swap(m_SteerTeleAdj_Act_, other_.m_SteerTeleAdj_Act_);
        swap(m_SteerLongStroke_Req_, other_.m_SteerLongStroke_Req_);
        swap(m_FLMemPstExport_req_, other_.m_FLMemPstExport_req_);
        swap(m_FRMemPstExPort_req_, other_.m_FRMemPstExPort_req_);
        swap(m_FLSeatPstMem_Req_, other_.m_FLSeatPstMem_Req_);
        swap(m_FRSeatPstMem_Req_, other_.m_FRSeatPstMem_Req_);
        swap(m_SteerTiltPst_Req_, other_.m_SteerTiltPst_Req_);
        swap(m_SteerTelePst_Req_, other_.m_SteerTelePst_Req_);
        swap(m_LExMirUDPst_Req_, other_.m_LExMirUDPst_Req_);
        swap(m_LExMirLRPst_Req_, other_.m_LExMirLRPst_Req_);
        swap(m_RExMirUDPst_Req_, other_.m_RExMirUDPst_Req_);
        swap(m_RExMirLRPst_Req_, other_.m_RExMirLRPst_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdPst_Ctrl_struct::operator == (const BdPst_Ctrl_struct& other_) const {
        if (m_ExMirCtrl_Act_ != other_.m_ExMirCtrl_Act_) {
            return false;
        }
        if (m_LExMirUDAdj_Act_ != other_.m_LExMirUDAdj_Act_) {
            return false;
        }
        if (m_LExMirLRAdj_Act_ != other_.m_LExMirLRAdj_Act_) {
            return false;
        }
        if (m_RExMirUDAdj_Act_ != other_.m_RExMirUDAdj_Act_) {
            return false;
        }
        if (m_RExMirLRAdj_Act_ != other_.m_RExMirLRAdj_Act_) {
            return false;
        }
        if (m_SteerTiltAdj_Act_ != other_.m_SteerTiltAdj_Act_) {
            return false;
        }
        if (m_SteerTeleAdj_Act_ != other_.m_SteerTeleAdj_Act_) {
            return false;
        }
        if (m_SteerLongStroke_Req_ != other_.m_SteerLongStroke_Req_) {
            return false;
        }
        if (m_FLMemPstExport_req_ != other_.m_FLMemPstExport_req_) {
            return false;
        }
        if (m_FRMemPstExPort_req_ != other_.m_FRMemPstExPort_req_) {
            return false;
        }
        if (m_FLSeatPstMem_Req_ != other_.m_FLSeatPstMem_Req_) {
            return false;
        }
        if (m_FRSeatPstMem_Req_ != other_.m_FRSeatPstMem_Req_) {
            return false;
        }
        if (m_SteerTiltPst_Req_ != other_.m_SteerTiltPst_Req_) {
            return false;
        }
        if (m_SteerTelePst_Req_ != other_.m_SteerTelePst_Req_) {
            return false;
        }
        if (m_LExMirUDPst_Req_ != other_.m_LExMirUDPst_Req_) {
            return false;
        }
        if (m_LExMirLRPst_Req_ != other_.m_LExMirLRPst_Req_) {
            return false;
        }
        if (m_RExMirUDPst_Req_ != other_.m_RExMirUDPst_Req_) {
            return false;
        }
        if (m_RExMirLRPst_Req_ != other_.m_RExMirLRPst_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdPst_Ctrl_struct::operator != (const BdPst_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ExMirCtrl_Act: " << (int)sample.ExMirCtrl_Act() <<", ";
        o << "LExMirUDAdj_Act: " << (int)sample.LExMirUDAdj_Act() <<", ";
        o << "LExMirLRAdj_Act: " << (int)sample.LExMirLRAdj_Act() <<", ";
        o << "RExMirUDAdj_Act: " << (int)sample.RExMirUDAdj_Act() <<", ";
        o << "RExMirLRAdj_Act: " << (int)sample.RExMirLRAdj_Act() <<", ";
        o << "SteerTiltAdj_Act: " << (int)sample.SteerTiltAdj_Act() <<", ";
        o << "SteerTeleAdj_Act: " << (int)sample.SteerTeleAdj_Act() <<", ";
        o << "SteerLongStroke_Req: " << (int)sample.SteerLongStroke_Req() <<", ";
        o << "FLMemPstExport_req: " << (int)sample.FLMemPstExport_req() <<", ";
        o << "FRMemPstExPort_req: " << (int)sample.FRMemPstExPort_req() <<", ";
        o << "FLSeatPstMem_Req: " << (int)sample.FLSeatPstMem_Req() <<", ";
        o << "FRSeatPstMem_Req: " << (int)sample.FRSeatPstMem_Req() <<", ";
        o << "SteerTiltPst_Req: " << (int)sample.SteerTiltPst_Req() <<", ";
        o << "SteerTelePst_Req: " << (int)sample.SteerTelePst_Req() <<", ";
        o << "LExMirUDPst_Req: " << (int)sample.LExMirUDPst_Req() <<", ";
        o << "LExMirLRPst_Req: " << (int)sample.LExMirLRPst_Req() <<", ";
        o << "RExMirUDPst_Req: " << (int)sample.RExMirUDPst_Req() <<", ";
        o << "RExMirLRPst_Req: " << (int)sample.RExMirLRPst_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdPst_Ctrl_SOA_struct: 

    BdPst_Ctrl_SOA_struct::BdPst_Ctrl_SOA_struct() :
        m_BdPst_Ctrl_SOA_u8_ (0)  {
    }   

    BdPst_Ctrl_SOA_struct::BdPst_Ctrl_SOA_struct (
        uint8_t BdPst_Ctrl_SOA_u8)
        :
            m_BdPst_Ctrl_SOA_u8_( BdPst_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_Ctrl_SOA_struct::BdPst_Ctrl_SOA_struct(BdPst_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_BdPst_Ctrl_SOA_u8_ (std::move(other_.m_BdPst_Ctrl_SOA_u8_))
    {
    } 

    BdPst_Ctrl_SOA_struct& BdPst_Ctrl_SOA_struct::operator=(BdPst_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        BdPst_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdPst_Ctrl_SOA_struct::swap(BdPst_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_BdPst_Ctrl_SOA_u8_, other_.m_BdPst_Ctrl_SOA_u8_);
    }  

    bool BdPst_Ctrl_SOA_struct::operator == (const BdPst_Ctrl_SOA_struct& other_) const {
        if (m_BdPst_Ctrl_SOA_u8_ != other_.m_BdPst_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool BdPst_Ctrl_SOA_struct::operator != (const BdPst_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "BdPst_Ctrl_SOA_u8: " << (int)sample.BdPst_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- BdPst_St_Get_struct: 

    BdPst_St_Get_struct::BdPst_St_Get_struct() :
        m_BdPstBit_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdPst_St_Get_struct::BdPst_St_Get_struct (
        uint16_t BdPstBit,
        const std::string& CtrlSource)
        :
            m_BdPstBit_( BdPstBit ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_St_Get_struct::BdPst_St_Get_struct(BdPst_St_Get_struct&& other_) OMG_NOEXCEPT  :m_BdPstBit_ (std::move(other_.m_BdPstBit_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdPst_St_Get_struct& BdPst_St_Get_struct::operator=(BdPst_St_Get_struct&&  other_) OMG_NOEXCEPT {
        BdPst_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdPst_St_Get_struct::swap(BdPst_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_BdPstBit_, other_.m_BdPstBit_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdPst_St_Get_struct::operator == (const BdPst_St_Get_struct& other_) const {
        if (m_BdPstBit_ != other_.m_BdPstBit_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdPst_St_Get_struct::operator != (const BdPst_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "BdPstBit: " << sample.BdPstBit()<<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- FLMemPstExportRsp_struct: 

    FLMemPstExportRsp_struct::FLMemPstExportRsp_struct() :
        m_FLSeatExportPst_ (0) ,
        m_FLMemPstExportSt_Rsp_ (0) ,
        m_FLMemPstExportMvSt_Rsp_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    FLMemPstExportRsp_struct::FLMemPstExportRsp_struct (
        uint8_t FLSeatExportPst,
        uint8_t FLMemPstExportSt_Rsp,
        uint8_t FLMemPstExportMvSt_Rsp,
        const std::string& CtrlSource)
        :
            m_FLSeatExportPst_( FLSeatExportPst ),
            m_FLMemPstExportSt_Rsp_( FLMemPstExportSt_Rsp ),
            m_FLMemPstExportMvSt_Rsp_( FLMemPstExportMvSt_Rsp ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    FLMemPstExportRsp_struct::FLMemPstExportRsp_struct(FLMemPstExportRsp_struct&& other_) OMG_NOEXCEPT  :m_FLSeatExportPst_ (std::move(other_.m_FLSeatExportPst_))
    ,
    m_FLMemPstExportSt_Rsp_ (std::move(other_.m_FLMemPstExportSt_Rsp_))
    ,
    m_FLMemPstExportMvSt_Rsp_ (std::move(other_.m_FLMemPstExportMvSt_Rsp_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    FLMemPstExportRsp_struct& FLMemPstExportRsp_struct::operator=(FLMemPstExportRsp_struct&&  other_) OMG_NOEXCEPT {
        FLMemPstExportRsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void FLMemPstExportRsp_struct::swap(FLMemPstExportRsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatExportPst_, other_.m_FLSeatExportPst_);
        swap(m_FLMemPstExportSt_Rsp_, other_.m_FLMemPstExportSt_Rsp_);
        swap(m_FLMemPstExportMvSt_Rsp_, other_.m_FLMemPstExportMvSt_Rsp_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool FLMemPstExportRsp_struct::operator == (const FLMemPstExportRsp_struct& other_) const {
        if (m_FLSeatExportPst_ != other_.m_FLSeatExportPst_) {
            return false;
        }
        if (m_FLMemPstExportSt_Rsp_ != other_.m_FLMemPstExportSt_Rsp_) {
            return false;
        }
        if (m_FLMemPstExportMvSt_Rsp_ != other_.m_FLMemPstExportMvSt_Rsp_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool FLMemPstExportRsp_struct::operator != (const FLMemPstExportRsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const FLMemPstExportRsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatExportPst: " << (int)sample.FLSeatExportPst() <<", ";
        o << "FLMemPstExportSt_Rsp: " << (int)sample.FLMemPstExportSt_Rsp() <<", ";
        o << "FLMemPstExportMvSt_Rsp: " << (int)sample.FLMemPstExportMvSt_Rsp() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- FRMemPstExportRsp_struct: 

    FRMemPstExportRsp_struct::FRMemPstExportRsp_struct() :
        m_FRSeatExportPst_ (0) ,
        m_FRMemPstExportSt_Rsp_ (0) ,
        m_FRMemPstExportMvSt_Rsp_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    FRMemPstExportRsp_struct::FRMemPstExportRsp_struct (
        uint8_t FRSeatExportPst,
        uint8_t FRMemPstExportSt_Rsp,
        uint8_t FRMemPstExportMvSt_Rsp,
        const std::string& CtrlSource)
        :
            m_FRSeatExportPst_( FRSeatExportPst ),
            m_FRMemPstExportSt_Rsp_( FRMemPstExportSt_Rsp ),
            m_FRMemPstExportMvSt_Rsp_( FRMemPstExportMvSt_Rsp ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    FRMemPstExportRsp_struct::FRMemPstExportRsp_struct(FRMemPstExportRsp_struct&& other_) OMG_NOEXCEPT  :m_FRSeatExportPst_ (std::move(other_.m_FRSeatExportPst_))
    ,
    m_FRMemPstExportSt_Rsp_ (std::move(other_.m_FRMemPstExportSt_Rsp_))
    ,
    m_FRMemPstExportMvSt_Rsp_ (std::move(other_.m_FRMemPstExportMvSt_Rsp_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    FRMemPstExportRsp_struct& FRMemPstExportRsp_struct::operator=(FRMemPstExportRsp_struct&&  other_) OMG_NOEXCEPT {
        FRMemPstExportRsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void FRMemPstExportRsp_struct::swap(FRMemPstExportRsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FRSeatExportPst_, other_.m_FRSeatExportPst_);
        swap(m_FRMemPstExportSt_Rsp_, other_.m_FRMemPstExportSt_Rsp_);
        swap(m_FRMemPstExportMvSt_Rsp_, other_.m_FRMemPstExportMvSt_Rsp_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool FRMemPstExportRsp_struct::operator == (const FRMemPstExportRsp_struct& other_) const {
        if (m_FRSeatExportPst_ != other_.m_FRSeatExportPst_) {
            return false;
        }
        if (m_FRMemPstExportSt_Rsp_ != other_.m_FRMemPstExportSt_Rsp_) {
            return false;
        }
        if (m_FRMemPstExportMvSt_Rsp_ != other_.m_FRMemPstExportMvSt_Rsp_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool FRMemPstExportRsp_struct::operator != (const FRMemPstExportRsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const FRMemPstExportRsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FRSeatExportPst: " << (int)sample.FRSeatExportPst() <<", ";
        o << "FRMemPstExportSt_Rsp: " << (int)sample.FRMemPstExportSt_Rsp() <<", ";
        o << "FRMemPstExportMvSt_Rsp: " << (int)sample.FRMemPstExportMvSt_Rsp() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdPst_St_struct: 

    BdPst_St_struct::BdPst_St_struct() :
        m_ExMirCtrl_St_ (0) ,
        m_LExMirUDMv_St_ (0) ,
        m_LExMirLRMv_St_ (0) ,
        m_RExMirUDMv_St_ (0) ,
        m_RExMirLRMv_St_ (0) ,
        m_SteerTiltMv_St_ (0) ,
        m_SteerTeleMv_St_ (0) ,
        m_LExMirCtrlMv_St_ (0) ,
        m_RExMirCtrlMv_St_ (0) ,
        m_SteerLongStrokeSt_Rsp_ (0) ,
        m_SteerLongStrokeMoveSt_Rsp_ (0) ,
        m_SteerLongStrokeStpRsn_Rsp_ (0) ,
        m_FLSeatPstMemWin_Req_ (0) ,
        m_FRSeatPstMemWin_Req_ (0) ,
        m_SteerTiltPst_Rsp_ (0) ,
        m_SteerTelePst_Rsp_ (0) ,
        m_LExMirUDPst_Rsp_ (0) ,
        m_LExMirLRPst_Rsp_ (0) ,
        m_RExMirUDPst_Rsp_ (0) ,
        m_RExMirLRPst_Rsp_ (0)  {
    }   

    BdPst_St_struct::BdPst_St_struct (
        bool ExMirCtrl_St,
        uint8_t LExMirUDMv_St,
        uint8_t LExMirLRMv_St,
        uint8_t RExMirUDMv_St,
        uint8_t RExMirLRMv_St,
        uint8_t SteerTiltMv_St,
        uint8_t SteerTeleMv_St,
        uint8_t LExMirCtrlMv_St,
        uint8_t RExMirCtrlMv_St,
        uint8_t SteerLongStrokeSt_Rsp,
        uint8_t SteerLongStrokeMoveSt_Rsp,
        uint8_t SteerLongStrokeStpRsn_Rsp,
        uint8_t FLSeatPstMemWin_Req,
        uint8_t FRSeatPstMemWin_Req,
        uint8_t SteerTiltPst_Rsp,
        uint8_t SteerTelePst_Rsp,
        uint8_t LExMirUDPst_Rsp,
        uint8_t LExMirLRPst_Rsp,
        uint8_t RExMirUDPst_Rsp,
        uint8_t RExMirLRPst_Rsp,
        const ::dds::core::array< BodyDomain::FLMemPstExportRsp_struct, 5L>& FLMemPstExportRsp,
        const ::dds::core::array< BodyDomain::FRMemPstExportRsp_struct, 4L>& FRMemPstExportRsp)
        :
            m_ExMirCtrl_St_( ExMirCtrl_St ),
            m_LExMirUDMv_St_( LExMirUDMv_St ),
            m_LExMirLRMv_St_( LExMirLRMv_St ),
            m_RExMirUDMv_St_( RExMirUDMv_St ),
            m_RExMirLRMv_St_( RExMirLRMv_St ),
            m_SteerTiltMv_St_( SteerTiltMv_St ),
            m_SteerTeleMv_St_( SteerTeleMv_St ),
            m_LExMirCtrlMv_St_( LExMirCtrlMv_St ),
            m_RExMirCtrlMv_St_( RExMirCtrlMv_St ),
            m_SteerLongStrokeSt_Rsp_( SteerLongStrokeSt_Rsp ),
            m_SteerLongStrokeMoveSt_Rsp_( SteerLongStrokeMoveSt_Rsp ),
            m_SteerLongStrokeStpRsn_Rsp_( SteerLongStrokeStpRsn_Rsp ),
            m_FLSeatPstMemWin_Req_( FLSeatPstMemWin_Req ),
            m_FRSeatPstMemWin_Req_( FRSeatPstMemWin_Req ),
            m_SteerTiltPst_Rsp_( SteerTiltPst_Rsp ),
            m_SteerTelePst_Rsp_( SteerTelePst_Rsp ),
            m_LExMirUDPst_Rsp_( LExMirUDPst_Rsp ),
            m_LExMirLRPst_Rsp_( LExMirLRPst_Rsp ),
            m_RExMirUDPst_Rsp_( RExMirUDPst_Rsp ),
            m_RExMirLRPst_Rsp_( RExMirLRPst_Rsp ),
            m_FLMemPstExportRsp_( FLMemPstExportRsp ),
            m_FRMemPstExportRsp_( FRMemPstExportRsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_St_struct::BdPst_St_struct(BdPst_St_struct&& other_) OMG_NOEXCEPT  :m_ExMirCtrl_St_ (std::move(other_.m_ExMirCtrl_St_))
    ,
    m_LExMirUDMv_St_ (std::move(other_.m_LExMirUDMv_St_))
    ,
    m_LExMirLRMv_St_ (std::move(other_.m_LExMirLRMv_St_))
    ,
    m_RExMirUDMv_St_ (std::move(other_.m_RExMirUDMv_St_))
    ,
    m_RExMirLRMv_St_ (std::move(other_.m_RExMirLRMv_St_))
    ,
    m_SteerTiltMv_St_ (std::move(other_.m_SteerTiltMv_St_))
    ,
    m_SteerTeleMv_St_ (std::move(other_.m_SteerTeleMv_St_))
    ,
    m_LExMirCtrlMv_St_ (std::move(other_.m_LExMirCtrlMv_St_))
    ,
    m_RExMirCtrlMv_St_ (std::move(other_.m_RExMirCtrlMv_St_))
    ,
    m_SteerLongStrokeSt_Rsp_ (std::move(other_.m_SteerLongStrokeSt_Rsp_))
    ,
    m_SteerLongStrokeMoveSt_Rsp_ (std::move(other_.m_SteerLongStrokeMoveSt_Rsp_))
    ,
    m_SteerLongStrokeStpRsn_Rsp_ (std::move(other_.m_SteerLongStrokeStpRsn_Rsp_))
    ,
    m_FLSeatPstMemWin_Req_ (std::move(other_.m_FLSeatPstMemWin_Req_))
    ,
    m_FRSeatPstMemWin_Req_ (std::move(other_.m_FRSeatPstMemWin_Req_))
    ,
    m_SteerTiltPst_Rsp_ (std::move(other_.m_SteerTiltPst_Rsp_))
    ,
    m_SteerTelePst_Rsp_ (std::move(other_.m_SteerTelePst_Rsp_))
    ,
    m_LExMirUDPst_Rsp_ (std::move(other_.m_LExMirUDPst_Rsp_))
    ,
    m_LExMirLRPst_Rsp_ (std::move(other_.m_LExMirLRPst_Rsp_))
    ,
    m_RExMirUDPst_Rsp_ (std::move(other_.m_RExMirUDPst_Rsp_))
    ,
    m_RExMirLRPst_Rsp_ (std::move(other_.m_RExMirLRPst_Rsp_))
    ,
    m_FLMemPstExportRsp_ (std::move(other_.m_FLMemPstExportRsp_))
    ,
    m_FRMemPstExportRsp_ (std::move(other_.m_FRMemPstExportRsp_))
    {
    } 

    BdPst_St_struct& BdPst_St_struct::operator=(BdPst_St_struct&&  other_) OMG_NOEXCEPT {
        BdPst_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdPst_St_struct::swap(BdPst_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ExMirCtrl_St_, other_.m_ExMirCtrl_St_);
        swap(m_LExMirUDMv_St_, other_.m_LExMirUDMv_St_);
        swap(m_LExMirLRMv_St_, other_.m_LExMirLRMv_St_);
        swap(m_RExMirUDMv_St_, other_.m_RExMirUDMv_St_);
        swap(m_RExMirLRMv_St_, other_.m_RExMirLRMv_St_);
        swap(m_SteerTiltMv_St_, other_.m_SteerTiltMv_St_);
        swap(m_SteerTeleMv_St_, other_.m_SteerTeleMv_St_);
        swap(m_LExMirCtrlMv_St_, other_.m_LExMirCtrlMv_St_);
        swap(m_RExMirCtrlMv_St_, other_.m_RExMirCtrlMv_St_);
        swap(m_SteerLongStrokeSt_Rsp_, other_.m_SteerLongStrokeSt_Rsp_);
        swap(m_SteerLongStrokeMoveSt_Rsp_, other_.m_SteerLongStrokeMoveSt_Rsp_);
        swap(m_SteerLongStrokeStpRsn_Rsp_, other_.m_SteerLongStrokeStpRsn_Rsp_);
        swap(m_FLSeatPstMemWin_Req_, other_.m_FLSeatPstMemWin_Req_);
        swap(m_FRSeatPstMemWin_Req_, other_.m_FRSeatPstMemWin_Req_);
        swap(m_SteerTiltPst_Rsp_, other_.m_SteerTiltPst_Rsp_);
        swap(m_SteerTelePst_Rsp_, other_.m_SteerTelePst_Rsp_);
        swap(m_LExMirUDPst_Rsp_, other_.m_LExMirUDPst_Rsp_);
        swap(m_LExMirLRPst_Rsp_, other_.m_LExMirLRPst_Rsp_);
        swap(m_RExMirUDPst_Rsp_, other_.m_RExMirUDPst_Rsp_);
        swap(m_RExMirLRPst_Rsp_, other_.m_RExMirLRPst_Rsp_);
        swap(m_FLMemPstExportRsp_, other_.m_FLMemPstExportRsp_);
        swap(m_FRMemPstExportRsp_, other_.m_FRMemPstExportRsp_);
    }  

    bool BdPst_St_struct::operator == (const BdPst_St_struct& other_) const {
        if (m_ExMirCtrl_St_ != other_.m_ExMirCtrl_St_) {
            return false;
        }
        if (m_LExMirUDMv_St_ != other_.m_LExMirUDMv_St_) {
            return false;
        }
        if (m_LExMirLRMv_St_ != other_.m_LExMirLRMv_St_) {
            return false;
        }
        if (m_RExMirUDMv_St_ != other_.m_RExMirUDMv_St_) {
            return false;
        }
        if (m_RExMirLRMv_St_ != other_.m_RExMirLRMv_St_) {
            return false;
        }
        if (m_SteerTiltMv_St_ != other_.m_SteerTiltMv_St_) {
            return false;
        }
        if (m_SteerTeleMv_St_ != other_.m_SteerTeleMv_St_) {
            return false;
        }
        if (m_LExMirCtrlMv_St_ != other_.m_LExMirCtrlMv_St_) {
            return false;
        }
        if (m_RExMirCtrlMv_St_ != other_.m_RExMirCtrlMv_St_) {
            return false;
        }
        if (m_SteerLongStrokeSt_Rsp_ != other_.m_SteerLongStrokeSt_Rsp_) {
            return false;
        }
        if (m_SteerLongStrokeMoveSt_Rsp_ != other_.m_SteerLongStrokeMoveSt_Rsp_) {
            return false;
        }
        if (m_SteerLongStrokeStpRsn_Rsp_ != other_.m_SteerLongStrokeStpRsn_Rsp_) {
            return false;
        }
        if (m_FLSeatPstMemWin_Req_ != other_.m_FLSeatPstMemWin_Req_) {
            return false;
        }
        if (m_FRSeatPstMemWin_Req_ != other_.m_FRSeatPstMemWin_Req_) {
            return false;
        }
        if (m_SteerTiltPst_Rsp_ != other_.m_SteerTiltPst_Rsp_) {
            return false;
        }
        if (m_SteerTelePst_Rsp_ != other_.m_SteerTelePst_Rsp_) {
            return false;
        }
        if (m_LExMirUDPst_Rsp_ != other_.m_LExMirUDPst_Rsp_) {
            return false;
        }
        if (m_LExMirLRPst_Rsp_ != other_.m_LExMirLRPst_Rsp_) {
            return false;
        }
        if (m_RExMirUDPst_Rsp_ != other_.m_RExMirUDPst_Rsp_) {
            return false;
        }
        if (m_RExMirLRPst_Rsp_ != other_.m_RExMirLRPst_Rsp_) {
            return false;
        }
        if (m_FLMemPstExportRsp_ != other_.m_FLMemPstExportRsp_) {
            return false;
        }
        if (m_FRMemPstExportRsp_ != other_.m_FRMemPstExportRsp_) {
            return false;
        }
        return true;
    }
    bool BdPst_St_struct::operator != (const BdPst_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ExMirCtrl_St: " << sample.ExMirCtrl_St()<<", ";
        o << "LExMirUDMv_St: " << (int)sample.LExMirUDMv_St() <<", ";
        o << "LExMirLRMv_St: " << (int)sample.LExMirLRMv_St() <<", ";
        o << "RExMirUDMv_St: " << (int)sample.RExMirUDMv_St() <<", ";
        o << "RExMirLRMv_St: " << (int)sample.RExMirLRMv_St() <<", ";
        o << "SteerTiltMv_St: " << (int)sample.SteerTiltMv_St() <<", ";
        o << "SteerTeleMv_St: " << (int)sample.SteerTeleMv_St() <<", ";
        o << "LExMirCtrlMv_St: " << (int)sample.LExMirCtrlMv_St() <<", ";
        o << "RExMirCtrlMv_St: " << (int)sample.RExMirCtrlMv_St() <<", ";
        o << "SteerLongStrokeSt_Rsp: " << (int)sample.SteerLongStrokeSt_Rsp() <<", ";
        o << "SteerLongStrokeMoveSt_Rsp: " << (int)sample.SteerLongStrokeMoveSt_Rsp() <<", ";
        o << "SteerLongStrokeStpRsn_Rsp: " << (int)sample.SteerLongStrokeStpRsn_Rsp() <<", ";
        o << "FLSeatPstMemWin_Req: " << (int)sample.FLSeatPstMemWin_Req() <<", ";
        o << "FRSeatPstMemWin_Req: " << (int)sample.FRSeatPstMemWin_Req() <<", ";
        o << "SteerTiltPst_Rsp: " << (int)sample.SteerTiltPst_Rsp() <<", ";
        o << "SteerTelePst_Rsp: " << (int)sample.SteerTelePst_Rsp() <<", ";
        o << "LExMirUDPst_Rsp: " << (int)sample.LExMirUDPst_Rsp() <<", ";
        o << "LExMirLRPst_Rsp: " << (int)sample.LExMirLRPst_Rsp() <<", ";
        o << "RExMirUDPst_Rsp: " << (int)sample.RExMirUDPst_Rsp() <<", ";
        o << "RExMirLRPst_Rsp: " << (int)sample.RExMirLRPst_Rsp() <<", ";
        o << "FLMemPstExportRsp: " << sample.FLMemPstExportRsp()<<", ";
        o << "FRMemPstExportRsp: " << sample.FRMemPstExportRsp() ;
        o <<"]";
        return o;
    }

    // ---- FLSeatMemPst_Req_struct: 

    FLSeatMemPst_Req_struct::FLSeatMemPst_Req_struct() :
        m_FLSeatMemPstPurpose_Req_ (0) ,
        m_FLSeatMemFBPst_Req_ (0) ,
        m_FLSeatMemBackrestPst_Req_ (0) ,
        m_FLSeatMemHgtPst_Req_ (0) ,
        m_FLSeatMemCshnAngPst_Req_ (0) ,
        m_FLMemLegAngCshnExtPst_Req_ (0) ,
        m_FLSeatMemLegLengthPst_Req_ (0)  {
    }   

    FLSeatMemPst_Req_struct::FLSeatMemPst_Req_struct (
        uint8_t FLSeatMemPstPurpose_Req,
        uint8_t FLSeatMemFBPst_Req,
        uint8_t FLSeatMemBackrestPst_Req,
        uint8_t FLSeatMemHgtPst_Req,
        uint8_t FLSeatMemCshnAngPst_Req,
        uint8_t FLMemLegAngCshnExtPst_Req,
        uint8_t FLSeatMemLegLengthPst_Req)
        :
            m_FLSeatMemPstPurpose_Req_( FLSeatMemPstPurpose_Req ),
            m_FLSeatMemFBPst_Req_( FLSeatMemFBPst_Req ),
            m_FLSeatMemBackrestPst_Req_( FLSeatMemBackrestPst_Req ),
            m_FLSeatMemHgtPst_Req_( FLSeatMemHgtPst_Req ),
            m_FLSeatMemCshnAngPst_Req_( FLSeatMemCshnAngPst_Req ),
            m_FLMemLegAngCshnExtPst_Req_( FLMemLegAngCshnExtPst_Req ),
            m_FLSeatMemLegLengthPst_Req_( FLSeatMemLegLengthPst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    FLSeatMemPst_Req_struct::FLSeatMemPst_Req_struct(FLSeatMemPst_Req_struct&& other_) OMG_NOEXCEPT  :m_FLSeatMemPstPurpose_Req_ (std::move(other_.m_FLSeatMemPstPurpose_Req_))
    ,
    m_FLSeatMemFBPst_Req_ (std::move(other_.m_FLSeatMemFBPst_Req_))
    ,
    m_FLSeatMemBackrestPst_Req_ (std::move(other_.m_FLSeatMemBackrestPst_Req_))
    ,
    m_FLSeatMemHgtPst_Req_ (std::move(other_.m_FLSeatMemHgtPst_Req_))
    ,
    m_FLSeatMemCshnAngPst_Req_ (std::move(other_.m_FLSeatMemCshnAngPst_Req_))
    ,
    m_FLMemLegAngCshnExtPst_Req_ (std::move(other_.m_FLMemLegAngCshnExtPst_Req_))
    ,
    m_FLSeatMemLegLengthPst_Req_ (std::move(other_.m_FLSeatMemLegLengthPst_Req_))
    {
    } 

    FLSeatMemPst_Req_struct& FLSeatMemPst_Req_struct::operator=(FLSeatMemPst_Req_struct&&  other_) OMG_NOEXCEPT {
        FLSeatMemPst_Req_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void FLSeatMemPst_Req_struct::swap(FLSeatMemPst_Req_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatMemPstPurpose_Req_, other_.m_FLSeatMemPstPurpose_Req_);
        swap(m_FLSeatMemFBPst_Req_, other_.m_FLSeatMemFBPst_Req_);
        swap(m_FLSeatMemBackrestPst_Req_, other_.m_FLSeatMemBackrestPst_Req_);
        swap(m_FLSeatMemHgtPst_Req_, other_.m_FLSeatMemHgtPst_Req_);
        swap(m_FLSeatMemCshnAngPst_Req_, other_.m_FLSeatMemCshnAngPst_Req_);
        swap(m_FLMemLegAngCshnExtPst_Req_, other_.m_FLMemLegAngCshnExtPst_Req_);
        swap(m_FLSeatMemLegLengthPst_Req_, other_.m_FLSeatMemLegLengthPst_Req_);
    }  

    bool FLSeatMemPst_Req_struct::operator == (const FLSeatMemPst_Req_struct& other_) const {
        if (m_FLSeatMemPstPurpose_Req_ != other_.m_FLSeatMemPstPurpose_Req_) {
            return false;
        }
        if (m_FLSeatMemFBPst_Req_ != other_.m_FLSeatMemFBPst_Req_) {
            return false;
        }
        if (m_FLSeatMemBackrestPst_Req_ != other_.m_FLSeatMemBackrestPst_Req_) {
            return false;
        }
        if (m_FLSeatMemHgtPst_Req_ != other_.m_FLSeatMemHgtPst_Req_) {
            return false;
        }
        if (m_FLSeatMemCshnAngPst_Req_ != other_.m_FLSeatMemCshnAngPst_Req_) {
            return false;
        }
        if (m_FLMemLegAngCshnExtPst_Req_ != other_.m_FLMemLegAngCshnExtPst_Req_) {
            return false;
        }
        if (m_FLSeatMemLegLengthPst_Req_ != other_.m_FLSeatMemLegLengthPst_Req_) {
            return false;
        }
        return true;
    }
    bool FLSeatMemPst_Req_struct::operator != (const FLSeatMemPst_Req_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const FLSeatMemPst_Req_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatMemPstPurpose_Req: " << (int)sample.FLSeatMemPstPurpose_Req() <<", ";
        o << "FLSeatMemFBPst_Req: " << (int)sample.FLSeatMemFBPst_Req() <<", ";
        o << "FLSeatMemBackrestPst_Req: " << (int)sample.FLSeatMemBackrestPst_Req() <<", ";
        o << "FLSeatMemHgtPst_Req: " << (int)sample.FLSeatMemHgtPst_Req() <<", ";
        o << "FLSeatMemCshnAngPst_Req: " << (int)sample.FLSeatMemCshnAngPst_Req() <<", ";
        o << "FLMemLegAngCshnExtPst_Req: " << (int)sample.FLMemLegAngCshnExtPst_Req() <<", ";
        o << "FLSeatMemLegLengthPst_Req: " << (int)sample.FLSeatMemLegLengthPst_Req()  ;
        o <<"]";
        return o;
    }

    // ---- FRSeatMemPst_Req_struct: 

    FRSeatMemPst_Req_struct::FRSeatMemPst_Req_struct() :
        m_FRSeatPstPurpose_Req_ (0) ,
        m_FRSeatMemFBPst_Req_ (0) ,
        m_FRSeatMemBackrestPst_Req_ (0) ,
        m_FRSeatMemHgtPst_Req_ (0) ,
        m_FRSeatMemCshnAngPst_Req_ (0) ,
        m_FRSeatMemLegAngCshnExtPst_Req_ (0) ,
        m_FRSeatMemLegLengthPst_Req_ (0)  {
    }   

    FRSeatMemPst_Req_struct::FRSeatMemPst_Req_struct (
        uint8_t FRSeatPstPurpose_Req,
        uint8_t FRSeatMemFBPst_Req,
        uint8_t FRSeatMemBackrestPst_Req,
        uint8_t FRSeatMemHgtPst_Req,
        uint8_t FRSeatMemCshnAngPst_Req,
        uint8_t FRSeatMemLegAngCshnExtPst_Req,
        uint8_t FRSeatMemLegLengthPst_Req)
        :
            m_FRSeatPstPurpose_Req_( FRSeatPstPurpose_Req ),
            m_FRSeatMemFBPst_Req_( FRSeatMemFBPst_Req ),
            m_FRSeatMemBackrestPst_Req_( FRSeatMemBackrestPst_Req ),
            m_FRSeatMemHgtPst_Req_( FRSeatMemHgtPst_Req ),
            m_FRSeatMemCshnAngPst_Req_( FRSeatMemCshnAngPst_Req ),
            m_FRSeatMemLegAngCshnExtPst_Req_( FRSeatMemLegAngCshnExtPst_Req ),
            m_FRSeatMemLegLengthPst_Req_( FRSeatMemLegLengthPst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    FRSeatMemPst_Req_struct::FRSeatMemPst_Req_struct(FRSeatMemPst_Req_struct&& other_) OMG_NOEXCEPT  :m_FRSeatPstPurpose_Req_ (std::move(other_.m_FRSeatPstPurpose_Req_))
    ,
    m_FRSeatMemFBPst_Req_ (std::move(other_.m_FRSeatMemFBPst_Req_))
    ,
    m_FRSeatMemBackrestPst_Req_ (std::move(other_.m_FRSeatMemBackrestPst_Req_))
    ,
    m_FRSeatMemHgtPst_Req_ (std::move(other_.m_FRSeatMemHgtPst_Req_))
    ,
    m_FRSeatMemCshnAngPst_Req_ (std::move(other_.m_FRSeatMemCshnAngPst_Req_))
    ,
    m_FRSeatMemLegAngCshnExtPst_Req_ (std::move(other_.m_FRSeatMemLegAngCshnExtPst_Req_))
    ,
    m_FRSeatMemLegLengthPst_Req_ (std::move(other_.m_FRSeatMemLegLengthPst_Req_))
    {
    } 

    FRSeatMemPst_Req_struct& FRSeatMemPst_Req_struct::operator=(FRSeatMemPst_Req_struct&&  other_) OMG_NOEXCEPT {
        FRSeatMemPst_Req_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void FRSeatMemPst_Req_struct::swap(FRSeatMemPst_Req_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FRSeatPstPurpose_Req_, other_.m_FRSeatPstPurpose_Req_);
        swap(m_FRSeatMemFBPst_Req_, other_.m_FRSeatMemFBPst_Req_);
        swap(m_FRSeatMemBackrestPst_Req_, other_.m_FRSeatMemBackrestPst_Req_);
        swap(m_FRSeatMemHgtPst_Req_, other_.m_FRSeatMemHgtPst_Req_);
        swap(m_FRSeatMemCshnAngPst_Req_, other_.m_FRSeatMemCshnAngPst_Req_);
        swap(m_FRSeatMemLegAngCshnExtPst_Req_, other_.m_FRSeatMemLegAngCshnExtPst_Req_);
        swap(m_FRSeatMemLegLengthPst_Req_, other_.m_FRSeatMemLegLengthPst_Req_);
    }  

    bool FRSeatMemPst_Req_struct::operator == (const FRSeatMemPst_Req_struct& other_) const {
        if (m_FRSeatPstPurpose_Req_ != other_.m_FRSeatPstPurpose_Req_) {
            return false;
        }
        if (m_FRSeatMemFBPst_Req_ != other_.m_FRSeatMemFBPst_Req_) {
            return false;
        }
        if (m_FRSeatMemBackrestPst_Req_ != other_.m_FRSeatMemBackrestPst_Req_) {
            return false;
        }
        if (m_FRSeatMemHgtPst_Req_ != other_.m_FRSeatMemHgtPst_Req_) {
            return false;
        }
        if (m_FRSeatMemCshnAngPst_Req_ != other_.m_FRSeatMemCshnAngPst_Req_) {
            return false;
        }
        if (m_FRSeatMemLegAngCshnExtPst_Req_ != other_.m_FRSeatMemLegAngCshnExtPst_Req_) {
            return false;
        }
        if (m_FRSeatMemLegLengthPst_Req_ != other_.m_FRSeatMemLegLengthPst_Req_) {
            return false;
        }
        return true;
    }
    bool FRSeatMemPst_Req_struct::operator != (const FRSeatMemPst_Req_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const FRSeatMemPst_Req_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FRSeatPstPurpose_Req: " << (int)sample.FRSeatPstPurpose_Req() <<", ";
        o << "FRSeatMemFBPst_Req: " << (int)sample.FRSeatMemFBPst_Req() <<", ";
        o << "FRSeatMemBackrestPst_Req: " << (int)sample.FRSeatMemBackrestPst_Req() <<", ";
        o << "FRSeatMemHgtPst_Req: " << (int)sample.FRSeatMemHgtPst_Req() <<", ";
        o << "FRSeatMemCshnAngPst_Req: " << (int)sample.FRSeatMemCshnAngPst_Req() <<", ";
        o << "FRSeatMemLegAngCshnExtPst_Req: " << (int)sample.FRSeatMemLegAngCshnExtPst_Req() <<", ";
        o << "FRSeatMemLegLengthPst_Req: " << (int)sample.FRSeatMemLegLengthPst_Req()  ;
        o <<"]";
        return o;
    }

    // ---- SRLSeatMemPst_Req_struct: 

    SRLSeatMemPst_Req_struct::SRLSeatMemPst_Req_struct() :
        m_SRLSeatMemPstPurpose_Req_ (0) ,
        m_SRLSeatMemFBPst_Req_ (0) ,
        m_SRLSeatMemBackrestPst_Req_ (0) ,
        m_SRLSeatMemHgtPst_Req_ (0) ,
        m_SRLSeatMemCshnAngPst_Req_ (0) ,
        m_SRLSeatMemLegAngCshnExtPst_Req_ (0)  {
    }   

    SRLSeatMemPst_Req_struct::SRLSeatMemPst_Req_struct (
        uint8_t SRLSeatMemPstPurpose_Req,
        uint8_t SRLSeatMemFBPst_Req,
        uint8_t SRLSeatMemBackrestPst_Req,
        uint8_t SRLSeatMemHgtPst_Req,
        uint8_t SRLSeatMemCshnAngPst_Req,
        uint8_t SRLSeatMemLegAngCshnExtPst_Req)
        :
            m_SRLSeatMemPstPurpose_Req_( SRLSeatMemPstPurpose_Req ),
            m_SRLSeatMemFBPst_Req_( SRLSeatMemFBPst_Req ),
            m_SRLSeatMemBackrestPst_Req_( SRLSeatMemBackrestPst_Req ),
            m_SRLSeatMemHgtPst_Req_( SRLSeatMemHgtPst_Req ),
            m_SRLSeatMemCshnAngPst_Req_( SRLSeatMemCshnAngPst_Req ),
            m_SRLSeatMemLegAngCshnExtPst_Req_( SRLSeatMemLegAngCshnExtPst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SRLSeatMemPst_Req_struct::SRLSeatMemPst_Req_struct(SRLSeatMemPst_Req_struct&& other_) OMG_NOEXCEPT  :m_SRLSeatMemPstPurpose_Req_ (std::move(other_.m_SRLSeatMemPstPurpose_Req_))
    ,
    m_SRLSeatMemFBPst_Req_ (std::move(other_.m_SRLSeatMemFBPst_Req_))
    ,
    m_SRLSeatMemBackrestPst_Req_ (std::move(other_.m_SRLSeatMemBackrestPst_Req_))
    ,
    m_SRLSeatMemHgtPst_Req_ (std::move(other_.m_SRLSeatMemHgtPst_Req_))
    ,
    m_SRLSeatMemCshnAngPst_Req_ (std::move(other_.m_SRLSeatMemCshnAngPst_Req_))
    ,
    m_SRLSeatMemLegAngCshnExtPst_Req_ (std::move(other_.m_SRLSeatMemLegAngCshnExtPst_Req_))
    {
    } 

    SRLSeatMemPst_Req_struct& SRLSeatMemPst_Req_struct::operator=(SRLSeatMemPst_Req_struct&&  other_) OMG_NOEXCEPT {
        SRLSeatMemPst_Req_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SRLSeatMemPst_Req_struct::swap(SRLSeatMemPst_Req_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SRLSeatMemPstPurpose_Req_, other_.m_SRLSeatMemPstPurpose_Req_);
        swap(m_SRLSeatMemFBPst_Req_, other_.m_SRLSeatMemFBPst_Req_);
        swap(m_SRLSeatMemBackrestPst_Req_, other_.m_SRLSeatMemBackrestPst_Req_);
        swap(m_SRLSeatMemHgtPst_Req_, other_.m_SRLSeatMemHgtPst_Req_);
        swap(m_SRLSeatMemCshnAngPst_Req_, other_.m_SRLSeatMemCshnAngPst_Req_);
        swap(m_SRLSeatMemLegAngCshnExtPst_Req_, other_.m_SRLSeatMemLegAngCshnExtPst_Req_);
    }  

    bool SRLSeatMemPst_Req_struct::operator == (const SRLSeatMemPst_Req_struct& other_) const {
        if (m_SRLSeatMemPstPurpose_Req_ != other_.m_SRLSeatMemPstPurpose_Req_) {
            return false;
        }
        if (m_SRLSeatMemFBPst_Req_ != other_.m_SRLSeatMemFBPst_Req_) {
            return false;
        }
        if (m_SRLSeatMemBackrestPst_Req_ != other_.m_SRLSeatMemBackrestPst_Req_) {
            return false;
        }
        if (m_SRLSeatMemHgtPst_Req_ != other_.m_SRLSeatMemHgtPst_Req_) {
            return false;
        }
        if (m_SRLSeatMemCshnAngPst_Req_ != other_.m_SRLSeatMemCshnAngPst_Req_) {
            return false;
        }
        if (m_SRLSeatMemLegAngCshnExtPst_Req_ != other_.m_SRLSeatMemLegAngCshnExtPst_Req_) {
            return false;
        }
        return true;
    }
    bool SRLSeatMemPst_Req_struct::operator != (const SRLSeatMemPst_Req_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SRLSeatMemPst_Req_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SRLSeatMemPstPurpose_Req: " << (int)sample.SRLSeatMemPstPurpose_Req() <<", ";
        o << "SRLSeatMemFBPst_Req: " << (int)sample.SRLSeatMemFBPst_Req() <<", ";
        o << "SRLSeatMemBackrestPst_Req: " << (int)sample.SRLSeatMemBackrestPst_Req() <<", ";
        o << "SRLSeatMemHgtPst_Req: " << (int)sample.SRLSeatMemHgtPst_Req() <<", ";
        o << "SRLSeatMemCshnAngPst_Req: " << (int)sample.SRLSeatMemCshnAngPst_Req() <<", ";
        o << "SRLSeatMemLegAngCshnExtPst_Req: " << (int)sample.SRLSeatMemLegAngCshnExtPst_Req()  ;
        o <<"]";
        return o;
    }

    // ---- SRRSeatMemPst_Req_struct: 

    SRRSeatMemPst_Req_struct::SRRSeatMemPst_Req_struct() :
        m_SRRSeatMemPstPurpose_Req_ (0) ,
        m_SRRSeatMemFBPst_Req_ (0) ,
        m_SRRSeatMemBackrestPst_Req_ (0) ,
        m_SRRSeatMemHgtPst_Req_ (0) ,
        m_SRRSeatMemCshnAngPst_Req_ (0) ,
        m_SRRSeatMemLegAngCshnExtPst_Req_ (0)  {
    }   

    SRRSeatMemPst_Req_struct::SRRSeatMemPst_Req_struct (
        uint8_t SRRSeatMemPstPurpose_Req,
        uint8_t SRRSeatMemFBPst_Req,
        uint8_t SRRSeatMemBackrestPst_Req,
        uint8_t SRRSeatMemHgtPst_Req,
        uint8_t SRRSeatMemCshnAngPst_Req,
        uint8_t SRRSeatMemLegAngCshnExtPst_Req)
        :
            m_SRRSeatMemPstPurpose_Req_( SRRSeatMemPstPurpose_Req ),
            m_SRRSeatMemFBPst_Req_( SRRSeatMemFBPst_Req ),
            m_SRRSeatMemBackrestPst_Req_( SRRSeatMemBackrestPst_Req ),
            m_SRRSeatMemHgtPst_Req_( SRRSeatMemHgtPst_Req ),
            m_SRRSeatMemCshnAngPst_Req_( SRRSeatMemCshnAngPst_Req ),
            m_SRRSeatMemLegAngCshnExtPst_Req_( SRRSeatMemLegAngCshnExtPst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SRRSeatMemPst_Req_struct::SRRSeatMemPst_Req_struct(SRRSeatMemPst_Req_struct&& other_) OMG_NOEXCEPT  :m_SRRSeatMemPstPurpose_Req_ (std::move(other_.m_SRRSeatMemPstPurpose_Req_))
    ,
    m_SRRSeatMemFBPst_Req_ (std::move(other_.m_SRRSeatMemFBPst_Req_))
    ,
    m_SRRSeatMemBackrestPst_Req_ (std::move(other_.m_SRRSeatMemBackrestPst_Req_))
    ,
    m_SRRSeatMemHgtPst_Req_ (std::move(other_.m_SRRSeatMemHgtPst_Req_))
    ,
    m_SRRSeatMemCshnAngPst_Req_ (std::move(other_.m_SRRSeatMemCshnAngPst_Req_))
    ,
    m_SRRSeatMemLegAngCshnExtPst_Req_ (std::move(other_.m_SRRSeatMemLegAngCshnExtPst_Req_))
    {
    } 

    SRRSeatMemPst_Req_struct& SRRSeatMemPst_Req_struct::operator=(SRRSeatMemPst_Req_struct&&  other_) OMG_NOEXCEPT {
        SRRSeatMemPst_Req_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SRRSeatMemPst_Req_struct::swap(SRRSeatMemPst_Req_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SRRSeatMemPstPurpose_Req_, other_.m_SRRSeatMemPstPurpose_Req_);
        swap(m_SRRSeatMemFBPst_Req_, other_.m_SRRSeatMemFBPst_Req_);
        swap(m_SRRSeatMemBackrestPst_Req_, other_.m_SRRSeatMemBackrestPst_Req_);
        swap(m_SRRSeatMemHgtPst_Req_, other_.m_SRRSeatMemHgtPst_Req_);
        swap(m_SRRSeatMemCshnAngPst_Req_, other_.m_SRRSeatMemCshnAngPst_Req_);
        swap(m_SRRSeatMemLegAngCshnExtPst_Req_, other_.m_SRRSeatMemLegAngCshnExtPst_Req_);
    }  

    bool SRRSeatMemPst_Req_struct::operator == (const SRRSeatMemPst_Req_struct& other_) const {
        if (m_SRRSeatMemPstPurpose_Req_ != other_.m_SRRSeatMemPstPurpose_Req_) {
            return false;
        }
        if (m_SRRSeatMemFBPst_Req_ != other_.m_SRRSeatMemFBPst_Req_) {
            return false;
        }
        if (m_SRRSeatMemBackrestPst_Req_ != other_.m_SRRSeatMemBackrestPst_Req_) {
            return false;
        }
        if (m_SRRSeatMemHgtPst_Req_ != other_.m_SRRSeatMemHgtPst_Req_) {
            return false;
        }
        if (m_SRRSeatMemCshnAngPst_Req_ != other_.m_SRRSeatMemCshnAngPst_Req_) {
            return false;
        }
        if (m_SRRSeatMemLegAngCshnExtPst_Req_ != other_.m_SRRSeatMemLegAngCshnExtPst_Req_) {
            return false;
        }
        return true;
    }
    bool SRRSeatMemPst_Req_struct::operator != (const SRRSeatMemPst_Req_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SRRSeatMemPst_Req_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SRRSeatMemPstPurpose_Req: " << (int)sample.SRRSeatMemPstPurpose_Req() <<", ";
        o << "SRRSeatMemFBPst_Req: " << (int)sample.SRRSeatMemFBPst_Req() <<", ";
        o << "SRRSeatMemBackrestPst_Req: " << (int)sample.SRRSeatMemBackrestPst_Req() <<", ";
        o << "SRRSeatMemHgtPst_Req: " << (int)sample.SRRSeatMemHgtPst_Req() <<", ";
        o << "SRRSeatMemCshnAngPst_Req: " << (int)sample.SRRSeatMemCshnAngPst_Req() <<", ";
        o << "SRRSeatMemLegAngCshnExtPst_Req: " << (int)sample.SRRSeatMemLegAngCshnExtPst_Req()  ;
        o <<"]";
        return o;
    }

    // ---- SteerMemPst_Req_struct: 

    SteerMemPst_Req_struct::SteerMemPst_Req_struct() :
        m_SteerMemPstPurpose_Req_ (0) ,
        m_SteerMemTiltPst_Req_ (0) ,
        m_SteerMemTelePst_Req_ (0)  {
    }   

    SteerMemPst_Req_struct::SteerMemPst_Req_struct (
        uint8_t SteerMemPstPurpose_Req,
        uint8_t SteerMemTiltPst_Req,
        uint8_t SteerMemTelePst_Req)
        :
            m_SteerMemPstPurpose_Req_( SteerMemPstPurpose_Req ),
            m_SteerMemTiltPst_Req_( SteerMemTiltPst_Req ),
            m_SteerMemTelePst_Req_( SteerMemTelePst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SteerMemPst_Req_struct::SteerMemPst_Req_struct(SteerMemPst_Req_struct&& other_) OMG_NOEXCEPT  :m_SteerMemPstPurpose_Req_ (std::move(other_.m_SteerMemPstPurpose_Req_))
    ,
    m_SteerMemTiltPst_Req_ (std::move(other_.m_SteerMemTiltPst_Req_))
    ,
    m_SteerMemTelePst_Req_ (std::move(other_.m_SteerMemTelePst_Req_))
    {
    } 

    SteerMemPst_Req_struct& SteerMemPst_Req_struct::operator=(SteerMemPst_Req_struct&&  other_) OMG_NOEXCEPT {
        SteerMemPst_Req_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SteerMemPst_Req_struct::swap(SteerMemPst_Req_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SteerMemPstPurpose_Req_, other_.m_SteerMemPstPurpose_Req_);
        swap(m_SteerMemTiltPst_Req_, other_.m_SteerMemTiltPst_Req_);
        swap(m_SteerMemTelePst_Req_, other_.m_SteerMemTelePst_Req_);
    }  

    bool SteerMemPst_Req_struct::operator == (const SteerMemPst_Req_struct& other_) const {
        if (m_SteerMemPstPurpose_Req_ != other_.m_SteerMemPstPurpose_Req_) {
            return false;
        }
        if (m_SteerMemTiltPst_Req_ != other_.m_SteerMemTiltPst_Req_) {
            return false;
        }
        if (m_SteerMemTelePst_Req_ != other_.m_SteerMemTelePst_Req_) {
            return false;
        }
        return true;
    }
    bool SteerMemPst_Req_struct::operator != (const SteerMemPst_Req_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SteerMemPst_Req_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SteerMemPstPurpose_Req: " << (int)sample.SteerMemPstPurpose_Req() <<", ";
        o << "SteerMemTiltPst_Req: " << (int)sample.SteerMemTiltPst_Req() <<", ";
        o << "SteerMemTelePst_Req: " << (int)sample.SteerMemTelePst_Req()  ;
        o <<"]";
        return o;
    }

    // ---- LExMirMemLRPst_Req_struct: 

    LExMirMemLRPst_Req_struct::LExMirMemLRPst_Req_struct() :
        m_LExMirMemUDPst_Req_ (0) ,
        m_LExMirMemLRPst_Req_ (0) ,
        m_LExMirMemLRPstPurpose_Req_ (0)  {
    }   

    LExMirMemLRPst_Req_struct::LExMirMemLRPst_Req_struct (
        uint8_t LExMirMemUDPst_Req,
        uint8_t LExMirMemLRPst_Req,
        uint8_t LExMirMemLRPstPurpose_Req)
        :
            m_LExMirMemUDPst_Req_( LExMirMemUDPst_Req ),
            m_LExMirMemLRPst_Req_( LExMirMemLRPst_Req ),
            m_LExMirMemLRPstPurpose_Req_( LExMirMemLRPstPurpose_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    LExMirMemLRPst_Req_struct::LExMirMemLRPst_Req_struct(LExMirMemLRPst_Req_struct&& other_) OMG_NOEXCEPT  :m_LExMirMemUDPst_Req_ (std::move(other_.m_LExMirMemUDPst_Req_))
    ,
    m_LExMirMemLRPst_Req_ (std::move(other_.m_LExMirMemLRPst_Req_))
    ,
    m_LExMirMemLRPstPurpose_Req_ (std::move(other_.m_LExMirMemLRPstPurpose_Req_))
    {
    } 

    LExMirMemLRPst_Req_struct& LExMirMemLRPst_Req_struct::operator=(LExMirMemLRPst_Req_struct&&  other_) OMG_NOEXCEPT {
        LExMirMemLRPst_Req_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void LExMirMemLRPst_Req_struct::swap(LExMirMemLRPst_Req_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LExMirMemUDPst_Req_, other_.m_LExMirMemUDPst_Req_);
        swap(m_LExMirMemLRPst_Req_, other_.m_LExMirMemLRPst_Req_);
        swap(m_LExMirMemLRPstPurpose_Req_, other_.m_LExMirMemLRPstPurpose_Req_);
    }  

    bool LExMirMemLRPst_Req_struct::operator == (const LExMirMemLRPst_Req_struct& other_) const {
        if (m_LExMirMemUDPst_Req_ != other_.m_LExMirMemUDPst_Req_) {
            return false;
        }
        if (m_LExMirMemLRPst_Req_ != other_.m_LExMirMemLRPst_Req_) {
            return false;
        }
        if (m_LExMirMemLRPstPurpose_Req_ != other_.m_LExMirMemLRPstPurpose_Req_) {
            return false;
        }
        return true;
    }
    bool LExMirMemLRPst_Req_struct::operator != (const LExMirMemLRPst_Req_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const LExMirMemLRPst_Req_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LExMirMemUDPst_Req: " << (int)sample.LExMirMemUDPst_Req() <<", ";
        o << "LExMirMemLRPst_Req: " << (int)sample.LExMirMemLRPst_Req() <<", ";
        o << "LExMirMemLRPstPurpose_Req: " << (int)sample.LExMirMemLRPstPurpose_Req()  ;
        o <<"]";
        return o;
    }

    // ---- RExMirMemLRPst_Req_struct: 

    RExMirMemLRPst_Req_struct::RExMirMemLRPst_Req_struct() :
        m_RExMirMemUDPst_Req_ (0) ,
        m_RExMirMemLRPst_Req_ (0) ,
        m_RExMirMemLRPstPurpose_Req_ (0)  {
    }   

    RExMirMemLRPst_Req_struct::RExMirMemLRPst_Req_struct (
        uint8_t RExMirMemUDPst_Req,
        uint8_t RExMirMemLRPst_Req,
        uint8_t RExMirMemLRPstPurpose_Req)
        :
            m_RExMirMemUDPst_Req_( RExMirMemUDPst_Req ),
            m_RExMirMemLRPst_Req_( RExMirMemLRPst_Req ),
            m_RExMirMemLRPstPurpose_Req_( RExMirMemLRPstPurpose_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    RExMirMemLRPst_Req_struct::RExMirMemLRPst_Req_struct(RExMirMemLRPst_Req_struct&& other_) OMG_NOEXCEPT  :m_RExMirMemUDPst_Req_ (std::move(other_.m_RExMirMemUDPst_Req_))
    ,
    m_RExMirMemLRPst_Req_ (std::move(other_.m_RExMirMemLRPst_Req_))
    ,
    m_RExMirMemLRPstPurpose_Req_ (std::move(other_.m_RExMirMemLRPstPurpose_Req_))
    {
    } 

    RExMirMemLRPst_Req_struct& RExMirMemLRPst_Req_struct::operator=(RExMirMemLRPst_Req_struct&&  other_) OMG_NOEXCEPT {
        RExMirMemLRPst_Req_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void RExMirMemLRPst_Req_struct::swap(RExMirMemLRPst_Req_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_RExMirMemUDPst_Req_, other_.m_RExMirMemUDPst_Req_);
        swap(m_RExMirMemLRPst_Req_, other_.m_RExMirMemLRPst_Req_);
        swap(m_RExMirMemLRPstPurpose_Req_, other_.m_RExMirMemLRPstPurpose_Req_);
    }  

    bool RExMirMemLRPst_Req_struct::operator == (const RExMirMemLRPst_Req_struct& other_) const {
        if (m_RExMirMemUDPst_Req_ != other_.m_RExMirMemUDPst_Req_) {
            return false;
        }
        if (m_RExMirMemLRPst_Req_ != other_.m_RExMirMemLRPst_Req_) {
            return false;
        }
        if (m_RExMirMemLRPstPurpose_Req_ != other_.m_RExMirMemLRPstPurpose_Req_) {
            return false;
        }
        return true;
    }
    bool RExMirMemLRPst_Req_struct::operator != (const RExMirMemLRPst_Req_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const RExMirMemLRPst_Req_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "RExMirMemUDPst_Req: " << (int)sample.RExMirMemUDPst_Req() <<", ";
        o << "RExMirMemLRPst_Req: " << (int)sample.RExMirMemLRPst_Req() <<", ";
        o << "RExMirMemLRPstPurpose_Req: " << (int)sample.RExMirMemLRPstPurpose_Req()  ;
        o <<"]";
        return o;
    }

    // ---- BdMemPst_Set_struct: 

    BdMemPst_Set_struct::BdMemPst_Set_struct()  {
    }   

    BdMemPst_Set_struct::BdMemPst_Set_struct (
        const ::dds::core::array< BodyDomain::FRSeatMemPst_Req_struct, 5L>& FLSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::FRSeatMemPst_Req_struct, 4L>& FRSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::SRLSeatMemPst_Req_struct, 2L>& SRLSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::SRRSeatMemPst_Req_struct, 2L>& SRRSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::SteerMemPst_Req_struct, 5L>& SteerMemPst_Req,
        const ::dds::core::array< BodyDomain::LExMirMemLRPst_Req_struct, 8L>& LExMirMemLRPst_Req,
        const ::dds::core::array< BodyDomain::RExMirMemLRPst_Req_struct, 8L>& RExMirMemLRPst_Req)
        :
            m_FLSeatMemPst_Req_( FLSeatMemPst_Req ),
            m_FRSeatMemPst_Req_( FRSeatMemPst_Req ),
            m_SRLSeatMemPst_Req_( SRLSeatMemPst_Req ),
            m_SRRSeatMemPst_Req_( SRRSeatMemPst_Req ),
            m_SteerMemPst_Req_( SteerMemPst_Req ),
            m_LExMirMemLRPst_Req_( LExMirMemLRPst_Req ),
            m_RExMirMemLRPst_Req_( RExMirMemLRPst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdMemPst_Set_struct::BdMemPst_Set_struct(BdMemPst_Set_struct&& other_) OMG_NOEXCEPT  :m_FLSeatMemPst_Req_ (std::move(other_.m_FLSeatMemPst_Req_))
    ,
    m_FRSeatMemPst_Req_ (std::move(other_.m_FRSeatMemPst_Req_))
    ,
    m_SRLSeatMemPst_Req_ (std::move(other_.m_SRLSeatMemPst_Req_))
    ,
    m_SRRSeatMemPst_Req_ (std::move(other_.m_SRRSeatMemPst_Req_))
    ,
    m_SteerMemPst_Req_ (std::move(other_.m_SteerMemPst_Req_))
    ,
    m_LExMirMemLRPst_Req_ (std::move(other_.m_LExMirMemLRPst_Req_))
    ,
    m_RExMirMemLRPst_Req_ (std::move(other_.m_RExMirMemLRPst_Req_))
    {
    } 

    BdMemPst_Set_struct& BdMemPst_Set_struct::operator=(BdMemPst_Set_struct&&  other_) OMG_NOEXCEPT {
        BdMemPst_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdMemPst_Set_struct::swap(BdMemPst_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatMemPst_Req_, other_.m_FLSeatMemPst_Req_);
        swap(m_FRSeatMemPst_Req_, other_.m_FRSeatMemPst_Req_);
        swap(m_SRLSeatMemPst_Req_, other_.m_SRLSeatMemPst_Req_);
        swap(m_SRRSeatMemPst_Req_, other_.m_SRRSeatMemPst_Req_);
        swap(m_SteerMemPst_Req_, other_.m_SteerMemPst_Req_);
        swap(m_LExMirMemLRPst_Req_, other_.m_LExMirMemLRPst_Req_);
        swap(m_RExMirMemLRPst_Req_, other_.m_RExMirMemLRPst_Req_);
    }  

    bool BdMemPst_Set_struct::operator == (const BdMemPst_Set_struct& other_) const {
        if (m_FLSeatMemPst_Req_ != other_.m_FLSeatMemPst_Req_) {
            return false;
        }
        if (m_FRSeatMemPst_Req_ != other_.m_FRSeatMemPst_Req_) {
            return false;
        }
        if (m_SRLSeatMemPst_Req_ != other_.m_SRLSeatMemPst_Req_) {
            return false;
        }
        if (m_SRRSeatMemPst_Req_ != other_.m_SRRSeatMemPst_Req_) {
            return false;
        }
        if (m_SteerMemPst_Req_ != other_.m_SteerMemPst_Req_) {
            return false;
        }
        if (m_LExMirMemLRPst_Req_ != other_.m_LExMirMemLRPst_Req_) {
            return false;
        }
        if (m_RExMirMemLRPst_Req_ != other_.m_RExMirMemLRPst_Req_) {
            return false;
        }
        return true;
    }
    bool BdMemPst_Set_struct::operator != (const BdMemPst_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdMemPst_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatMemPst_Req: " << sample.FLSeatMemPst_Req()<<", ";
        o << "FRSeatMemPst_Req: " << sample.FRSeatMemPst_Req()<<", ";
        o << "SRLSeatMemPst_Req: " << sample.SRLSeatMemPst_Req()<<", ";
        o << "SRRSeatMemPst_Req: " << sample.SRRSeatMemPst_Req()<<", ";
        o << "SteerMemPst_Req: " << sample.SteerMemPst_Req()<<", ";
        o << "LExMirMemLRPst_Req: " << sample.LExMirMemLRPst_Req()<<", ";
        o << "RExMirMemLRPst_Req: " << sample.RExMirMemLRPst_Req() ;
        o <<"]";
        return o;
    }

    // ---- BdMemPst_Get_struct: 

    BdMemPst_Get_struct::BdMemPst_Get_struct() :
        m_FLSeatMemPstGet_Req_ (0) ,
        m_FRSeatMemPstGet_Req_ (0) ,
        m_SRLSeatMemPstGet_Req_ (0) ,
        m_SRRSeatMemPstGet_Req_ (0) ,
        m_SteerMemPstGet_Req_ (0) ,
        m_LExMirMemLRPstGet_Req_ (0) ,
        m_RExMirMemLRPstGet_Req_ (0)  {
    }   

    BdMemPst_Get_struct::BdMemPst_Get_struct (
        uint8_t FLSeatMemPstGet_Req,
        uint8_t FRSeatMemPstGet_Req,
        uint8_t SRLSeatMemPstGet_Req,
        uint8_t SRRSeatMemPstGet_Req,
        uint8_t SteerMemPstGet_Req,
        uint8_t LExMirMemLRPstGet_Req,
        uint8_t RExMirMemLRPstGet_Req)
        :
            m_FLSeatMemPstGet_Req_( FLSeatMemPstGet_Req ),
            m_FRSeatMemPstGet_Req_( FRSeatMemPstGet_Req ),
            m_SRLSeatMemPstGet_Req_( SRLSeatMemPstGet_Req ),
            m_SRRSeatMemPstGet_Req_( SRRSeatMemPstGet_Req ),
            m_SteerMemPstGet_Req_( SteerMemPstGet_Req ),
            m_LExMirMemLRPstGet_Req_( LExMirMemLRPstGet_Req ),
            m_RExMirMemLRPstGet_Req_( RExMirMemLRPstGet_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdMemPst_Get_struct::BdMemPst_Get_struct(BdMemPst_Get_struct&& other_) OMG_NOEXCEPT  :m_FLSeatMemPstGet_Req_ (std::move(other_.m_FLSeatMemPstGet_Req_))
    ,
    m_FRSeatMemPstGet_Req_ (std::move(other_.m_FRSeatMemPstGet_Req_))
    ,
    m_SRLSeatMemPstGet_Req_ (std::move(other_.m_SRLSeatMemPstGet_Req_))
    ,
    m_SRRSeatMemPstGet_Req_ (std::move(other_.m_SRRSeatMemPstGet_Req_))
    ,
    m_SteerMemPstGet_Req_ (std::move(other_.m_SteerMemPstGet_Req_))
    ,
    m_LExMirMemLRPstGet_Req_ (std::move(other_.m_LExMirMemLRPstGet_Req_))
    ,
    m_RExMirMemLRPstGet_Req_ (std::move(other_.m_RExMirMemLRPstGet_Req_))
    {
    } 

    BdMemPst_Get_struct& BdMemPst_Get_struct::operator=(BdMemPst_Get_struct&&  other_) OMG_NOEXCEPT {
        BdMemPst_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdMemPst_Get_struct::swap(BdMemPst_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatMemPstGet_Req_, other_.m_FLSeatMemPstGet_Req_);
        swap(m_FRSeatMemPstGet_Req_, other_.m_FRSeatMemPstGet_Req_);
        swap(m_SRLSeatMemPstGet_Req_, other_.m_SRLSeatMemPstGet_Req_);
        swap(m_SRRSeatMemPstGet_Req_, other_.m_SRRSeatMemPstGet_Req_);
        swap(m_SteerMemPstGet_Req_, other_.m_SteerMemPstGet_Req_);
        swap(m_LExMirMemLRPstGet_Req_, other_.m_LExMirMemLRPstGet_Req_);
        swap(m_RExMirMemLRPstGet_Req_, other_.m_RExMirMemLRPstGet_Req_);
    }  

    bool BdMemPst_Get_struct::operator == (const BdMemPst_Get_struct& other_) const {
        if (m_FLSeatMemPstGet_Req_ != other_.m_FLSeatMemPstGet_Req_) {
            return false;
        }
        if (m_FRSeatMemPstGet_Req_ != other_.m_FRSeatMemPstGet_Req_) {
            return false;
        }
        if (m_SRLSeatMemPstGet_Req_ != other_.m_SRLSeatMemPstGet_Req_) {
            return false;
        }
        if (m_SRRSeatMemPstGet_Req_ != other_.m_SRRSeatMemPstGet_Req_) {
            return false;
        }
        if (m_SteerMemPstGet_Req_ != other_.m_SteerMemPstGet_Req_) {
            return false;
        }
        if (m_LExMirMemLRPstGet_Req_ != other_.m_LExMirMemLRPstGet_Req_) {
            return false;
        }
        if (m_RExMirMemLRPstGet_Req_ != other_.m_RExMirMemLRPstGet_Req_) {
            return false;
        }
        return true;
    }
    bool BdMemPst_Get_struct::operator != (const BdMemPst_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdMemPst_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatMemPstGet_Req: " << (int)sample.FLSeatMemPstGet_Req() <<", ";
        o << "FRSeatMemPstGet_Req: " << (int)sample.FRSeatMemPstGet_Req() <<", ";
        o << "SRLSeatMemPstGet_Req: " << (int)sample.SRLSeatMemPstGet_Req() <<", ";
        o << "SRRSeatMemPstGet_Req: " << (int)sample.SRRSeatMemPstGet_Req() <<", ";
        o << "SteerMemPstGet_Req: " << (int)sample.SteerMemPstGet_Req() <<", ";
        o << "LExMirMemLRPstGet_Req: " << (int)sample.LExMirMemLRPstGet_Req() <<", ";
        o << "RExMirMemLRPstGet_Req: " << (int)sample.RExMirMemLRPstGet_Req()  ;
        o <<"]";
        return o;
    }

    // ---- FLSeatMemPst_Rsp_struct: 

    FLSeatMemPst_Rsp_struct::FLSeatMemPst_Rsp_struct() :
        m_FLSeatMemPstPurpose_Rsp_ (0) ,
        m_FLSeatMemFBPst_Rsp_ (0) ,
        m_FLSeatMemBackrestPst_Rsp_ (0) ,
        m_FLSeatMemHgtPst_Rsp_ (0) ,
        m_FLSeatMemCshnAngPst_Rsp_ (0) ,
        m_FLSeatMemLegAngCshnExtPst_Rsp_ (0) ,
        m_FLSeatMemLegLengthPst_Rsp_ (0)  {
    }   

    FLSeatMemPst_Rsp_struct::FLSeatMemPst_Rsp_struct (
        uint8_t FLSeatMemPstPurpose_Rsp,
        uint8_t FLSeatMemFBPst_Rsp,
        uint8_t FLSeatMemBackrestPst_Rsp,
        uint8_t FLSeatMemHgtPst_Rsp,
        uint8_t FLSeatMemCshnAngPst_Rsp,
        uint8_t FLSeatMemLegAngCshnExtPst_Rsp,
        uint8_t FLSeatMemLegLengthPst_Rsp)
        :
            m_FLSeatMemPstPurpose_Rsp_( FLSeatMemPstPurpose_Rsp ),
            m_FLSeatMemFBPst_Rsp_( FLSeatMemFBPst_Rsp ),
            m_FLSeatMemBackrestPst_Rsp_( FLSeatMemBackrestPst_Rsp ),
            m_FLSeatMemHgtPst_Rsp_( FLSeatMemHgtPst_Rsp ),
            m_FLSeatMemCshnAngPst_Rsp_( FLSeatMemCshnAngPst_Rsp ),
            m_FLSeatMemLegAngCshnExtPst_Rsp_( FLSeatMemLegAngCshnExtPst_Rsp ),
            m_FLSeatMemLegLengthPst_Rsp_( FLSeatMemLegLengthPst_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    FLSeatMemPst_Rsp_struct::FLSeatMemPst_Rsp_struct(FLSeatMemPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_FLSeatMemPstPurpose_Rsp_ (std::move(other_.m_FLSeatMemPstPurpose_Rsp_))
    ,
    m_FLSeatMemFBPst_Rsp_ (std::move(other_.m_FLSeatMemFBPst_Rsp_))
    ,
    m_FLSeatMemBackrestPst_Rsp_ (std::move(other_.m_FLSeatMemBackrestPst_Rsp_))
    ,
    m_FLSeatMemHgtPst_Rsp_ (std::move(other_.m_FLSeatMemHgtPst_Rsp_))
    ,
    m_FLSeatMemCshnAngPst_Rsp_ (std::move(other_.m_FLSeatMemCshnAngPst_Rsp_))
    ,
    m_FLSeatMemLegAngCshnExtPst_Rsp_ (std::move(other_.m_FLSeatMemLegAngCshnExtPst_Rsp_))
    ,
    m_FLSeatMemLegLengthPst_Rsp_ (std::move(other_.m_FLSeatMemLegLengthPst_Rsp_))
    {
    } 

    FLSeatMemPst_Rsp_struct& FLSeatMemPst_Rsp_struct::operator=(FLSeatMemPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        FLSeatMemPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void FLSeatMemPst_Rsp_struct::swap(FLSeatMemPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatMemPstPurpose_Rsp_, other_.m_FLSeatMemPstPurpose_Rsp_);
        swap(m_FLSeatMemFBPst_Rsp_, other_.m_FLSeatMemFBPst_Rsp_);
        swap(m_FLSeatMemBackrestPst_Rsp_, other_.m_FLSeatMemBackrestPst_Rsp_);
        swap(m_FLSeatMemHgtPst_Rsp_, other_.m_FLSeatMemHgtPst_Rsp_);
        swap(m_FLSeatMemCshnAngPst_Rsp_, other_.m_FLSeatMemCshnAngPst_Rsp_);
        swap(m_FLSeatMemLegAngCshnExtPst_Rsp_, other_.m_FLSeatMemLegAngCshnExtPst_Rsp_);
        swap(m_FLSeatMemLegLengthPst_Rsp_, other_.m_FLSeatMemLegLengthPst_Rsp_);
    }  

    bool FLSeatMemPst_Rsp_struct::operator == (const FLSeatMemPst_Rsp_struct& other_) const {
        if (m_FLSeatMemPstPurpose_Rsp_ != other_.m_FLSeatMemPstPurpose_Rsp_) {
            return false;
        }
        if (m_FLSeatMemFBPst_Rsp_ != other_.m_FLSeatMemFBPst_Rsp_) {
            return false;
        }
        if (m_FLSeatMemBackrestPst_Rsp_ != other_.m_FLSeatMemBackrestPst_Rsp_) {
            return false;
        }
        if (m_FLSeatMemHgtPst_Rsp_ != other_.m_FLSeatMemHgtPst_Rsp_) {
            return false;
        }
        if (m_FLSeatMemCshnAngPst_Rsp_ != other_.m_FLSeatMemCshnAngPst_Rsp_) {
            return false;
        }
        if (m_FLSeatMemLegAngCshnExtPst_Rsp_ != other_.m_FLSeatMemLegAngCshnExtPst_Rsp_) {
            return false;
        }
        if (m_FLSeatMemLegLengthPst_Rsp_ != other_.m_FLSeatMemLegLengthPst_Rsp_) {
            return false;
        }
        return true;
    }
    bool FLSeatMemPst_Rsp_struct::operator != (const FLSeatMemPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const FLSeatMemPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatMemPstPurpose_Rsp: " << (int)sample.FLSeatMemPstPurpose_Rsp() <<", ";
        o << "FLSeatMemFBPst_Rsp: " << (int)sample.FLSeatMemFBPst_Rsp() <<", ";
        o << "FLSeatMemBackrestPst_Rsp: " << (int)sample.FLSeatMemBackrestPst_Rsp() <<", ";
        o << "FLSeatMemHgtPst_Rsp: " << (int)sample.FLSeatMemHgtPst_Rsp() <<", ";
        o << "FLSeatMemCshnAngPst_Rsp: " << (int)sample.FLSeatMemCshnAngPst_Rsp() <<", ";
        o << "FLSeatMemLegAngCshnExtPst_Rsp: " << (int)sample.FLSeatMemLegAngCshnExtPst_Rsp() <<", ";
        o << "FLSeatMemLegLengthPst_Rsp: " << (int)sample.FLSeatMemLegLengthPst_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- FRSeatMemPst_Rsp_struct: 

    FRSeatMemPst_Rsp_struct::FRSeatMemPst_Rsp_struct() :
        m_FRSeatMemPstPurpose_Rsp_ (0) ,
        m_FRSeatMemFBPst_Rsp_ (0) ,
        m_FRSeatMemBackrestPst_Rsp_ (0) ,
        m_FRSeatMemHgtPst_Rsp_ (0) ,
        m_FRSeatMemCshnAngPst_Rsp_ (0) ,
        m_FRSeatMemLegAngCshnExtPst_Rsp_ (0) ,
        m_FRSeatMemLegLengthPst_Rsp_ (0)  {
    }   

    FRSeatMemPst_Rsp_struct::FRSeatMemPst_Rsp_struct (
        uint8_t FRSeatMemPstPurpose_Rsp,
        uint8_t FRSeatMemFBPst_Rsp,
        uint8_t FRSeatMemBackrestPst_Rsp,
        uint8_t FRSeatMemHgtPst_Rsp,
        uint8_t FRSeatMemCshnAngPst_Rsp,
        uint8_t FRSeatMemLegAngCshnExtPst_Rsp,
        uint8_t FRSeatMemLegLengthPst_Rsp)
        :
            m_FRSeatMemPstPurpose_Rsp_( FRSeatMemPstPurpose_Rsp ),
            m_FRSeatMemFBPst_Rsp_( FRSeatMemFBPst_Rsp ),
            m_FRSeatMemBackrestPst_Rsp_( FRSeatMemBackrestPst_Rsp ),
            m_FRSeatMemHgtPst_Rsp_( FRSeatMemHgtPst_Rsp ),
            m_FRSeatMemCshnAngPst_Rsp_( FRSeatMemCshnAngPst_Rsp ),
            m_FRSeatMemLegAngCshnExtPst_Rsp_( FRSeatMemLegAngCshnExtPst_Rsp ),
            m_FRSeatMemLegLengthPst_Rsp_( FRSeatMemLegLengthPst_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    FRSeatMemPst_Rsp_struct::FRSeatMemPst_Rsp_struct(FRSeatMemPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_FRSeatMemPstPurpose_Rsp_ (std::move(other_.m_FRSeatMemPstPurpose_Rsp_))
    ,
    m_FRSeatMemFBPst_Rsp_ (std::move(other_.m_FRSeatMemFBPst_Rsp_))
    ,
    m_FRSeatMemBackrestPst_Rsp_ (std::move(other_.m_FRSeatMemBackrestPst_Rsp_))
    ,
    m_FRSeatMemHgtPst_Rsp_ (std::move(other_.m_FRSeatMemHgtPst_Rsp_))
    ,
    m_FRSeatMemCshnAngPst_Rsp_ (std::move(other_.m_FRSeatMemCshnAngPst_Rsp_))
    ,
    m_FRSeatMemLegAngCshnExtPst_Rsp_ (std::move(other_.m_FRSeatMemLegAngCshnExtPst_Rsp_))
    ,
    m_FRSeatMemLegLengthPst_Rsp_ (std::move(other_.m_FRSeatMemLegLengthPst_Rsp_))
    {
    } 

    FRSeatMemPst_Rsp_struct& FRSeatMemPst_Rsp_struct::operator=(FRSeatMemPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        FRSeatMemPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void FRSeatMemPst_Rsp_struct::swap(FRSeatMemPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FRSeatMemPstPurpose_Rsp_, other_.m_FRSeatMemPstPurpose_Rsp_);
        swap(m_FRSeatMemFBPst_Rsp_, other_.m_FRSeatMemFBPst_Rsp_);
        swap(m_FRSeatMemBackrestPst_Rsp_, other_.m_FRSeatMemBackrestPst_Rsp_);
        swap(m_FRSeatMemHgtPst_Rsp_, other_.m_FRSeatMemHgtPst_Rsp_);
        swap(m_FRSeatMemCshnAngPst_Rsp_, other_.m_FRSeatMemCshnAngPst_Rsp_);
        swap(m_FRSeatMemLegAngCshnExtPst_Rsp_, other_.m_FRSeatMemLegAngCshnExtPst_Rsp_);
        swap(m_FRSeatMemLegLengthPst_Rsp_, other_.m_FRSeatMemLegLengthPst_Rsp_);
    }  

    bool FRSeatMemPst_Rsp_struct::operator == (const FRSeatMemPst_Rsp_struct& other_) const {
        if (m_FRSeatMemPstPurpose_Rsp_ != other_.m_FRSeatMemPstPurpose_Rsp_) {
            return false;
        }
        if (m_FRSeatMemFBPst_Rsp_ != other_.m_FRSeatMemFBPst_Rsp_) {
            return false;
        }
        if (m_FRSeatMemBackrestPst_Rsp_ != other_.m_FRSeatMemBackrestPst_Rsp_) {
            return false;
        }
        if (m_FRSeatMemHgtPst_Rsp_ != other_.m_FRSeatMemHgtPst_Rsp_) {
            return false;
        }
        if (m_FRSeatMemCshnAngPst_Rsp_ != other_.m_FRSeatMemCshnAngPst_Rsp_) {
            return false;
        }
        if (m_FRSeatMemLegAngCshnExtPst_Rsp_ != other_.m_FRSeatMemLegAngCshnExtPst_Rsp_) {
            return false;
        }
        if (m_FRSeatMemLegLengthPst_Rsp_ != other_.m_FRSeatMemLegLengthPst_Rsp_) {
            return false;
        }
        return true;
    }
    bool FRSeatMemPst_Rsp_struct::operator != (const FRSeatMemPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const FRSeatMemPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FRSeatMemPstPurpose_Rsp: " << (int)sample.FRSeatMemPstPurpose_Rsp() <<", ";
        o << "FRSeatMemFBPst_Rsp: " << (int)sample.FRSeatMemFBPst_Rsp() <<", ";
        o << "FRSeatMemBackrestPst_Rsp: " << (int)sample.FRSeatMemBackrestPst_Rsp() <<", ";
        o << "FRSeatMemHgtPst_Rsp: " << (int)sample.FRSeatMemHgtPst_Rsp() <<", ";
        o << "FRSeatMemCshnAngPst_Rsp: " << (int)sample.FRSeatMemCshnAngPst_Rsp() <<", ";
        o << "FRSeatMemLegAngCshnExtPst_Rsp: " << (int)sample.FRSeatMemLegAngCshnExtPst_Rsp() <<", ";
        o << "FRSeatMemLegLengthPst_Rsp: " << (int)sample.FRSeatMemLegLengthPst_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- SRLSeatMemPst_Rsp_struct: 

    SRLSeatMemPst_Rsp_struct::SRLSeatMemPst_Rsp_struct() :
        m_SRLSeatMemPstPurpose_Rsp_ (0) ,
        m_SRLSeatMemFBPst_Rsp_ (0) ,
        m_SRLSeatMemBackrestPst_Rsp_ (0) ,
        m_SRLSeatMemHgtPst_Rsp_ (0) ,
        m_SRLSeatMemCshnAngPst_Rsp_ (0) ,
        m_SRLSeatMemLegAngCshnExtPst_Rsp_ (0)  {
    }   

    SRLSeatMemPst_Rsp_struct::SRLSeatMemPst_Rsp_struct (
        uint8_t SRLSeatMemPstPurpose_Rsp,
        uint8_t SRLSeatMemFBPst_Rsp,
        uint8_t SRLSeatMemBackrestPst_Rsp,
        uint8_t SRLSeatMemHgtPst_Rsp,
        uint8_t SRLSeatMemCshnAngPst_Rsp,
        uint8_t SRLSeatMemLegAngCshnExtPst_Rsp)
        :
            m_SRLSeatMemPstPurpose_Rsp_( SRLSeatMemPstPurpose_Rsp ),
            m_SRLSeatMemFBPst_Rsp_( SRLSeatMemFBPst_Rsp ),
            m_SRLSeatMemBackrestPst_Rsp_( SRLSeatMemBackrestPst_Rsp ),
            m_SRLSeatMemHgtPst_Rsp_( SRLSeatMemHgtPst_Rsp ),
            m_SRLSeatMemCshnAngPst_Rsp_( SRLSeatMemCshnAngPst_Rsp ),
            m_SRLSeatMemLegAngCshnExtPst_Rsp_( SRLSeatMemLegAngCshnExtPst_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SRLSeatMemPst_Rsp_struct::SRLSeatMemPst_Rsp_struct(SRLSeatMemPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_SRLSeatMemPstPurpose_Rsp_ (std::move(other_.m_SRLSeatMemPstPurpose_Rsp_))
    ,
    m_SRLSeatMemFBPst_Rsp_ (std::move(other_.m_SRLSeatMemFBPst_Rsp_))
    ,
    m_SRLSeatMemBackrestPst_Rsp_ (std::move(other_.m_SRLSeatMemBackrestPst_Rsp_))
    ,
    m_SRLSeatMemHgtPst_Rsp_ (std::move(other_.m_SRLSeatMemHgtPst_Rsp_))
    ,
    m_SRLSeatMemCshnAngPst_Rsp_ (std::move(other_.m_SRLSeatMemCshnAngPst_Rsp_))
    ,
    m_SRLSeatMemLegAngCshnExtPst_Rsp_ (std::move(other_.m_SRLSeatMemLegAngCshnExtPst_Rsp_))
    {
    } 

    SRLSeatMemPst_Rsp_struct& SRLSeatMemPst_Rsp_struct::operator=(SRLSeatMemPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        SRLSeatMemPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SRLSeatMemPst_Rsp_struct::swap(SRLSeatMemPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SRLSeatMemPstPurpose_Rsp_, other_.m_SRLSeatMemPstPurpose_Rsp_);
        swap(m_SRLSeatMemFBPst_Rsp_, other_.m_SRLSeatMemFBPst_Rsp_);
        swap(m_SRLSeatMemBackrestPst_Rsp_, other_.m_SRLSeatMemBackrestPst_Rsp_);
        swap(m_SRLSeatMemHgtPst_Rsp_, other_.m_SRLSeatMemHgtPst_Rsp_);
        swap(m_SRLSeatMemCshnAngPst_Rsp_, other_.m_SRLSeatMemCshnAngPst_Rsp_);
        swap(m_SRLSeatMemLegAngCshnExtPst_Rsp_, other_.m_SRLSeatMemLegAngCshnExtPst_Rsp_);
    }  

    bool SRLSeatMemPst_Rsp_struct::operator == (const SRLSeatMemPst_Rsp_struct& other_) const {
        if (m_SRLSeatMemPstPurpose_Rsp_ != other_.m_SRLSeatMemPstPurpose_Rsp_) {
            return false;
        }
        if (m_SRLSeatMemFBPst_Rsp_ != other_.m_SRLSeatMemFBPst_Rsp_) {
            return false;
        }
        if (m_SRLSeatMemBackrestPst_Rsp_ != other_.m_SRLSeatMemBackrestPst_Rsp_) {
            return false;
        }
        if (m_SRLSeatMemHgtPst_Rsp_ != other_.m_SRLSeatMemHgtPst_Rsp_) {
            return false;
        }
        if (m_SRLSeatMemCshnAngPst_Rsp_ != other_.m_SRLSeatMemCshnAngPst_Rsp_) {
            return false;
        }
        if (m_SRLSeatMemLegAngCshnExtPst_Rsp_ != other_.m_SRLSeatMemLegAngCshnExtPst_Rsp_) {
            return false;
        }
        return true;
    }
    bool SRLSeatMemPst_Rsp_struct::operator != (const SRLSeatMemPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SRLSeatMemPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SRLSeatMemPstPurpose_Rsp: " << (int)sample.SRLSeatMemPstPurpose_Rsp() <<", ";
        o << "SRLSeatMemFBPst_Rsp: " << (int)sample.SRLSeatMemFBPst_Rsp() <<", ";
        o << "SRLSeatMemBackrestPst_Rsp: " << (int)sample.SRLSeatMemBackrestPst_Rsp() <<", ";
        o << "SRLSeatMemHgtPst_Rsp: " << (int)sample.SRLSeatMemHgtPst_Rsp() <<", ";
        o << "SRLSeatMemCshnAngPst_Rsp: " << (int)sample.SRLSeatMemCshnAngPst_Rsp() <<", ";
        o << "SRLSeatMemLegAngCshnExtPst_Rsp: " << (int)sample.SRLSeatMemLegAngCshnExtPst_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- SRRSeatMemPst_Rsp_struct: 

    SRRSeatMemPst_Rsp_struct::SRRSeatMemPst_Rsp_struct() :
        m_SRRSeatMemPstPurpose_Rsp_ (0) ,
        m_SRRSeatMemFBPst_Rsp_ (0) ,
        m_SRRSeatMemBackrestPst_Rsp_ (0) ,
        m_SRRSeatMemHgtPst_Rsp_ (0) ,
        m_SRRSeatMemCshnAngPst_Rsp_ (0) ,
        m_SRRSeatMemLegAngCshnExtPst_Rsp_ (0)  {
    }   

    SRRSeatMemPst_Rsp_struct::SRRSeatMemPst_Rsp_struct (
        uint8_t SRRSeatMemPstPurpose_Rsp,
        uint8_t SRRSeatMemFBPst_Rsp,
        uint8_t SRRSeatMemBackrestPst_Rsp,
        uint8_t SRRSeatMemHgtPst_Rsp,
        uint8_t SRRSeatMemCshnAngPst_Rsp,
        uint8_t SRRSeatMemLegAngCshnExtPst_Rsp)
        :
            m_SRRSeatMemPstPurpose_Rsp_( SRRSeatMemPstPurpose_Rsp ),
            m_SRRSeatMemFBPst_Rsp_( SRRSeatMemFBPst_Rsp ),
            m_SRRSeatMemBackrestPst_Rsp_( SRRSeatMemBackrestPst_Rsp ),
            m_SRRSeatMemHgtPst_Rsp_( SRRSeatMemHgtPst_Rsp ),
            m_SRRSeatMemCshnAngPst_Rsp_( SRRSeatMemCshnAngPst_Rsp ),
            m_SRRSeatMemLegAngCshnExtPst_Rsp_( SRRSeatMemLegAngCshnExtPst_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SRRSeatMemPst_Rsp_struct::SRRSeatMemPst_Rsp_struct(SRRSeatMemPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_SRRSeatMemPstPurpose_Rsp_ (std::move(other_.m_SRRSeatMemPstPurpose_Rsp_))
    ,
    m_SRRSeatMemFBPst_Rsp_ (std::move(other_.m_SRRSeatMemFBPst_Rsp_))
    ,
    m_SRRSeatMemBackrestPst_Rsp_ (std::move(other_.m_SRRSeatMemBackrestPst_Rsp_))
    ,
    m_SRRSeatMemHgtPst_Rsp_ (std::move(other_.m_SRRSeatMemHgtPst_Rsp_))
    ,
    m_SRRSeatMemCshnAngPst_Rsp_ (std::move(other_.m_SRRSeatMemCshnAngPst_Rsp_))
    ,
    m_SRRSeatMemLegAngCshnExtPst_Rsp_ (std::move(other_.m_SRRSeatMemLegAngCshnExtPst_Rsp_))
    {
    } 

    SRRSeatMemPst_Rsp_struct& SRRSeatMemPst_Rsp_struct::operator=(SRRSeatMemPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        SRRSeatMemPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SRRSeatMemPst_Rsp_struct::swap(SRRSeatMemPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SRRSeatMemPstPurpose_Rsp_, other_.m_SRRSeatMemPstPurpose_Rsp_);
        swap(m_SRRSeatMemFBPst_Rsp_, other_.m_SRRSeatMemFBPst_Rsp_);
        swap(m_SRRSeatMemBackrestPst_Rsp_, other_.m_SRRSeatMemBackrestPst_Rsp_);
        swap(m_SRRSeatMemHgtPst_Rsp_, other_.m_SRRSeatMemHgtPst_Rsp_);
        swap(m_SRRSeatMemCshnAngPst_Rsp_, other_.m_SRRSeatMemCshnAngPst_Rsp_);
        swap(m_SRRSeatMemLegAngCshnExtPst_Rsp_, other_.m_SRRSeatMemLegAngCshnExtPst_Rsp_);
    }  

    bool SRRSeatMemPst_Rsp_struct::operator == (const SRRSeatMemPst_Rsp_struct& other_) const {
        if (m_SRRSeatMemPstPurpose_Rsp_ != other_.m_SRRSeatMemPstPurpose_Rsp_) {
            return false;
        }
        if (m_SRRSeatMemFBPst_Rsp_ != other_.m_SRRSeatMemFBPst_Rsp_) {
            return false;
        }
        if (m_SRRSeatMemBackrestPst_Rsp_ != other_.m_SRRSeatMemBackrestPst_Rsp_) {
            return false;
        }
        if (m_SRRSeatMemHgtPst_Rsp_ != other_.m_SRRSeatMemHgtPst_Rsp_) {
            return false;
        }
        if (m_SRRSeatMemCshnAngPst_Rsp_ != other_.m_SRRSeatMemCshnAngPst_Rsp_) {
            return false;
        }
        if (m_SRRSeatMemLegAngCshnExtPst_Rsp_ != other_.m_SRRSeatMemLegAngCshnExtPst_Rsp_) {
            return false;
        }
        return true;
    }
    bool SRRSeatMemPst_Rsp_struct::operator != (const SRRSeatMemPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SRRSeatMemPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SRRSeatMemPstPurpose_Rsp: " << (int)sample.SRRSeatMemPstPurpose_Rsp() <<", ";
        o << "SRRSeatMemFBPst_Rsp: " << (int)sample.SRRSeatMemFBPst_Rsp() <<", ";
        o << "SRRSeatMemBackrestPst_Rsp: " << (int)sample.SRRSeatMemBackrestPst_Rsp() <<", ";
        o << "SRRSeatMemHgtPst_Rsp: " << (int)sample.SRRSeatMemHgtPst_Rsp() <<", ";
        o << "SRRSeatMemCshnAngPst_Rsp: " << (int)sample.SRRSeatMemCshnAngPst_Rsp() <<", ";
        o << "SRRSeatMemLegAngCshnExtPst_Rsp: " << (int)sample.SRRSeatMemLegAngCshnExtPst_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- SteerSeatMemPst_Rsp_struct: 

    SteerSeatMemPst_Rsp_struct::SteerSeatMemPst_Rsp_struct() :
        m_SteerMemPstPurpose_Rsp_ (0) ,
        m_SteerMemTiltPst_Rsp_ (0) ,
        m_SteerMemTelePst_Rsp_ (0)  {
    }   

    SteerSeatMemPst_Rsp_struct::SteerSeatMemPst_Rsp_struct (
        uint8_t SteerMemPstPurpose_Rsp,
        uint8_t SteerMemTiltPst_Rsp,
        uint8_t SteerMemTelePst_Rsp)
        :
            m_SteerMemPstPurpose_Rsp_( SteerMemPstPurpose_Rsp ),
            m_SteerMemTiltPst_Rsp_( SteerMemTiltPst_Rsp ),
            m_SteerMemTelePst_Rsp_( SteerMemTelePst_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SteerSeatMemPst_Rsp_struct::SteerSeatMemPst_Rsp_struct(SteerSeatMemPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_SteerMemPstPurpose_Rsp_ (std::move(other_.m_SteerMemPstPurpose_Rsp_))
    ,
    m_SteerMemTiltPst_Rsp_ (std::move(other_.m_SteerMemTiltPst_Rsp_))
    ,
    m_SteerMemTelePst_Rsp_ (std::move(other_.m_SteerMemTelePst_Rsp_))
    {
    } 

    SteerSeatMemPst_Rsp_struct& SteerSeatMemPst_Rsp_struct::operator=(SteerSeatMemPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        SteerSeatMemPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SteerSeatMemPst_Rsp_struct::swap(SteerSeatMemPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SteerMemPstPurpose_Rsp_, other_.m_SteerMemPstPurpose_Rsp_);
        swap(m_SteerMemTiltPst_Rsp_, other_.m_SteerMemTiltPst_Rsp_);
        swap(m_SteerMemTelePst_Rsp_, other_.m_SteerMemTelePst_Rsp_);
    }  

    bool SteerSeatMemPst_Rsp_struct::operator == (const SteerSeatMemPst_Rsp_struct& other_) const {
        if (m_SteerMemPstPurpose_Rsp_ != other_.m_SteerMemPstPurpose_Rsp_) {
            return false;
        }
        if (m_SteerMemTiltPst_Rsp_ != other_.m_SteerMemTiltPst_Rsp_) {
            return false;
        }
        if (m_SteerMemTelePst_Rsp_ != other_.m_SteerMemTelePst_Rsp_) {
            return false;
        }
        return true;
    }
    bool SteerSeatMemPst_Rsp_struct::operator != (const SteerSeatMemPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SteerSeatMemPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SteerMemPstPurpose_Rsp: " << (int)sample.SteerMemPstPurpose_Rsp() <<", ";
        o << "SteerMemTiltPst_Rsp: " << (int)sample.SteerMemTiltPst_Rsp() <<", ";
        o << "SteerMemTelePst_Rsp: " << (int)sample.SteerMemTelePst_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- LExMirMemLRPst_Rsp_struct: 

    LExMirMemLRPst_Rsp_struct::LExMirMemLRPst_Rsp_struct() :
        m_LExMirMemUDPst_Rsp_ (0) ,
        m_LExMirMemLRPst_Rsp_ (0) ,
        m_LExMirMemLRPstPurpose_Rsp_ (0)  {
    }   

    LExMirMemLRPst_Rsp_struct::LExMirMemLRPst_Rsp_struct (
        uint8_t LExMirMemUDPst_Rsp,
        uint8_t LExMirMemLRPst_Rsp,
        uint8_t LExMirMemLRPstPurpose_Rsp)
        :
            m_LExMirMemUDPst_Rsp_( LExMirMemUDPst_Rsp ),
            m_LExMirMemLRPst_Rsp_( LExMirMemLRPst_Rsp ),
            m_LExMirMemLRPstPurpose_Rsp_( LExMirMemLRPstPurpose_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    LExMirMemLRPst_Rsp_struct::LExMirMemLRPst_Rsp_struct(LExMirMemLRPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_LExMirMemUDPst_Rsp_ (std::move(other_.m_LExMirMemUDPst_Rsp_))
    ,
    m_LExMirMemLRPst_Rsp_ (std::move(other_.m_LExMirMemLRPst_Rsp_))
    ,
    m_LExMirMemLRPstPurpose_Rsp_ (std::move(other_.m_LExMirMemLRPstPurpose_Rsp_))
    {
    } 

    LExMirMemLRPst_Rsp_struct& LExMirMemLRPst_Rsp_struct::operator=(LExMirMemLRPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        LExMirMemLRPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void LExMirMemLRPst_Rsp_struct::swap(LExMirMemLRPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LExMirMemUDPst_Rsp_, other_.m_LExMirMemUDPst_Rsp_);
        swap(m_LExMirMemLRPst_Rsp_, other_.m_LExMirMemLRPst_Rsp_);
        swap(m_LExMirMemLRPstPurpose_Rsp_, other_.m_LExMirMemLRPstPurpose_Rsp_);
    }  

    bool LExMirMemLRPst_Rsp_struct::operator == (const LExMirMemLRPst_Rsp_struct& other_) const {
        if (m_LExMirMemUDPst_Rsp_ != other_.m_LExMirMemUDPst_Rsp_) {
            return false;
        }
        if (m_LExMirMemLRPst_Rsp_ != other_.m_LExMirMemLRPst_Rsp_) {
            return false;
        }
        if (m_LExMirMemLRPstPurpose_Rsp_ != other_.m_LExMirMemLRPstPurpose_Rsp_) {
            return false;
        }
        return true;
    }
    bool LExMirMemLRPst_Rsp_struct::operator != (const LExMirMemLRPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const LExMirMemLRPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LExMirMemUDPst_Rsp: " << (int)sample.LExMirMemUDPst_Rsp() <<", ";
        o << "LExMirMemLRPst_Rsp: " << (int)sample.LExMirMemLRPst_Rsp() <<", ";
        o << "LExMirMemLRPstPurpose_Rsp: " << (int)sample.LExMirMemLRPstPurpose_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- RExMirMemLRPst_Rsp_struct: 

    RExMirMemLRPst_Rsp_struct::RExMirMemLRPst_Rsp_struct() :
        m_RExMirMemUDPst_Rsp_ (0) ,
        m_RExMirMemLRPst_Rsp_ (0) ,
        m_RExMirMemLRPstPurpose_Rsp_ (0)  {
    }   

    RExMirMemLRPst_Rsp_struct::RExMirMemLRPst_Rsp_struct (
        uint8_t RExMirMemUDPst_Rsp,
        uint8_t RExMirMemLRPst_Rsp,
        uint8_t RExMirMemLRPstPurpose_Rsp)
        :
            m_RExMirMemUDPst_Rsp_( RExMirMemUDPst_Rsp ),
            m_RExMirMemLRPst_Rsp_( RExMirMemLRPst_Rsp ),
            m_RExMirMemLRPstPurpose_Rsp_( RExMirMemLRPstPurpose_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    RExMirMemLRPst_Rsp_struct::RExMirMemLRPst_Rsp_struct(RExMirMemLRPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_RExMirMemUDPst_Rsp_ (std::move(other_.m_RExMirMemUDPst_Rsp_))
    ,
    m_RExMirMemLRPst_Rsp_ (std::move(other_.m_RExMirMemLRPst_Rsp_))
    ,
    m_RExMirMemLRPstPurpose_Rsp_ (std::move(other_.m_RExMirMemLRPstPurpose_Rsp_))
    {
    } 

    RExMirMemLRPst_Rsp_struct& RExMirMemLRPst_Rsp_struct::operator=(RExMirMemLRPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        RExMirMemLRPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void RExMirMemLRPst_Rsp_struct::swap(RExMirMemLRPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_RExMirMemUDPst_Rsp_, other_.m_RExMirMemUDPst_Rsp_);
        swap(m_RExMirMemLRPst_Rsp_, other_.m_RExMirMemLRPst_Rsp_);
        swap(m_RExMirMemLRPstPurpose_Rsp_, other_.m_RExMirMemLRPstPurpose_Rsp_);
    }  

    bool RExMirMemLRPst_Rsp_struct::operator == (const RExMirMemLRPst_Rsp_struct& other_) const {
        if (m_RExMirMemUDPst_Rsp_ != other_.m_RExMirMemUDPst_Rsp_) {
            return false;
        }
        if (m_RExMirMemLRPst_Rsp_ != other_.m_RExMirMemLRPst_Rsp_) {
            return false;
        }
        if (m_RExMirMemLRPstPurpose_Rsp_ != other_.m_RExMirMemLRPstPurpose_Rsp_) {
            return false;
        }
        return true;
    }
    bool RExMirMemLRPst_Rsp_struct::operator != (const RExMirMemLRPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const RExMirMemLRPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "RExMirMemUDPst_Rsp: " << (int)sample.RExMirMemUDPst_Rsp() <<", ";
        o << "RExMirMemLRPst_Rsp: " << (int)sample.RExMirMemLRPst_Rsp() <<", ";
        o << "RExMirMemLRPstPurpose_Rsp: " << (int)sample.RExMirMemLRPstPurpose_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- BdMemPst_Rsp_struct: 

    BdMemPst_Rsp_struct::BdMemPst_Rsp_struct()  {
    }   

    BdMemPst_Rsp_struct::BdMemPst_Rsp_struct (
        const ::dds::core::array< BodyDomain::FLSeatMemPst_Rsp_struct, 5L>& FLSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::FRSeatMemPst_Rsp_struct, 4L>& FRSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::SRLSeatMemPst_Rsp_struct, 2L>& SRLSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::SRRSeatMemPst_Rsp_struct, 2L>& SRRSeatMemPst_Req,
        const ::dds::core::array< BodyDomain::SteerSeatMemPst_Rsp_struct, 5L>& SteerMemPst_Req,
        const ::dds::core::array< BodyDomain::LExMirMemLRPst_Rsp_struct, 8L>& LExMirMemLRPst_Req,
        const ::dds::core::array< BodyDomain::RExMirMemLRPst_Rsp_struct, 8L>& RExMirMemLRPst_Req)
        :
            m_FLSeatMemPst_Req_( FLSeatMemPst_Req ),
            m_FRSeatMemPst_Req_( FRSeatMemPst_Req ),
            m_SRLSeatMemPst_Req_( SRLSeatMemPst_Req ),
            m_SRRSeatMemPst_Req_( SRRSeatMemPst_Req ),
            m_SteerMemPst_Req_( SteerMemPst_Req ),
            m_LExMirMemLRPst_Req_( LExMirMemLRPst_Req ),
            m_RExMirMemLRPst_Req_( RExMirMemLRPst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdMemPst_Rsp_struct::BdMemPst_Rsp_struct(BdMemPst_Rsp_struct&& other_) OMG_NOEXCEPT  :m_FLSeatMemPst_Req_ (std::move(other_.m_FLSeatMemPst_Req_))
    ,
    m_FRSeatMemPst_Req_ (std::move(other_.m_FRSeatMemPst_Req_))
    ,
    m_SRLSeatMemPst_Req_ (std::move(other_.m_SRLSeatMemPst_Req_))
    ,
    m_SRRSeatMemPst_Req_ (std::move(other_.m_SRRSeatMemPst_Req_))
    ,
    m_SteerMemPst_Req_ (std::move(other_.m_SteerMemPst_Req_))
    ,
    m_LExMirMemLRPst_Req_ (std::move(other_.m_LExMirMemLRPst_Req_))
    ,
    m_RExMirMemLRPst_Req_ (std::move(other_.m_RExMirMemLRPst_Req_))
    {
    } 

    BdMemPst_Rsp_struct& BdMemPst_Rsp_struct::operator=(BdMemPst_Rsp_struct&&  other_) OMG_NOEXCEPT {
        BdMemPst_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdMemPst_Rsp_struct::swap(BdMemPst_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatMemPst_Req_, other_.m_FLSeatMemPst_Req_);
        swap(m_FRSeatMemPst_Req_, other_.m_FRSeatMemPst_Req_);
        swap(m_SRLSeatMemPst_Req_, other_.m_SRLSeatMemPst_Req_);
        swap(m_SRRSeatMemPst_Req_, other_.m_SRRSeatMemPst_Req_);
        swap(m_SteerMemPst_Req_, other_.m_SteerMemPst_Req_);
        swap(m_LExMirMemLRPst_Req_, other_.m_LExMirMemLRPst_Req_);
        swap(m_RExMirMemLRPst_Req_, other_.m_RExMirMemLRPst_Req_);
    }  

    bool BdMemPst_Rsp_struct::operator == (const BdMemPst_Rsp_struct& other_) const {
        if (m_FLSeatMemPst_Req_ != other_.m_FLSeatMemPst_Req_) {
            return false;
        }
        if (m_FRSeatMemPst_Req_ != other_.m_FRSeatMemPst_Req_) {
            return false;
        }
        if (m_SRLSeatMemPst_Req_ != other_.m_SRLSeatMemPst_Req_) {
            return false;
        }
        if (m_SRRSeatMemPst_Req_ != other_.m_SRRSeatMemPst_Req_) {
            return false;
        }
        if (m_SteerMemPst_Req_ != other_.m_SteerMemPst_Req_) {
            return false;
        }
        if (m_LExMirMemLRPst_Req_ != other_.m_LExMirMemLRPst_Req_) {
            return false;
        }
        if (m_RExMirMemLRPst_Req_ != other_.m_RExMirMemLRPst_Req_) {
            return false;
        }
        return true;
    }
    bool BdMemPst_Rsp_struct::operator != (const BdMemPst_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdMemPst_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatMemPst_Req: " << sample.FLSeatMemPst_Req()<<", ";
        o << "FRSeatMemPst_Req: " << sample.FRSeatMemPst_Req()<<", ";
        o << "SRLSeatMemPst_Req: " << sample.SRLSeatMemPst_Req()<<", ";
        o << "SRRSeatMemPst_Req: " << sample.SRRSeatMemPst_Req()<<", ";
        o << "SteerMemPst_Req: " << sample.SteerMemPst_Req()<<", ";
        o << "LExMirMemLRPst_Req: " << sample.LExMirMemLRPst_Req()<<", ";
        o << "RExMirMemLRPst_Req: " << sample.RExMirMemLRPst_Req() ;
        o <<"]";
        return o;
    }

    // ---- BdPst_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_Srv_Req_Union::BdPst_Srv_Req_Union(BdPst_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BdPst_Set( std::move(other_.BdPst_Set()));
            } break;
            case 1:
            {  
                BdPst_Get( std::move(other_.BdPst_Get()));
            } break;
            case 2:
            {  
                BdPst_Ctrl( std::move(other_.BdPst_Ctrl()));
            } break;
            case 3:
            {  
                BdPst_St_Get( std::move(other_.BdPst_St_Get()));
            } break;
            case 4:
            {  
                BdMemPst_Set( std::move(other_.BdMemPst_Set()));
            } break;
            case 5:
            {  
                BdMemPst_Get( std::move(other_.BdMemPst_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    BdPst_Srv_Req_Union& BdPst_Srv_Req_Union::operator=(BdPst_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        BdPst_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    BdPst_Srv_Req_Union::Union_::Union_()  {
    }

    BdPst_Srv_Req_Union::Union_::Union_(
        const BodyDomain::BdPst_Set_struct& BdPst_Set,
        const BodyDomain::BdPst_Get_struct& BdPst_Get,
        const BodyDomain::BdPst_Ctrl_struct& BdPst_Ctrl,
        const BodyDomain::BdPst_St_Get_struct& BdPst_St_Get,
        const BodyDomain::BdMemPst_Set_struct& BdMemPst_Set,
        const BodyDomain::BdMemPst_Get_struct& BdMemPst_Get)
        :
            m_BdPst_Set_( BdPst_Set ),
            m_BdPst_Get_( BdPst_Get ),
            m_BdPst_Ctrl_( BdPst_Ctrl ),
            m_BdPst_St_Get_( BdPst_St_Get ),
            m_BdMemPst_Set_( BdMemPst_Set ),
            m_BdMemPst_Get_( BdMemPst_Get ) {
    }

    BdPst_Srv_Req_Union::BdPst_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void BdPst_Srv_Req_Union::swap(BdPst_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BdPst_Set_, other_.m_u_.m_BdPst_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BdPst_Get_, other_.m_u_.m_BdPst_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BdPst_Ctrl_, other_.m_u_.m_BdPst_Ctrl_);
            } break;
            case 3:
            {  
                swap(m_u_.m_BdPst_St_Get_, other_.m_u_.m_BdPst_St_Get_);
            } break;
            case 4:
            {  
                swap(m_u_.m_BdMemPst_Set_, other_.m_u_.m_BdMemPst_Set_);
            } break;
            case 5:
            {  
                swap(m_u_.m_BdMemPst_Get_, other_.m_u_.m_BdMemPst_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BdPst_Set_, other_.m_u_.m_BdPst_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BdPst_Get_, other_.m_u_.m_BdPst_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BdPst_Ctrl_, other_.m_u_.m_BdPst_Ctrl_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_BdPst_St_Get_, other_.m_u_.m_BdPst_St_Get_);
                } break;
                case 4:
                {  
                    swap(m_u_.m_BdMemPst_Set_, other_.m_u_.m_BdMemPst_Set_);
                } break;
                case 5:
                {  
                    swap(m_u_.m_BdMemPst_Get_, other_.m_u_.m_BdMemPst_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool BdPst_Srv_Req_Union::operator == (const BdPst_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BdPst_Set_ != other_.m_u_.m_BdPst_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BdPst_Get_ != other_.m_u_.m_BdPst_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BdPst_Ctrl_ != other_.m_u_.m_BdPst_Ctrl_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_BdPst_St_Get_ != other_.m_u_.m_BdPst_St_Get_) {
                    return false;
                }
            } break ;
            case 4:
            {  
                if ( m_u_.m_BdMemPst_Set_ != other_.m_u_.m_BdMemPst_Set_) {
                    return false;
                }
            } break ;
            case 5:
            {  
                if ( m_u_.m_BdMemPst_Get_ != other_.m_u_.m_BdMemPst_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool BdPst_Srv_Req_Union::operator != (const BdPst_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BdPst_Set: " << sample.BdPst_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "BdPst_Get: " << sample.BdPst_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "BdPst_Ctrl: " << sample.BdPst_Ctrl()<<", ";
            } break ;
            case 3:
            {  
                o << "BdPst_St_Get: " << sample.BdPst_St_Get()<<", ";
            } break ;
            case 4:
            {  
                o << "BdMemPst_Set: " << sample.BdMemPst_Set()<<", ";
            } break ;
            case 5:
            {  
                o << "BdMemPst_Get: " << sample.BdMemPst_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t BdPst_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- BdPst_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdPst_Srv_Resp_Union::BdPst_Srv_Resp_Union(BdPst_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BdPst_Set_SOA( std::move(other_.BdPst_Set_SOA()));
            } break;
            case 1:
            {  
                BdPst_Get_SOA( std::move(other_.BdPst_Get_SOA()));
            } break;
            case 2:
            {  
                BdPst_Ctrl_SOA( std::move(other_.BdPst_Ctrl_SOA()));
            } break;
            case 3:
            {  
                BdPst_St_Get_SOA( std::move(other_.BdPst_St_Get_SOA()));
            } break;
            case 4:
            {  
                BdMemPst_Set_SOA( std::move(other_.BdMemPst_Set_SOA()));
            } break;
            case 5:
            {  
                BdMemPst_Get_SOA( std::move(other_.BdMemPst_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    BdPst_Srv_Resp_Union& BdPst_Srv_Resp_Union::operator=(BdPst_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        BdPst_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    BdPst_Srv_Resp_Union::Union_::Union_()  {
    }

    BdPst_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::BdPst_Rsp_struct& BdPst_Set_SOA,
        const BodyDomain::BdPst_Rsp_struct& BdPst_Get_SOA,
        const BodyDomain::BdPst_Ctrl_SOA_struct& BdPst_Ctrl_SOA,
        const BodyDomain::BdPst_St_struct& BdPst_St_Get_SOA,
        const BodyDomain::BdMemPst_Rsp_struct& BdMemPst_Set_SOA,
        const BodyDomain::BdMemPst_Rsp_struct& BdMemPst_Get_SOA)
        :
            m_BdPst_Set_SOA_( BdPst_Set_SOA ),
            m_BdPst_Get_SOA_( BdPst_Get_SOA ),
            m_BdPst_Ctrl_SOA_( BdPst_Ctrl_SOA ),
            m_BdPst_St_Get_SOA_( BdPst_St_Get_SOA ),
            m_BdMemPst_Set_SOA_( BdMemPst_Set_SOA ),
            m_BdMemPst_Get_SOA_( BdMemPst_Get_SOA ) {
    }

    BdPst_Srv_Resp_Union::BdPst_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void BdPst_Srv_Resp_Union::swap(BdPst_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BdPst_Set_SOA_, other_.m_u_.m_BdPst_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BdPst_Get_SOA_, other_.m_u_.m_BdPst_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BdPst_Ctrl_SOA_, other_.m_u_.m_BdPst_Ctrl_SOA_);
            } break;
            case 3:
            {  
                swap(m_u_.m_BdPst_St_Get_SOA_, other_.m_u_.m_BdPst_St_Get_SOA_);
            } break;
            case 4:
            {  
                swap(m_u_.m_BdMemPst_Set_SOA_, other_.m_u_.m_BdMemPst_Set_SOA_);
            } break;
            case 5:
            {  
                swap(m_u_.m_BdMemPst_Get_SOA_, other_.m_u_.m_BdMemPst_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BdPst_Set_SOA_, other_.m_u_.m_BdPst_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BdPst_Get_SOA_, other_.m_u_.m_BdPst_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BdPst_Ctrl_SOA_, other_.m_u_.m_BdPst_Ctrl_SOA_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_BdPst_St_Get_SOA_, other_.m_u_.m_BdPst_St_Get_SOA_);
                } break;
                case 4:
                {  
                    swap(m_u_.m_BdMemPst_Set_SOA_, other_.m_u_.m_BdMemPst_Set_SOA_);
                } break;
                case 5:
                {  
                    swap(m_u_.m_BdMemPst_Get_SOA_, other_.m_u_.m_BdMemPst_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool BdPst_Srv_Resp_Union::operator == (const BdPst_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BdPst_Set_SOA_ != other_.m_u_.m_BdPst_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BdPst_Get_SOA_ != other_.m_u_.m_BdPst_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BdPst_Ctrl_SOA_ != other_.m_u_.m_BdPst_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_BdPst_St_Get_SOA_ != other_.m_u_.m_BdPst_St_Get_SOA_) {
                    return false;
                }
            } break ;
            case 4:
            {  
                if ( m_u_.m_BdMemPst_Set_SOA_ != other_.m_u_.m_BdMemPst_Set_SOA_) {
                    return false;
                }
            } break ;
            case 5:
            {  
                if ( m_u_.m_BdMemPst_Get_SOA_ != other_.m_u_.m_BdMemPst_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool BdPst_Srv_Resp_Union::operator != (const BdPst_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdPst_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BdPst_Set_SOA: " << sample.BdPst_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "BdPst_Get_SOA: " << sample.BdPst_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "BdPst_Ctrl_SOA: " << sample.BdPst_Ctrl_SOA()<<", ";
            } break ;
            case 3:
            {  
                o << "BdPst_St_Get_SOA: " << sample.BdPst_St_Get_SOA()<<", ";
            } break ;
            case 4:
            {  
                o << "BdMemPst_Set_SOA: " << sample.BdMemPst_Set_SOA()<<", ";
            } break ;
            case 5:
            {  
                o << "BdMemPst_Get_SOA: " << sample.BdMemPst_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t BdPst_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- StAdj_Ctrl_struct: 

    StAdj_Ctrl_struct::StAdj_Ctrl_struct() :
        m_FLSeatFBAdj_Act_ (0) ,
        m_FLSeatBackrestAdj_Act_ (0) ,
        m_FLSeatHgtAdj_Act_ (0) ,
        m_FLSeatCshnAngAdj_Act_ (0) ,
        m_FLLegAngCshnExtAdj_Act_ (0) ,
        m_FLSeatLegLengthAdj_Act_ (0) ,
        m_FRSeatFBAdj_Act_ (0) ,
        m_FRSeatBackrestAdj_Act_ (0) ,
        m_FRSeatHgtAdj_Act_ (0) ,
        m_FRSeatCshnAngAdj_Act_ (0) ,
        m_FRLegAngCshnExtAdj_Act_ (0) ,
        m_FRSeatLegLengthAdj_Act_ (0) ,
        m_FLSeatFBPst_Req_ (0) ,
        m_FLSeatBackresPst_Req_ (0) ,
        m_FLSeatHgtPst_Req_ (0) ,
        m_FLSeatCshnAngPst_Req_ (0) ,
        m_FLLegAngCshnExtPst_Req_ (0) ,
        m_FLSeatLegLengthPst_Req_ (0) ,
        m_FRSeatFBPst_Req_ (0) ,
        m_FRSeatBackrestPst_Req_ (0) ,
        m_FRSeatHgtPst_Req_ (0) ,
        m_FRSeatCshnAngPst_Req_ (0) ,
        m_FRLegAngCshnExtPst_Req_ (0) ,
        m_FRSeatLegLengthPst_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    StAdj_Ctrl_struct::StAdj_Ctrl_struct (
        uint8_t FLSeatFBAdj_Act,
        uint8_t FLSeatBackrestAdj_Act,
        uint8_t FLSeatHgtAdj_Act,
        uint8_t FLSeatCshnAngAdj_Act,
        uint8_t FLLegAngCshnExtAdj_Act,
        uint8_t FLSeatLegLengthAdj_Act,
        uint8_t FRSeatFBAdj_Act,
        uint8_t FRSeatBackrestAdj_Act,
        uint8_t FRSeatHgtAdj_Act,
        uint8_t FRSeatCshnAngAdj_Act,
        uint8_t FRLegAngCshnExtAdj_Act,
        uint8_t FRSeatLegLengthAdj_Act,
        uint8_t FLSeatFBPst_Req,
        uint8_t FLSeatBackresPst_Req,
        uint8_t FLSeatHgtPst_Req,
        uint8_t FLSeatCshnAngPst_Req,
        uint8_t FLLegAngCshnExtPst_Req,
        uint8_t FLSeatLegLengthPst_Req,
        uint8_t FRSeatFBPst_Req,
        uint8_t FRSeatBackrestPst_Req,
        uint8_t FRSeatHgtPst_Req,
        uint8_t FRSeatCshnAngPst_Req,
        uint8_t FRLegAngCshnExtPst_Req,
        uint8_t FRSeatLegLengthPst_Req,
        const std::string& CtrlSource)
        :
            m_FLSeatFBAdj_Act_( FLSeatFBAdj_Act ),
            m_FLSeatBackrestAdj_Act_( FLSeatBackrestAdj_Act ),
            m_FLSeatHgtAdj_Act_( FLSeatHgtAdj_Act ),
            m_FLSeatCshnAngAdj_Act_( FLSeatCshnAngAdj_Act ),
            m_FLLegAngCshnExtAdj_Act_( FLLegAngCshnExtAdj_Act ),
            m_FLSeatLegLengthAdj_Act_( FLSeatLegLengthAdj_Act ),
            m_FRSeatFBAdj_Act_( FRSeatFBAdj_Act ),
            m_FRSeatBackrestAdj_Act_( FRSeatBackrestAdj_Act ),
            m_FRSeatHgtAdj_Act_( FRSeatHgtAdj_Act ),
            m_FRSeatCshnAngAdj_Act_( FRSeatCshnAngAdj_Act ),
            m_FRLegAngCshnExtAdj_Act_( FRLegAngCshnExtAdj_Act ),
            m_FRSeatLegLengthAdj_Act_( FRSeatLegLengthAdj_Act ),
            m_FLSeatFBPst_Req_( FLSeatFBPst_Req ),
            m_FLSeatBackresPst_Req_( FLSeatBackresPst_Req ),
            m_FLSeatHgtPst_Req_( FLSeatHgtPst_Req ),
            m_FLSeatCshnAngPst_Req_( FLSeatCshnAngPst_Req ),
            m_FLLegAngCshnExtPst_Req_( FLLegAngCshnExtPst_Req ),
            m_FLSeatLegLengthPst_Req_( FLSeatLegLengthPst_Req ),
            m_FRSeatFBPst_Req_( FRSeatFBPst_Req ),
            m_FRSeatBackrestPst_Req_( FRSeatBackrestPst_Req ),
            m_FRSeatHgtPst_Req_( FRSeatHgtPst_Req ),
            m_FRSeatCshnAngPst_Req_( FRSeatCshnAngPst_Req ),
            m_FRLegAngCshnExtPst_Req_( FRLegAngCshnExtPst_Req ),
            m_FRSeatLegLengthPst_Req_( FRSeatLegLengthPst_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    StAdj_Ctrl_struct::StAdj_Ctrl_struct(StAdj_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_FLSeatFBAdj_Act_ (std::move(other_.m_FLSeatFBAdj_Act_))
    ,
    m_FLSeatBackrestAdj_Act_ (std::move(other_.m_FLSeatBackrestAdj_Act_))
    ,
    m_FLSeatHgtAdj_Act_ (std::move(other_.m_FLSeatHgtAdj_Act_))
    ,
    m_FLSeatCshnAngAdj_Act_ (std::move(other_.m_FLSeatCshnAngAdj_Act_))
    ,
    m_FLLegAngCshnExtAdj_Act_ (std::move(other_.m_FLLegAngCshnExtAdj_Act_))
    ,
    m_FLSeatLegLengthAdj_Act_ (std::move(other_.m_FLSeatLegLengthAdj_Act_))
    ,
    m_FRSeatFBAdj_Act_ (std::move(other_.m_FRSeatFBAdj_Act_))
    ,
    m_FRSeatBackrestAdj_Act_ (std::move(other_.m_FRSeatBackrestAdj_Act_))
    ,
    m_FRSeatHgtAdj_Act_ (std::move(other_.m_FRSeatHgtAdj_Act_))
    ,
    m_FRSeatCshnAngAdj_Act_ (std::move(other_.m_FRSeatCshnAngAdj_Act_))
    ,
    m_FRLegAngCshnExtAdj_Act_ (std::move(other_.m_FRLegAngCshnExtAdj_Act_))
    ,
    m_FRSeatLegLengthAdj_Act_ (std::move(other_.m_FRSeatLegLengthAdj_Act_))
    ,
    m_FLSeatFBPst_Req_ (std::move(other_.m_FLSeatFBPst_Req_))
    ,
    m_FLSeatBackresPst_Req_ (std::move(other_.m_FLSeatBackresPst_Req_))
    ,
    m_FLSeatHgtPst_Req_ (std::move(other_.m_FLSeatHgtPst_Req_))
    ,
    m_FLSeatCshnAngPst_Req_ (std::move(other_.m_FLSeatCshnAngPst_Req_))
    ,
    m_FLLegAngCshnExtPst_Req_ (std::move(other_.m_FLLegAngCshnExtPst_Req_))
    ,
    m_FLSeatLegLengthPst_Req_ (std::move(other_.m_FLSeatLegLengthPst_Req_))
    ,
    m_FRSeatFBPst_Req_ (std::move(other_.m_FRSeatFBPst_Req_))
    ,
    m_FRSeatBackrestPst_Req_ (std::move(other_.m_FRSeatBackrestPst_Req_))
    ,
    m_FRSeatHgtPst_Req_ (std::move(other_.m_FRSeatHgtPst_Req_))
    ,
    m_FRSeatCshnAngPst_Req_ (std::move(other_.m_FRSeatCshnAngPst_Req_))
    ,
    m_FRLegAngCshnExtPst_Req_ (std::move(other_.m_FRLegAngCshnExtPst_Req_))
    ,
    m_FRSeatLegLengthPst_Req_ (std::move(other_.m_FRSeatLegLengthPst_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    StAdj_Ctrl_struct& StAdj_Ctrl_struct::operator=(StAdj_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        StAdj_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void StAdj_Ctrl_struct::swap(StAdj_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatFBAdj_Act_, other_.m_FLSeatFBAdj_Act_);
        swap(m_FLSeatBackrestAdj_Act_, other_.m_FLSeatBackrestAdj_Act_);
        swap(m_FLSeatHgtAdj_Act_, other_.m_FLSeatHgtAdj_Act_);
        swap(m_FLSeatCshnAngAdj_Act_, other_.m_FLSeatCshnAngAdj_Act_);
        swap(m_FLLegAngCshnExtAdj_Act_, other_.m_FLLegAngCshnExtAdj_Act_);
        swap(m_FLSeatLegLengthAdj_Act_, other_.m_FLSeatLegLengthAdj_Act_);
        swap(m_FRSeatFBAdj_Act_, other_.m_FRSeatFBAdj_Act_);
        swap(m_FRSeatBackrestAdj_Act_, other_.m_FRSeatBackrestAdj_Act_);
        swap(m_FRSeatHgtAdj_Act_, other_.m_FRSeatHgtAdj_Act_);
        swap(m_FRSeatCshnAngAdj_Act_, other_.m_FRSeatCshnAngAdj_Act_);
        swap(m_FRLegAngCshnExtAdj_Act_, other_.m_FRLegAngCshnExtAdj_Act_);
        swap(m_FRSeatLegLengthAdj_Act_, other_.m_FRSeatLegLengthAdj_Act_);
        swap(m_FLSeatFBPst_Req_, other_.m_FLSeatFBPst_Req_);
        swap(m_FLSeatBackresPst_Req_, other_.m_FLSeatBackresPst_Req_);
        swap(m_FLSeatHgtPst_Req_, other_.m_FLSeatHgtPst_Req_);
        swap(m_FLSeatCshnAngPst_Req_, other_.m_FLSeatCshnAngPst_Req_);
        swap(m_FLLegAngCshnExtPst_Req_, other_.m_FLLegAngCshnExtPst_Req_);
        swap(m_FLSeatLegLengthPst_Req_, other_.m_FLSeatLegLengthPst_Req_);
        swap(m_FRSeatFBPst_Req_, other_.m_FRSeatFBPst_Req_);
        swap(m_FRSeatBackrestPst_Req_, other_.m_FRSeatBackrestPst_Req_);
        swap(m_FRSeatHgtPst_Req_, other_.m_FRSeatHgtPst_Req_);
        swap(m_FRSeatCshnAngPst_Req_, other_.m_FRSeatCshnAngPst_Req_);
        swap(m_FRLegAngCshnExtPst_Req_, other_.m_FRLegAngCshnExtPst_Req_);
        swap(m_FRSeatLegLengthPst_Req_, other_.m_FRSeatLegLengthPst_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool StAdj_Ctrl_struct::operator == (const StAdj_Ctrl_struct& other_) const {
        if (m_FLSeatFBAdj_Act_ != other_.m_FLSeatFBAdj_Act_) {
            return false;
        }
        if (m_FLSeatBackrestAdj_Act_ != other_.m_FLSeatBackrestAdj_Act_) {
            return false;
        }
        if (m_FLSeatHgtAdj_Act_ != other_.m_FLSeatHgtAdj_Act_) {
            return false;
        }
        if (m_FLSeatCshnAngAdj_Act_ != other_.m_FLSeatCshnAngAdj_Act_) {
            return false;
        }
        if (m_FLLegAngCshnExtAdj_Act_ != other_.m_FLLegAngCshnExtAdj_Act_) {
            return false;
        }
        if (m_FLSeatLegLengthAdj_Act_ != other_.m_FLSeatLegLengthAdj_Act_) {
            return false;
        }
        if (m_FRSeatFBAdj_Act_ != other_.m_FRSeatFBAdj_Act_) {
            return false;
        }
        if (m_FRSeatBackrestAdj_Act_ != other_.m_FRSeatBackrestAdj_Act_) {
            return false;
        }
        if (m_FRSeatHgtAdj_Act_ != other_.m_FRSeatHgtAdj_Act_) {
            return false;
        }
        if (m_FRSeatCshnAngAdj_Act_ != other_.m_FRSeatCshnAngAdj_Act_) {
            return false;
        }
        if (m_FRLegAngCshnExtAdj_Act_ != other_.m_FRLegAngCshnExtAdj_Act_) {
            return false;
        }
        if (m_FRSeatLegLengthAdj_Act_ != other_.m_FRSeatLegLengthAdj_Act_) {
            return false;
        }
        if (m_FLSeatFBPst_Req_ != other_.m_FLSeatFBPst_Req_) {
            return false;
        }
        if (m_FLSeatBackresPst_Req_ != other_.m_FLSeatBackresPst_Req_) {
            return false;
        }
        if (m_FLSeatHgtPst_Req_ != other_.m_FLSeatHgtPst_Req_) {
            return false;
        }
        if (m_FLSeatCshnAngPst_Req_ != other_.m_FLSeatCshnAngPst_Req_) {
            return false;
        }
        if (m_FLLegAngCshnExtPst_Req_ != other_.m_FLLegAngCshnExtPst_Req_) {
            return false;
        }
        if (m_FLSeatLegLengthPst_Req_ != other_.m_FLSeatLegLengthPst_Req_) {
            return false;
        }
        if (m_FRSeatFBPst_Req_ != other_.m_FRSeatFBPst_Req_) {
            return false;
        }
        if (m_FRSeatBackrestPst_Req_ != other_.m_FRSeatBackrestPst_Req_) {
            return false;
        }
        if (m_FRSeatHgtPst_Req_ != other_.m_FRSeatHgtPst_Req_) {
            return false;
        }
        if (m_FRSeatCshnAngPst_Req_ != other_.m_FRSeatCshnAngPst_Req_) {
            return false;
        }
        if (m_FRLegAngCshnExtPst_Req_ != other_.m_FRLegAngCshnExtPst_Req_) {
            return false;
        }
        if (m_FRSeatLegLengthPst_Req_ != other_.m_FRSeatLegLengthPst_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool StAdj_Ctrl_struct::operator != (const StAdj_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const StAdj_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatFBAdj_Act: " << (int)sample.FLSeatFBAdj_Act() <<", ";
        o << "FLSeatBackrestAdj_Act: " << (int)sample.FLSeatBackrestAdj_Act() <<", ";
        o << "FLSeatHgtAdj_Act: " << (int)sample.FLSeatHgtAdj_Act() <<", ";
        o << "FLSeatCshnAngAdj_Act: " << (int)sample.FLSeatCshnAngAdj_Act() <<", ";
        o << "FLLegAngCshnExtAdj_Act: " << (int)sample.FLLegAngCshnExtAdj_Act() <<", ";
        o << "FLSeatLegLengthAdj_Act: " << (int)sample.FLSeatLegLengthAdj_Act() <<", ";
        o << "FRSeatFBAdj_Act: " << (int)sample.FRSeatFBAdj_Act() <<", ";
        o << "FRSeatBackrestAdj_Act: " << (int)sample.FRSeatBackrestAdj_Act() <<", ";
        o << "FRSeatHgtAdj_Act: " << (int)sample.FRSeatHgtAdj_Act() <<", ";
        o << "FRSeatCshnAngAdj_Act: " << (int)sample.FRSeatCshnAngAdj_Act() <<", ";
        o << "FRLegAngCshnExtAdj_Act: " << (int)sample.FRLegAngCshnExtAdj_Act() <<", ";
        o << "FRSeatLegLengthAdj_Act: " << (int)sample.FRSeatLegLengthAdj_Act() <<", ";
        o << "FLSeatFBPst_Req: " << (int)sample.FLSeatFBPst_Req() <<", ";
        o << "FLSeatBackresPst_Req: " << (int)sample.FLSeatBackresPst_Req() <<", ";
        o << "FLSeatHgtPst_Req: " << (int)sample.FLSeatHgtPst_Req() <<", ";
        o << "FLSeatCshnAngPst_Req: " << (int)sample.FLSeatCshnAngPst_Req() <<", ";
        o << "FLLegAngCshnExtPst_Req: " << (int)sample.FLLegAngCshnExtPst_Req() <<", ";
        o << "FLSeatLegLengthPst_Req: " << (int)sample.FLSeatLegLengthPst_Req() <<", ";
        o << "FRSeatFBPst_Req: " << (int)sample.FRSeatFBPst_Req() <<", ";
        o << "FRSeatBackrestPst_Req: " << (int)sample.FRSeatBackrestPst_Req() <<", ";
        o << "FRSeatHgtPst_Req: " << (int)sample.FRSeatHgtPst_Req() <<", ";
        o << "FRSeatCshnAngPst_Req: " << (int)sample.FRSeatCshnAngPst_Req() <<", ";
        o << "FRLegAngCshnExtPst_Req: " << (int)sample.FRLegAngCshnExtPst_Req() <<", ";
        o << "FRSeatLegLengthPst_Req: " << (int)sample.FRSeatLegLengthPst_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- StAdj_Ctrl_SOA_struct: 

    StAdj_Ctrl_SOA_struct::StAdj_Ctrl_SOA_struct() :
        m_StAdj_Ctrl_SOA_u8_ (0)  {
    }   

    StAdj_Ctrl_SOA_struct::StAdj_Ctrl_SOA_struct (
        uint8_t StAdj_Ctrl_SOA_u8)
        :
            m_StAdj_Ctrl_SOA_u8_( StAdj_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    StAdj_Ctrl_SOA_struct::StAdj_Ctrl_SOA_struct(StAdj_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_StAdj_Ctrl_SOA_u8_ (std::move(other_.m_StAdj_Ctrl_SOA_u8_))
    {
    } 

    StAdj_Ctrl_SOA_struct& StAdj_Ctrl_SOA_struct::operator=(StAdj_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        StAdj_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void StAdj_Ctrl_SOA_struct::swap(StAdj_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_StAdj_Ctrl_SOA_u8_, other_.m_StAdj_Ctrl_SOA_u8_);
    }  

    bool StAdj_Ctrl_SOA_struct::operator == (const StAdj_Ctrl_SOA_struct& other_) const {
        if (m_StAdj_Ctrl_SOA_u8_ != other_.m_StAdj_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool StAdj_Ctrl_SOA_struct::operator != (const StAdj_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const StAdj_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "StAdj_Ctrl_SOA_u8: " << (int)sample.StAdj_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- StAdj_St_struct: 

    StAdj_St_struct::StAdj_St_struct() :
        m_FLSeatFBMv_St_ (0) ,
        m_FLSeatBackrestMv_St_ (0) ,
        m_FLSeatHgtMv_St_ (0) ,
        m_FLSeatCshnAngMv_St_ (0) ,
        m_FLLegAngCshnExtMv_St_ (0) ,
        m_FLSeatLegLengthMv_St_ (0) ,
        m_FRSeatFBMv_St_ (0) ,
        m_FRSeatBackrestMv_St_ (0) ,
        m_FRSeatHgtMv_St_ (0) ,
        m_FRSeatCshnAngMv_St_ (0) ,
        m_FRLegAngCshnExtMv_St_ (0) ,
        m_FRSeatLegLengthMv_St_ (0) ,
        m_FLSeatFBPst_Val_ (0) ,
        m_FLSeatBackrestPst_Val_ (0) ,
        m_FLSeatHgtPst_Val_ (0) ,
        m_FLSeatCshnAngPst_Val_ (0) ,
        m_FLLegAngCshnExtPst_Val_ (0) ,
        m_FLSeatLegLengthPst_Val_ (0) ,
        m_FRSeatFBPst_Val_ (0) ,
        m_FRSeatBackrestPst_Val_ (0) ,
        m_FRSeatHgtPst_Val_ (0) ,
        m_FRSeatCshnAngPst_Val_ (0) ,
        m_FRLegAngCshnExtPst_Val_ (0) ,
        m_FRSeatLegLengthPst_Val_ (0)  {
    }   

    StAdj_St_struct::StAdj_St_struct (
        uint8_t FLSeatFBMv_St,
        uint8_t FLSeatBackrestMv_St,
        uint8_t FLSeatHgtMv_St,
        uint8_t FLSeatCshnAngMv_St,
        uint8_t FLLegAngCshnExtMv_St,
        uint8_t FLSeatLegLengthMv_St,
        uint8_t FRSeatFBMv_St,
        uint8_t FRSeatBackrestMv_St,
        uint8_t FRSeatHgtMv_St,
        uint8_t FRSeatCshnAngMv_St,
        uint8_t FRLegAngCshnExtMv_St,
        uint8_t FRSeatLegLengthMv_St,
        uint8_t FLSeatFBPst_Val,
        uint8_t FLSeatBackrestPst_Val,
        uint8_t FLSeatHgtPst_Val,
        uint8_t FLSeatCshnAngPst_Val,
        uint8_t FLLegAngCshnExtPst_Val,
        uint8_t FLSeatLegLengthPst_Val,
        uint8_t FRSeatFBPst_Val,
        uint8_t FRSeatBackrestPst_Val,
        uint8_t FRSeatHgtPst_Val,
        uint8_t FRSeatCshnAngPst_Val,
        uint8_t FRLegAngCshnExtPst_Val,
        uint8_t FRSeatLegLengthPst_Val)
        :
            m_FLSeatFBMv_St_( FLSeatFBMv_St ),
            m_FLSeatBackrestMv_St_( FLSeatBackrestMv_St ),
            m_FLSeatHgtMv_St_( FLSeatHgtMv_St ),
            m_FLSeatCshnAngMv_St_( FLSeatCshnAngMv_St ),
            m_FLLegAngCshnExtMv_St_( FLLegAngCshnExtMv_St ),
            m_FLSeatLegLengthMv_St_( FLSeatLegLengthMv_St ),
            m_FRSeatFBMv_St_( FRSeatFBMv_St ),
            m_FRSeatBackrestMv_St_( FRSeatBackrestMv_St ),
            m_FRSeatHgtMv_St_( FRSeatHgtMv_St ),
            m_FRSeatCshnAngMv_St_( FRSeatCshnAngMv_St ),
            m_FRLegAngCshnExtMv_St_( FRLegAngCshnExtMv_St ),
            m_FRSeatLegLengthMv_St_( FRSeatLegLengthMv_St ),
            m_FLSeatFBPst_Val_( FLSeatFBPst_Val ),
            m_FLSeatBackrestPst_Val_( FLSeatBackrestPst_Val ),
            m_FLSeatHgtPst_Val_( FLSeatHgtPst_Val ),
            m_FLSeatCshnAngPst_Val_( FLSeatCshnAngPst_Val ),
            m_FLLegAngCshnExtPst_Val_( FLLegAngCshnExtPst_Val ),
            m_FLSeatLegLengthPst_Val_( FLSeatLegLengthPst_Val ),
            m_FRSeatFBPst_Val_( FRSeatFBPst_Val ),
            m_FRSeatBackrestPst_Val_( FRSeatBackrestPst_Val ),
            m_FRSeatHgtPst_Val_( FRSeatHgtPst_Val ),
            m_FRSeatCshnAngPst_Val_( FRSeatCshnAngPst_Val ),
            m_FRLegAngCshnExtPst_Val_( FRLegAngCshnExtPst_Val ),
            m_FRSeatLegLengthPst_Val_( FRSeatLegLengthPst_Val ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    StAdj_St_struct::StAdj_St_struct(StAdj_St_struct&& other_) OMG_NOEXCEPT  :m_FLSeatFBMv_St_ (std::move(other_.m_FLSeatFBMv_St_))
    ,
    m_FLSeatBackrestMv_St_ (std::move(other_.m_FLSeatBackrestMv_St_))
    ,
    m_FLSeatHgtMv_St_ (std::move(other_.m_FLSeatHgtMv_St_))
    ,
    m_FLSeatCshnAngMv_St_ (std::move(other_.m_FLSeatCshnAngMv_St_))
    ,
    m_FLLegAngCshnExtMv_St_ (std::move(other_.m_FLLegAngCshnExtMv_St_))
    ,
    m_FLSeatLegLengthMv_St_ (std::move(other_.m_FLSeatLegLengthMv_St_))
    ,
    m_FRSeatFBMv_St_ (std::move(other_.m_FRSeatFBMv_St_))
    ,
    m_FRSeatBackrestMv_St_ (std::move(other_.m_FRSeatBackrestMv_St_))
    ,
    m_FRSeatHgtMv_St_ (std::move(other_.m_FRSeatHgtMv_St_))
    ,
    m_FRSeatCshnAngMv_St_ (std::move(other_.m_FRSeatCshnAngMv_St_))
    ,
    m_FRLegAngCshnExtMv_St_ (std::move(other_.m_FRLegAngCshnExtMv_St_))
    ,
    m_FRSeatLegLengthMv_St_ (std::move(other_.m_FRSeatLegLengthMv_St_))
    ,
    m_FLSeatFBPst_Val_ (std::move(other_.m_FLSeatFBPst_Val_))
    ,
    m_FLSeatBackrestPst_Val_ (std::move(other_.m_FLSeatBackrestPst_Val_))
    ,
    m_FLSeatHgtPst_Val_ (std::move(other_.m_FLSeatHgtPst_Val_))
    ,
    m_FLSeatCshnAngPst_Val_ (std::move(other_.m_FLSeatCshnAngPst_Val_))
    ,
    m_FLLegAngCshnExtPst_Val_ (std::move(other_.m_FLLegAngCshnExtPst_Val_))
    ,
    m_FLSeatLegLengthPst_Val_ (std::move(other_.m_FLSeatLegLengthPst_Val_))
    ,
    m_FRSeatFBPst_Val_ (std::move(other_.m_FRSeatFBPst_Val_))
    ,
    m_FRSeatBackrestPst_Val_ (std::move(other_.m_FRSeatBackrestPst_Val_))
    ,
    m_FRSeatHgtPst_Val_ (std::move(other_.m_FRSeatHgtPst_Val_))
    ,
    m_FRSeatCshnAngPst_Val_ (std::move(other_.m_FRSeatCshnAngPst_Val_))
    ,
    m_FRLegAngCshnExtPst_Val_ (std::move(other_.m_FRLegAngCshnExtPst_Val_))
    ,
    m_FRSeatLegLengthPst_Val_ (std::move(other_.m_FRSeatLegLengthPst_Val_))
    {
    } 

    StAdj_St_struct& StAdj_St_struct::operator=(StAdj_St_struct&&  other_) OMG_NOEXCEPT {
        StAdj_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void StAdj_St_struct::swap(StAdj_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLSeatFBMv_St_, other_.m_FLSeatFBMv_St_);
        swap(m_FLSeatBackrestMv_St_, other_.m_FLSeatBackrestMv_St_);
        swap(m_FLSeatHgtMv_St_, other_.m_FLSeatHgtMv_St_);
        swap(m_FLSeatCshnAngMv_St_, other_.m_FLSeatCshnAngMv_St_);
        swap(m_FLLegAngCshnExtMv_St_, other_.m_FLLegAngCshnExtMv_St_);
        swap(m_FLSeatLegLengthMv_St_, other_.m_FLSeatLegLengthMv_St_);
        swap(m_FRSeatFBMv_St_, other_.m_FRSeatFBMv_St_);
        swap(m_FRSeatBackrestMv_St_, other_.m_FRSeatBackrestMv_St_);
        swap(m_FRSeatHgtMv_St_, other_.m_FRSeatHgtMv_St_);
        swap(m_FRSeatCshnAngMv_St_, other_.m_FRSeatCshnAngMv_St_);
        swap(m_FRLegAngCshnExtMv_St_, other_.m_FRLegAngCshnExtMv_St_);
        swap(m_FRSeatLegLengthMv_St_, other_.m_FRSeatLegLengthMv_St_);
        swap(m_FLSeatFBPst_Val_, other_.m_FLSeatFBPst_Val_);
        swap(m_FLSeatBackrestPst_Val_, other_.m_FLSeatBackrestPst_Val_);
        swap(m_FLSeatHgtPst_Val_, other_.m_FLSeatHgtPst_Val_);
        swap(m_FLSeatCshnAngPst_Val_, other_.m_FLSeatCshnAngPst_Val_);
        swap(m_FLLegAngCshnExtPst_Val_, other_.m_FLLegAngCshnExtPst_Val_);
        swap(m_FLSeatLegLengthPst_Val_, other_.m_FLSeatLegLengthPst_Val_);
        swap(m_FRSeatFBPst_Val_, other_.m_FRSeatFBPst_Val_);
        swap(m_FRSeatBackrestPst_Val_, other_.m_FRSeatBackrestPst_Val_);
        swap(m_FRSeatHgtPst_Val_, other_.m_FRSeatHgtPst_Val_);
        swap(m_FRSeatCshnAngPst_Val_, other_.m_FRSeatCshnAngPst_Val_);
        swap(m_FRLegAngCshnExtPst_Val_, other_.m_FRLegAngCshnExtPst_Val_);
        swap(m_FRSeatLegLengthPst_Val_, other_.m_FRSeatLegLengthPst_Val_);
    }  

    bool StAdj_St_struct::operator == (const StAdj_St_struct& other_) const {
        if (m_FLSeatFBMv_St_ != other_.m_FLSeatFBMv_St_) {
            return false;
        }
        if (m_FLSeatBackrestMv_St_ != other_.m_FLSeatBackrestMv_St_) {
            return false;
        }
        if (m_FLSeatHgtMv_St_ != other_.m_FLSeatHgtMv_St_) {
            return false;
        }
        if (m_FLSeatCshnAngMv_St_ != other_.m_FLSeatCshnAngMv_St_) {
            return false;
        }
        if (m_FLLegAngCshnExtMv_St_ != other_.m_FLLegAngCshnExtMv_St_) {
            return false;
        }
        if (m_FLSeatLegLengthMv_St_ != other_.m_FLSeatLegLengthMv_St_) {
            return false;
        }
        if (m_FRSeatFBMv_St_ != other_.m_FRSeatFBMv_St_) {
            return false;
        }
        if (m_FRSeatBackrestMv_St_ != other_.m_FRSeatBackrestMv_St_) {
            return false;
        }
        if (m_FRSeatHgtMv_St_ != other_.m_FRSeatHgtMv_St_) {
            return false;
        }
        if (m_FRSeatCshnAngMv_St_ != other_.m_FRSeatCshnAngMv_St_) {
            return false;
        }
        if (m_FRLegAngCshnExtMv_St_ != other_.m_FRLegAngCshnExtMv_St_) {
            return false;
        }
        if (m_FRSeatLegLengthMv_St_ != other_.m_FRSeatLegLengthMv_St_) {
            return false;
        }
        if (m_FLSeatFBPst_Val_ != other_.m_FLSeatFBPst_Val_) {
            return false;
        }
        if (m_FLSeatBackrestPst_Val_ != other_.m_FLSeatBackrestPst_Val_) {
            return false;
        }
        if (m_FLSeatHgtPst_Val_ != other_.m_FLSeatHgtPst_Val_) {
            return false;
        }
        if (m_FLSeatCshnAngPst_Val_ != other_.m_FLSeatCshnAngPst_Val_) {
            return false;
        }
        if (m_FLLegAngCshnExtPst_Val_ != other_.m_FLLegAngCshnExtPst_Val_) {
            return false;
        }
        if (m_FLSeatLegLengthPst_Val_ != other_.m_FLSeatLegLengthPst_Val_) {
            return false;
        }
        if (m_FRSeatFBPst_Val_ != other_.m_FRSeatFBPst_Val_) {
            return false;
        }
        if (m_FRSeatBackrestPst_Val_ != other_.m_FRSeatBackrestPst_Val_) {
            return false;
        }
        if (m_FRSeatHgtPst_Val_ != other_.m_FRSeatHgtPst_Val_) {
            return false;
        }
        if (m_FRSeatCshnAngPst_Val_ != other_.m_FRSeatCshnAngPst_Val_) {
            return false;
        }
        if (m_FRLegAngCshnExtPst_Val_ != other_.m_FRLegAngCshnExtPst_Val_) {
            return false;
        }
        if (m_FRSeatLegLengthPst_Val_ != other_.m_FRSeatLegLengthPst_Val_) {
            return false;
        }
        return true;
    }
    bool StAdj_St_struct::operator != (const StAdj_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const StAdj_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLSeatFBMv_St: " << (int)sample.FLSeatFBMv_St() <<", ";
        o << "FLSeatBackrestMv_St: " << (int)sample.FLSeatBackrestMv_St() <<", ";
        o << "FLSeatHgtMv_St: " << (int)sample.FLSeatHgtMv_St() <<", ";
        o << "FLSeatCshnAngMv_St: " << (int)sample.FLSeatCshnAngMv_St() <<", ";
        o << "FLLegAngCshnExtMv_St: " << (int)sample.FLLegAngCshnExtMv_St() <<", ";
        o << "FLSeatLegLengthMv_St: " << (int)sample.FLSeatLegLengthMv_St() <<", ";
        o << "FRSeatFBMv_St: " << (int)sample.FRSeatFBMv_St() <<", ";
        o << "FRSeatBackrestMv_St: " << (int)sample.FRSeatBackrestMv_St() <<", ";
        o << "FRSeatHgtMv_St: " << (int)sample.FRSeatHgtMv_St() <<", ";
        o << "FRSeatCshnAngMv_St: " << (int)sample.FRSeatCshnAngMv_St() <<", ";
        o << "FRLegAngCshnExtMv_St: " << (int)sample.FRLegAngCshnExtMv_St() <<", ";
        o << "FRSeatLegLengthMv_St: " << (int)sample.FRSeatLegLengthMv_St() <<", ";
        o << "FLSeatFBPst_Val: " << (int)sample.FLSeatFBPst_Val() <<", ";
        o << "FLSeatBackrestPst_Val: " << (int)sample.FLSeatBackrestPst_Val() <<", ";
        o << "FLSeatHgtPst_Val: " << (int)sample.FLSeatHgtPst_Val() <<", ";
        o << "FLSeatCshnAngPst_Val: " << (int)sample.FLSeatCshnAngPst_Val() <<", ";
        o << "FLLegAngCshnExtPst_Val: " << (int)sample.FLLegAngCshnExtPst_Val() <<", ";
        o << "FLSeatLegLengthPst_Val: " << (int)sample.FLSeatLegLengthPst_Val() <<", ";
        o << "FRSeatFBPst_Val: " << (int)sample.FRSeatFBPst_Val() <<", ";
        o << "FRSeatBackrestPst_Val: " << (int)sample.FRSeatBackrestPst_Val() <<", ";
        o << "FRSeatHgtPst_Val: " << (int)sample.FRSeatHgtPst_Val() <<", ";
        o << "FRSeatCshnAngPst_Val: " << (int)sample.FRSeatCshnAngPst_Val() <<", ";
        o << "FRLegAngCshnExtPst_Val: " << (int)sample.FRLegAngCshnExtPst_Val() <<", ";
        o << "FRSeatLegLengthPst_Val: " << (int)sample.FRSeatLegLengthPst_Val()  ;
        o <<"]";
        return o;
    }

    // ---- StAdj_St_Get_struct: 

    StAdj_St_Get_struct::StAdj_St_Get_struct() :
        m_StPstBit_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    StAdj_St_Get_struct::StAdj_St_Get_struct (
        uint16_t StPstBit,
        const std::string& CtrlSource)
        :
            m_StPstBit_( StPstBit ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    StAdj_St_Get_struct::StAdj_St_Get_struct(StAdj_St_Get_struct&& other_) OMG_NOEXCEPT  :m_StPstBit_ (std::move(other_.m_StPstBit_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    StAdj_St_Get_struct& StAdj_St_Get_struct::operator=(StAdj_St_Get_struct&&  other_) OMG_NOEXCEPT {
        StAdj_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void StAdj_St_Get_struct::swap(StAdj_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_StPstBit_, other_.m_StPstBit_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool StAdj_St_Get_struct::operator == (const StAdj_St_Get_struct& other_) const {
        if (m_StPstBit_ != other_.m_StPstBit_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool StAdj_St_Get_struct::operator != (const StAdj_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const StAdj_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "StPstBit: " << sample.StPstBit()<<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- StAdj_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    StAdj_Srv_Req_Union::StAdj_Srv_Req_Union(StAdj_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                StAdj_Ctrl( std::move(other_.StAdj_Ctrl()));
            } break;
            case 1:
            {  
                StAdj_St_Get( std::move(other_.StAdj_St_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    StAdj_Srv_Req_Union& StAdj_Srv_Req_Union::operator=(StAdj_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        StAdj_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    StAdj_Srv_Req_Union::Union_::Union_()  {
    }

    StAdj_Srv_Req_Union::Union_::Union_(
        const BodyDomain::StAdj_Ctrl_struct& StAdj_Ctrl,
        const BodyDomain::StAdj_St_Get_struct& StAdj_St_Get)
        :
            m_StAdj_Ctrl_( StAdj_Ctrl ),
            m_StAdj_St_Get_( StAdj_St_Get ) {
    }

    StAdj_Srv_Req_Union::StAdj_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void StAdj_Srv_Req_Union::swap(StAdj_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_StAdj_Ctrl_, other_.m_u_.m_StAdj_Ctrl_);
            } break;
            case 1:
            {  
                swap(m_u_.m_StAdj_St_Get_, other_.m_u_.m_StAdj_St_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_StAdj_Ctrl_, other_.m_u_.m_StAdj_Ctrl_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_StAdj_St_Get_, other_.m_u_.m_StAdj_St_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool StAdj_Srv_Req_Union::operator == (const StAdj_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_StAdj_Ctrl_ != other_.m_u_.m_StAdj_Ctrl_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_StAdj_St_Get_ != other_.m_u_.m_StAdj_St_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool StAdj_Srv_Req_Union::operator != (const StAdj_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const StAdj_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "StAdj_Ctrl: " << sample.StAdj_Ctrl()<<", ";
            } break ;
            case 1:
            {  
                o << "StAdj_St_Get: " << sample.StAdj_St_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t StAdj_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- StAdj_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    StAdj_Srv_Resp_Union::StAdj_Srv_Resp_Union(StAdj_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                StAdj_Ctrl_SOA( std::move(other_.StAdj_Ctrl_SOA()));
            } break;
            case 1:
            {  
                StAdj_St_Get_SOA( std::move(other_.StAdj_St_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    StAdj_Srv_Resp_Union& StAdj_Srv_Resp_Union::operator=(StAdj_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        StAdj_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    StAdj_Srv_Resp_Union::Union_::Union_()  {
    }

    StAdj_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::StAdj_Ctrl_SOA_struct& StAdj_Ctrl_SOA,
        const BodyDomain::StAdj_St_struct& StAdj_St_Get_SOA)
        :
            m_StAdj_Ctrl_SOA_( StAdj_Ctrl_SOA ),
            m_StAdj_St_Get_SOA_( StAdj_St_Get_SOA ) {
    }

    StAdj_Srv_Resp_Union::StAdj_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void StAdj_Srv_Resp_Union::swap(StAdj_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_StAdj_Ctrl_SOA_, other_.m_u_.m_StAdj_Ctrl_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_StAdj_St_Get_SOA_, other_.m_u_.m_StAdj_St_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_StAdj_Ctrl_SOA_, other_.m_u_.m_StAdj_Ctrl_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_StAdj_St_Get_SOA_, other_.m_u_.m_StAdj_St_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool StAdj_Srv_Resp_Union::operator == (const StAdj_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_StAdj_Ctrl_SOA_ != other_.m_u_.m_StAdj_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_StAdj_St_Get_SOA_ != other_.m_u_.m_StAdj_St_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool StAdj_Srv_Resp_Union::operator != (const StAdj_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const StAdj_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "StAdj_Ctrl_SOA: " << sample.StAdj_Ctrl_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "StAdj_St_Get_SOA: " << sample.StAdj_St_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t StAdj_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- DrLth_Set_struct: 

    DrLth_Set_struct::DrLth_Set_struct() :
        m_TDrOpenAngSet_Act_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    DrLth_Set_struct::DrLth_Set_struct (
        uint8_t TDrOpenAngSet_Act,
        const std::string& CtrlSource)
        :
            m_TDrOpenAngSet_Act_( TDrOpenAngSet_Act ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_Set_struct::DrLth_Set_struct(DrLth_Set_struct&& other_) OMG_NOEXCEPT  :m_TDrOpenAngSet_Act_ (std::move(other_.m_TDrOpenAngSet_Act_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    DrLth_Set_struct& DrLth_Set_struct::operator=(DrLth_Set_struct&&  other_) OMG_NOEXCEPT {
        DrLth_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrLth_Set_struct::swap(DrLth_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TDrOpenAngSet_Act_, other_.m_TDrOpenAngSet_Act_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool DrLth_Set_struct::operator == (const DrLth_Set_struct& other_) const {
        if (m_TDrOpenAngSet_Act_ != other_.m_TDrOpenAngSet_Act_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool DrLth_Set_struct::operator != (const DrLth_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TDrOpenAngSet_Act: " << (int)sample.TDrOpenAngSet_Act() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- DrLth_Get_struct: 

    DrLth_Get_struct::DrLth_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    DrLth_Get_struct::DrLth_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_Get_struct::DrLth_Get_struct(DrLth_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    DrLth_Get_struct& DrLth_Get_struct::operator=(DrLth_Get_struct&&  other_) OMG_NOEXCEPT {
        DrLth_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrLth_Get_struct::swap(DrLth_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool DrLth_Get_struct::operator == (const DrLth_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool DrLth_Get_struct::operator != (const DrLth_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- DrLth_Rsp_struct: 

    DrLth_Rsp_struct::DrLth_Rsp_struct() :
        m_TDrOpenAngSet_Rsp_ (0)  {
    }   

    DrLth_Rsp_struct::DrLth_Rsp_struct (
        uint8_t TDrOpenAngSet_Rsp)
        :
            m_TDrOpenAngSet_Rsp_( TDrOpenAngSet_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_Rsp_struct::DrLth_Rsp_struct(DrLth_Rsp_struct&& other_) OMG_NOEXCEPT  :m_TDrOpenAngSet_Rsp_ (std::move(other_.m_TDrOpenAngSet_Rsp_))
    {
    } 

    DrLth_Rsp_struct& DrLth_Rsp_struct::operator=(DrLth_Rsp_struct&&  other_) OMG_NOEXCEPT {
        DrLth_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrLth_Rsp_struct::swap(DrLth_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TDrOpenAngSet_Rsp_, other_.m_TDrOpenAngSet_Rsp_);
    }  

    bool DrLth_Rsp_struct::operator == (const DrLth_Rsp_struct& other_) const {
        if (m_TDrOpenAngSet_Rsp_ != other_.m_TDrOpenAngSet_Rsp_) {
            return false;
        }
        return true;
    }
    bool DrLth_Rsp_struct::operator != (const DrLth_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TDrOpenAngSet_Rsp: " << (int)sample.TDrOpenAngSet_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- DrLth_St_Get_struct: 

    DrLth_St_Get_struct::DrLth_St_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    DrLth_St_Get_struct::DrLth_St_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_St_Get_struct::DrLth_St_Get_struct(DrLth_St_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    DrLth_St_Get_struct& DrLth_St_Get_struct::operator=(DrLth_St_Get_struct&&  other_) OMG_NOEXCEPT {
        DrLth_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrLth_St_Get_struct::swap(DrLth_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool DrLth_St_Get_struct::operator == (const DrLth_St_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool DrLth_St_Get_struct::operator != (const DrLth_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- DrLth_Ctrl_struct: 

    DrLth_Ctrl_struct::DrLth_Ctrl_struct() :
        m_TDoorBtn_Act_ (0) ,
        m_TDoorPos_Act_ (0) ,
        m_FLDoorBtn_Act_ (0) ,
        m_RLDoorBtn_Act_ (0) ,
        m_FRDoorBtn_Act_ (0) ,
        m_RRDoorBtn_Act_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    DrLth_Ctrl_struct::DrLth_Ctrl_struct (
        uint8_t TDoorBtn_Act,
        uint8_t TDoorPos_Act,
        uint8_t FLDoorBtn_Act,
        uint8_t RLDoorBtn_Act,
        uint8_t FRDoorBtn_Act,
        uint8_t RRDoorBtn_Act,
        const std::string& CtrlSource)
        :
            m_TDoorBtn_Act_( TDoorBtn_Act ),
            m_TDoorPos_Act_( TDoorPos_Act ),
            m_FLDoorBtn_Act_( FLDoorBtn_Act ),
            m_RLDoorBtn_Act_( RLDoorBtn_Act ),
            m_FRDoorBtn_Act_( FRDoorBtn_Act ),
            m_RRDoorBtn_Act_( RRDoorBtn_Act ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_Ctrl_struct::DrLth_Ctrl_struct(DrLth_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_TDoorBtn_Act_ (std::move(other_.m_TDoorBtn_Act_))
    ,
    m_TDoorPos_Act_ (std::move(other_.m_TDoorPos_Act_))
    ,
    m_FLDoorBtn_Act_ (std::move(other_.m_FLDoorBtn_Act_))
    ,
    m_RLDoorBtn_Act_ (std::move(other_.m_RLDoorBtn_Act_))
    ,
    m_FRDoorBtn_Act_ (std::move(other_.m_FRDoorBtn_Act_))
    ,
    m_RRDoorBtn_Act_ (std::move(other_.m_RRDoorBtn_Act_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    DrLth_Ctrl_struct& DrLth_Ctrl_struct::operator=(DrLth_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        DrLth_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrLth_Ctrl_struct::swap(DrLth_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TDoorBtn_Act_, other_.m_TDoorBtn_Act_);
        swap(m_TDoorPos_Act_, other_.m_TDoorPos_Act_);
        swap(m_FLDoorBtn_Act_, other_.m_FLDoorBtn_Act_);
        swap(m_RLDoorBtn_Act_, other_.m_RLDoorBtn_Act_);
        swap(m_FRDoorBtn_Act_, other_.m_FRDoorBtn_Act_);
        swap(m_RRDoorBtn_Act_, other_.m_RRDoorBtn_Act_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool DrLth_Ctrl_struct::operator == (const DrLth_Ctrl_struct& other_) const {
        if (m_TDoorBtn_Act_ != other_.m_TDoorBtn_Act_) {
            return false;
        }
        if (m_TDoorPos_Act_ != other_.m_TDoorPos_Act_) {
            return false;
        }
        if (m_FLDoorBtn_Act_ != other_.m_FLDoorBtn_Act_) {
            return false;
        }
        if (m_RLDoorBtn_Act_ != other_.m_RLDoorBtn_Act_) {
            return false;
        }
        if (m_FRDoorBtn_Act_ != other_.m_FRDoorBtn_Act_) {
            return false;
        }
        if (m_RRDoorBtn_Act_ != other_.m_RRDoorBtn_Act_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool DrLth_Ctrl_struct::operator != (const DrLth_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TDoorBtn_Act: " << (int)sample.TDoorBtn_Act() <<", ";
        o << "TDoorPos_Act: " << (int)sample.TDoorPos_Act() <<", ";
        o << "FLDoorBtn_Act: " << (int)sample.FLDoorBtn_Act() <<", ";
        o << "RLDoorBtn_Act: " << (int)sample.RLDoorBtn_Act() <<", ";
        o << "FRDoorBtn_Act: " << (int)sample.FRDoorBtn_Act() <<", ";
        o << "RRDoorBtn_Act: " << (int)sample.RRDoorBtn_Act() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- DrLth_Ctrl_SOA_struct: 

    DrLth_Ctrl_SOA_struct::DrLth_Ctrl_SOA_struct() :
        m_DrLth_Ctrl_SOA_u8_ (0)  {
    }   

    DrLth_Ctrl_SOA_struct::DrLth_Ctrl_SOA_struct (
        uint8_t DrLth_Ctrl_SOA_u8)
        :
            m_DrLth_Ctrl_SOA_u8_( DrLth_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_Ctrl_SOA_struct::DrLth_Ctrl_SOA_struct(DrLth_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_DrLth_Ctrl_SOA_u8_ (std::move(other_.m_DrLth_Ctrl_SOA_u8_))
    {
    } 

    DrLth_Ctrl_SOA_struct& DrLth_Ctrl_SOA_struct::operator=(DrLth_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        DrLth_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrLth_Ctrl_SOA_struct::swap(DrLth_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_DrLth_Ctrl_SOA_u8_, other_.m_DrLth_Ctrl_SOA_u8_);
    }  

    bool DrLth_Ctrl_SOA_struct::operator == (const DrLth_Ctrl_SOA_struct& other_) const {
        if (m_DrLth_Ctrl_SOA_u8_ != other_.m_DrLth_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool DrLth_Ctrl_SOA_struct::operator != (const DrLth_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "DrLth_Ctrl_SOA_u8: " << (int)sample.DrLth_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- DrLth_St_struct: 

    DrLth_St_struct::DrLth_St_struct() :
        m_FLDoor_st_ (0) ,
        m_RLDoor_st_ (0) ,
        m_FRDoor_st_ (0) ,
        m_RRDoor_st_ (0) ,
        m_TDoor_st_ (0) ,
        m_FLNomDoor_St_ (0) ,
        m_RLNomDoor_St_ (0) ,
        m_FRNomDoor_St_ (0) ,
        m_RRNomDoor_St_ (0) ,
        m_TDoorNominal_St_ (0) ,
        m_TDrWrk_St_ (0) ,
        m_TDrTripPst_Val_ (0) ,
        m_FLDrStpRsn_st_ (0) ,
        m_RLDrStpRsn_st_ (0) ,
        m_FRDrStpRsn_st_ (0) ,
        m_RRDrStpRsn_st_ (0) ,
        m_TDrStpRsn_st_ (0) ,
        m_TDoorTip_St_ (0) ,
        m_HoodLatch_St_ (0)  {
    }   

    DrLth_St_struct::DrLth_St_struct (
        uint8_t FLDoor_st,
        uint8_t RLDoor_st,
        uint8_t FRDoor_st,
        uint8_t RRDoor_st,
        uint8_t TDoor_st,
        uint8_t FLNomDoor_St,
        uint8_t RLNomDoor_St,
        uint8_t FRNomDoor_St,
        uint8_t RRNomDoor_St,
        uint8_t TDoorNominal_St,
        uint8_t TDrWrk_St,
        uint8_t TDrTripPst_Val,
        uint8_t FLDrStpRsn_st,
        uint8_t RLDrStpRsn_st,
        uint8_t FRDrStpRsn_st,
        uint8_t RRDrStpRsn_st,
        uint8_t TDrStpRsn_st,
        uint8_t TDoorTip_St,
        uint8_t HoodLatch_St)
        :
            m_FLDoor_st_( FLDoor_st ),
            m_RLDoor_st_( RLDoor_st ),
            m_FRDoor_st_( FRDoor_st ),
            m_RRDoor_st_( RRDoor_st ),
            m_TDoor_st_( TDoor_st ),
            m_FLNomDoor_St_( FLNomDoor_St ),
            m_RLNomDoor_St_( RLNomDoor_St ),
            m_FRNomDoor_St_( FRNomDoor_St ),
            m_RRNomDoor_St_( RRNomDoor_St ),
            m_TDoorNominal_St_( TDoorNominal_St ),
            m_TDrWrk_St_( TDrWrk_St ),
            m_TDrTripPst_Val_( TDrTripPst_Val ),
            m_FLDrStpRsn_st_( FLDrStpRsn_st ),
            m_RLDrStpRsn_st_( RLDrStpRsn_st ),
            m_FRDrStpRsn_st_( FRDrStpRsn_st ),
            m_RRDrStpRsn_st_( RRDrStpRsn_st ),
            m_TDrStpRsn_st_( TDrStpRsn_st ),
            m_TDoorTip_St_( TDoorTip_St ),
            m_HoodLatch_St_( HoodLatch_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_St_struct::DrLth_St_struct(DrLth_St_struct&& other_) OMG_NOEXCEPT  :m_FLDoor_st_ (std::move(other_.m_FLDoor_st_))
    ,
    m_RLDoor_st_ (std::move(other_.m_RLDoor_st_))
    ,
    m_FRDoor_st_ (std::move(other_.m_FRDoor_st_))
    ,
    m_RRDoor_st_ (std::move(other_.m_RRDoor_st_))
    ,
    m_TDoor_st_ (std::move(other_.m_TDoor_st_))
    ,
    m_FLNomDoor_St_ (std::move(other_.m_FLNomDoor_St_))
    ,
    m_RLNomDoor_St_ (std::move(other_.m_RLNomDoor_St_))
    ,
    m_FRNomDoor_St_ (std::move(other_.m_FRNomDoor_St_))
    ,
    m_RRNomDoor_St_ (std::move(other_.m_RRNomDoor_St_))
    ,
    m_TDoorNominal_St_ (std::move(other_.m_TDoorNominal_St_))
    ,
    m_TDrWrk_St_ (std::move(other_.m_TDrWrk_St_))
    ,
    m_TDrTripPst_Val_ (std::move(other_.m_TDrTripPst_Val_))
    ,
    m_FLDrStpRsn_st_ (std::move(other_.m_FLDrStpRsn_st_))
    ,
    m_RLDrStpRsn_st_ (std::move(other_.m_RLDrStpRsn_st_))
    ,
    m_FRDrStpRsn_st_ (std::move(other_.m_FRDrStpRsn_st_))
    ,
    m_RRDrStpRsn_st_ (std::move(other_.m_RRDrStpRsn_st_))
    ,
    m_TDrStpRsn_st_ (std::move(other_.m_TDrStpRsn_st_))
    ,
    m_TDoorTip_St_ (std::move(other_.m_TDoorTip_St_))
    ,
    m_HoodLatch_St_ (std::move(other_.m_HoodLatch_St_))
    {
    } 

    DrLth_St_struct& DrLth_St_struct::operator=(DrLth_St_struct&&  other_) OMG_NOEXCEPT {
        DrLth_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrLth_St_struct::swap(DrLth_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLDoor_st_, other_.m_FLDoor_st_);
        swap(m_RLDoor_st_, other_.m_RLDoor_st_);
        swap(m_FRDoor_st_, other_.m_FRDoor_st_);
        swap(m_RRDoor_st_, other_.m_RRDoor_st_);
        swap(m_TDoor_st_, other_.m_TDoor_st_);
        swap(m_FLNomDoor_St_, other_.m_FLNomDoor_St_);
        swap(m_RLNomDoor_St_, other_.m_RLNomDoor_St_);
        swap(m_FRNomDoor_St_, other_.m_FRNomDoor_St_);
        swap(m_RRNomDoor_St_, other_.m_RRNomDoor_St_);
        swap(m_TDoorNominal_St_, other_.m_TDoorNominal_St_);
        swap(m_TDrWrk_St_, other_.m_TDrWrk_St_);
        swap(m_TDrTripPst_Val_, other_.m_TDrTripPst_Val_);
        swap(m_FLDrStpRsn_st_, other_.m_FLDrStpRsn_st_);
        swap(m_RLDrStpRsn_st_, other_.m_RLDrStpRsn_st_);
        swap(m_FRDrStpRsn_st_, other_.m_FRDrStpRsn_st_);
        swap(m_RRDrStpRsn_st_, other_.m_RRDrStpRsn_st_);
        swap(m_TDrStpRsn_st_, other_.m_TDrStpRsn_st_);
        swap(m_TDoorTip_St_, other_.m_TDoorTip_St_);
        swap(m_HoodLatch_St_, other_.m_HoodLatch_St_);
    }  

    bool DrLth_St_struct::operator == (const DrLth_St_struct& other_) const {
        if (m_FLDoor_st_ != other_.m_FLDoor_st_) {
            return false;
        }
        if (m_RLDoor_st_ != other_.m_RLDoor_st_) {
            return false;
        }
        if (m_FRDoor_st_ != other_.m_FRDoor_st_) {
            return false;
        }
        if (m_RRDoor_st_ != other_.m_RRDoor_st_) {
            return false;
        }
        if (m_TDoor_st_ != other_.m_TDoor_st_) {
            return false;
        }
        if (m_FLNomDoor_St_ != other_.m_FLNomDoor_St_) {
            return false;
        }
        if (m_RLNomDoor_St_ != other_.m_RLNomDoor_St_) {
            return false;
        }
        if (m_FRNomDoor_St_ != other_.m_FRNomDoor_St_) {
            return false;
        }
        if (m_RRNomDoor_St_ != other_.m_RRNomDoor_St_) {
            return false;
        }
        if (m_TDoorNominal_St_ != other_.m_TDoorNominal_St_) {
            return false;
        }
        if (m_TDrWrk_St_ != other_.m_TDrWrk_St_) {
            return false;
        }
        if (m_TDrTripPst_Val_ != other_.m_TDrTripPst_Val_) {
            return false;
        }
        if (m_FLDrStpRsn_st_ != other_.m_FLDrStpRsn_st_) {
            return false;
        }
        if (m_RLDrStpRsn_st_ != other_.m_RLDrStpRsn_st_) {
            return false;
        }
        if (m_FRDrStpRsn_st_ != other_.m_FRDrStpRsn_st_) {
            return false;
        }
        if (m_RRDrStpRsn_st_ != other_.m_RRDrStpRsn_st_) {
            return false;
        }
        if (m_TDrStpRsn_st_ != other_.m_TDrStpRsn_st_) {
            return false;
        }
        if (m_TDoorTip_St_ != other_.m_TDoorTip_St_) {
            return false;
        }
        if (m_HoodLatch_St_ != other_.m_HoodLatch_St_) {
            return false;
        }
        return true;
    }
    bool DrLth_St_struct::operator != (const DrLth_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLDoor_st: " << (int)sample.FLDoor_st() <<", ";
        o << "RLDoor_st: " << (int)sample.RLDoor_st() <<", ";
        o << "FRDoor_st: " << (int)sample.FRDoor_st() <<", ";
        o << "RRDoor_st: " << (int)sample.RRDoor_st() <<", ";
        o << "TDoor_st: " << (int)sample.TDoor_st() <<", ";
        o << "FLNomDoor_St: " << (int)sample.FLNomDoor_St() <<", ";
        o << "RLNomDoor_St: " << (int)sample.RLNomDoor_St() <<", ";
        o << "FRNomDoor_St: " << (int)sample.FRNomDoor_St() <<", ";
        o << "RRNomDoor_St: " << (int)sample.RRNomDoor_St() <<", ";
        o << "TDoorNominal_St: " << (int)sample.TDoorNominal_St() <<", ";
        o << "TDrWrk_St: " << (int)sample.TDrWrk_St() <<", ";
        o << "TDrTripPst_Val: " << (int)sample.TDrTripPst_Val() <<", ";
        o << "FLDrStpRsn_st: " << (int)sample.FLDrStpRsn_st() <<", ";
        o << "RLDrStpRsn_st: " << (int)sample.RLDrStpRsn_st() <<", ";
        o << "FRDrStpRsn_st: " << (int)sample.FRDrStpRsn_st() <<", ";
        o << "RRDrStpRsn_st: " << (int)sample.RRDrStpRsn_st() <<", ";
        o << "TDrStpRsn_st: " << (int)sample.TDrStpRsn_st() <<", ";
        o << "TDoorTip_St: " << (int)sample.TDoorTip_St() <<", ";
        o << "HoodLatch_St: " << (int)sample.HoodLatch_St()  ;
        o <<"]";
        return o;
    }

    // ---- DrLth_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_Srv_Req_Union::DrLth_Srv_Req_Union(DrLth_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                DrLth_Set( std::move(other_.DrLth_Set()));
            } break;
            case 1:
            {  
                DrLth_Get( std::move(other_.DrLth_Get()));
            } break;
            case 2:
            {  
                DrLth_Ctrl( std::move(other_.DrLth_Ctrl()));
            } break;
            case 3:
            {  
                DrLth_St_Get( std::move(other_.DrLth_St_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    DrLth_Srv_Req_Union& DrLth_Srv_Req_Union::operator=(DrLth_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        DrLth_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    DrLth_Srv_Req_Union::Union_::Union_()  {
    }

    DrLth_Srv_Req_Union::Union_::Union_(
        const BodyDomain::DrLth_Set_struct& DrLth_Set,
        const BodyDomain::DrLth_Get_struct& DrLth_Get,
        const BodyDomain::DrLth_Ctrl_struct& DrLth_Ctrl,
        const BodyDomain::DrLth_St_Get_struct& DrLth_St_Get)
        :
            m_DrLth_Set_( DrLth_Set ),
            m_DrLth_Get_( DrLth_Get ),
            m_DrLth_Ctrl_( DrLth_Ctrl ),
            m_DrLth_St_Get_( DrLth_St_Get ) {
    }

    DrLth_Srv_Req_Union::DrLth_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void DrLth_Srv_Req_Union::swap(DrLth_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_DrLth_Set_, other_.m_u_.m_DrLth_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_DrLth_Get_, other_.m_u_.m_DrLth_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_DrLth_Ctrl_, other_.m_u_.m_DrLth_Ctrl_);
            } break;
            case 3:
            {  
                swap(m_u_.m_DrLth_St_Get_, other_.m_u_.m_DrLth_St_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_DrLth_Set_, other_.m_u_.m_DrLth_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_DrLth_Get_, other_.m_u_.m_DrLth_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_DrLth_Ctrl_, other_.m_u_.m_DrLth_Ctrl_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_DrLth_St_Get_, other_.m_u_.m_DrLth_St_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool DrLth_Srv_Req_Union::operator == (const DrLth_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_DrLth_Set_ != other_.m_u_.m_DrLth_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_DrLth_Get_ != other_.m_u_.m_DrLth_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_DrLth_Ctrl_ != other_.m_u_.m_DrLth_Ctrl_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_DrLth_St_Get_ != other_.m_u_.m_DrLth_St_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool DrLth_Srv_Req_Union::operator != (const DrLth_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "DrLth_Set: " << sample.DrLth_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "DrLth_Get: " << sample.DrLth_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "DrLth_Ctrl: " << sample.DrLth_Ctrl()<<", ";
            } break ;
            case 3:
            {  
                o << "DrLth_St_Get: " << sample.DrLth_St_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t DrLth_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- DrLth_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrLth_Srv_Resp_Union::DrLth_Srv_Resp_Union(DrLth_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                DrLth_Set_SOA( std::move(other_.DrLth_Set_SOA()));
            } break;
            case 1:
            {  
                DrLth_Get_SOA( std::move(other_.DrLth_Get_SOA()));
            } break;
            case 2:
            {  
                DrLth_Ctrl_SOA( std::move(other_.DrLth_Ctrl_SOA()));
            } break;
            case 3:
            {  
                DrLth_St_Get_SOA( std::move(other_.DrLth_St_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    DrLth_Srv_Resp_Union& DrLth_Srv_Resp_Union::operator=(DrLth_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        DrLth_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    DrLth_Srv_Resp_Union::Union_::Union_()  {
    }

    DrLth_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::DrLth_Rsp_struct& DrLth_Set_SOA,
        const BodyDomain::DrLth_Rsp_struct& DrLth_Get_SOA,
        const BodyDomain::DrLth_Ctrl_SOA_struct& DrLth_Ctrl_SOA,
        const BodyDomain::DrLth_St_struct& DrLth_St_Get_SOA)
        :
            m_DrLth_Set_SOA_( DrLth_Set_SOA ),
            m_DrLth_Get_SOA_( DrLth_Get_SOA ),
            m_DrLth_Ctrl_SOA_( DrLth_Ctrl_SOA ),
            m_DrLth_St_Get_SOA_( DrLth_St_Get_SOA ) {
    }

    DrLth_Srv_Resp_Union::DrLth_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void DrLth_Srv_Resp_Union::swap(DrLth_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_DrLth_Set_SOA_, other_.m_u_.m_DrLth_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_DrLth_Get_SOA_, other_.m_u_.m_DrLth_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_DrLth_Ctrl_SOA_, other_.m_u_.m_DrLth_Ctrl_SOA_);
            } break;
            case 3:
            {  
                swap(m_u_.m_DrLth_St_Get_SOA_, other_.m_u_.m_DrLth_St_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_DrLth_Set_SOA_, other_.m_u_.m_DrLth_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_DrLth_Get_SOA_, other_.m_u_.m_DrLth_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_DrLth_Ctrl_SOA_, other_.m_u_.m_DrLth_Ctrl_SOA_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_DrLth_St_Get_SOA_, other_.m_u_.m_DrLth_St_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool DrLth_Srv_Resp_Union::operator == (const DrLth_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_DrLth_Set_SOA_ != other_.m_u_.m_DrLth_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_DrLth_Get_SOA_ != other_.m_u_.m_DrLth_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_DrLth_Ctrl_SOA_ != other_.m_u_.m_DrLth_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_DrLth_St_Get_SOA_ != other_.m_u_.m_DrLth_St_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool DrLth_Srv_Resp_Union::operator != (const DrLth_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrLth_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "DrLth_Set_SOA: " << sample.DrLth_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "DrLth_Get_SOA: " << sample.DrLth_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "DrLth_Ctrl_SOA: " << sample.DrLth_Ctrl_SOA()<<", ";
            } break ;
            case 3:
            {  
                o << "DrLth_St_Get_SOA: " << sample.DrLth_St_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t DrLth_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- Hdl_St_Get_struct: 

    Hdl_St_Get_struct::Hdl_St_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    Hdl_St_Get_struct::Hdl_St_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Hdl_St_Get_struct::Hdl_St_Get_struct(Hdl_St_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    Hdl_St_Get_struct& Hdl_St_Get_struct::operator=(Hdl_St_Get_struct&&  other_) OMG_NOEXCEPT {
        Hdl_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Hdl_St_Get_struct::swap(Hdl_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool Hdl_St_Get_struct::operator == (const Hdl_St_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool Hdl_St_Get_struct::operator != (const Hdl_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Hdl_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- Hdl_St_struct: 

    Hdl_St_struct::Hdl_St_struct() :
        m_FLHdlPst_St_ (0) ,
        m_RLHdlPst_St_ (0) ,
        m_FRHdlPst_St_ (0) ,
        m_RRHdlPst_St_ (0) ,
        m_FLHdlStpRsn_St_ (0) ,
        m_RLHdlStpRsn_St_ (0) ,
        m_FRHdlStpRsn_St_ (0) ,
        m_RRHdlStpRsn_St_ (0)  {
    }   

    Hdl_St_struct::Hdl_St_struct (
        uint8_t FLHdlPst_St,
        uint8_t RLHdlPst_St,
        uint8_t FRHdlPst_St,
        uint8_t RRHdlPst_St,
        uint8_t FLHdlStpRsn_St,
        uint8_t RLHdlStpRsn_St,
        uint8_t FRHdlStpRsn_St,
        uint8_t RRHdlStpRsn_St)
        :
            m_FLHdlPst_St_( FLHdlPst_St ),
            m_RLHdlPst_St_( RLHdlPst_St ),
            m_FRHdlPst_St_( FRHdlPst_St ),
            m_RRHdlPst_St_( RRHdlPst_St ),
            m_FLHdlStpRsn_St_( FLHdlStpRsn_St ),
            m_RLHdlStpRsn_St_( RLHdlStpRsn_St ),
            m_FRHdlStpRsn_St_( FRHdlStpRsn_St ),
            m_RRHdlStpRsn_St_( RRHdlStpRsn_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Hdl_St_struct::Hdl_St_struct(Hdl_St_struct&& other_) OMG_NOEXCEPT  :m_FLHdlPst_St_ (std::move(other_.m_FLHdlPst_St_))
    ,
    m_RLHdlPst_St_ (std::move(other_.m_RLHdlPst_St_))
    ,
    m_FRHdlPst_St_ (std::move(other_.m_FRHdlPst_St_))
    ,
    m_RRHdlPst_St_ (std::move(other_.m_RRHdlPst_St_))
    ,
    m_FLHdlStpRsn_St_ (std::move(other_.m_FLHdlStpRsn_St_))
    ,
    m_RLHdlStpRsn_St_ (std::move(other_.m_RLHdlStpRsn_St_))
    ,
    m_FRHdlStpRsn_St_ (std::move(other_.m_FRHdlStpRsn_St_))
    ,
    m_RRHdlStpRsn_St_ (std::move(other_.m_RRHdlStpRsn_St_))
    {
    } 

    Hdl_St_struct& Hdl_St_struct::operator=(Hdl_St_struct&&  other_) OMG_NOEXCEPT {
        Hdl_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Hdl_St_struct::swap(Hdl_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLHdlPst_St_, other_.m_FLHdlPst_St_);
        swap(m_RLHdlPst_St_, other_.m_RLHdlPst_St_);
        swap(m_FRHdlPst_St_, other_.m_FRHdlPst_St_);
        swap(m_RRHdlPst_St_, other_.m_RRHdlPst_St_);
        swap(m_FLHdlStpRsn_St_, other_.m_FLHdlStpRsn_St_);
        swap(m_RLHdlStpRsn_St_, other_.m_RLHdlStpRsn_St_);
        swap(m_FRHdlStpRsn_St_, other_.m_FRHdlStpRsn_St_);
        swap(m_RRHdlStpRsn_St_, other_.m_RRHdlStpRsn_St_);
    }  

    bool Hdl_St_struct::operator == (const Hdl_St_struct& other_) const {
        if (m_FLHdlPst_St_ != other_.m_FLHdlPst_St_) {
            return false;
        }
        if (m_RLHdlPst_St_ != other_.m_RLHdlPst_St_) {
            return false;
        }
        if (m_FRHdlPst_St_ != other_.m_FRHdlPst_St_) {
            return false;
        }
        if (m_RRHdlPst_St_ != other_.m_RRHdlPst_St_) {
            return false;
        }
        if (m_FLHdlStpRsn_St_ != other_.m_FLHdlStpRsn_St_) {
            return false;
        }
        if (m_RLHdlStpRsn_St_ != other_.m_RLHdlStpRsn_St_) {
            return false;
        }
        if (m_FRHdlStpRsn_St_ != other_.m_FRHdlStpRsn_St_) {
            return false;
        }
        if (m_RRHdlStpRsn_St_ != other_.m_RRHdlStpRsn_St_) {
            return false;
        }
        return true;
    }
    bool Hdl_St_struct::operator != (const Hdl_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Hdl_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLHdlPst_St: " << (int)sample.FLHdlPst_St() <<", ";
        o << "RLHdlPst_St: " << (int)sample.RLHdlPst_St() <<", ";
        o << "FRHdlPst_St: " << (int)sample.FRHdlPst_St() <<", ";
        o << "RRHdlPst_St: " << (int)sample.RRHdlPst_St() <<", ";
        o << "FLHdlStpRsn_St: " << (int)sample.FLHdlStpRsn_St() <<", ";
        o << "RLHdlStpRsn_St: " << (int)sample.RLHdlStpRsn_St() <<", ";
        o << "FRHdlStpRsn_St: " << (int)sample.FRHdlStpRsn_St() <<", ";
        o << "RRHdlStpRsn_St: " << (int)sample.RRHdlStpRsn_St()  ;
        o <<"]";
        return o;
    }

    // ---- InLt_Set_struct: 

    InLt_Set_struct::InLt_Set_struct() :
        m_TpLtAutoSet_Req_ (0) ,
        m_TpLtClrSet_Req_ (0) ,
        m_TpLtBrtSet_Req_ (0) ,
        m_BckLtBrtSet_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    InLt_Set_struct::InLt_Set_struct (
        uint8_t TpLtAutoSet_Req,
        uint8_t TpLtClrSet_Req,
        uint8_t TpLtBrtSet_Req,
        uint8_t BckLtBrtSet_Req,
        const std::string& CtrlSource)
        :
            m_TpLtAutoSet_Req_( TpLtAutoSet_Req ),
            m_TpLtClrSet_Req_( TpLtClrSet_Req ),
            m_TpLtBrtSet_Req_( TpLtBrtSet_Req ),
            m_BckLtBrtSet_Req_( BckLtBrtSet_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_Set_struct::InLt_Set_struct(InLt_Set_struct&& other_) OMG_NOEXCEPT  :m_TpLtAutoSet_Req_ (std::move(other_.m_TpLtAutoSet_Req_))
    ,
    m_TpLtClrSet_Req_ (std::move(other_.m_TpLtClrSet_Req_))
    ,
    m_TpLtBrtSet_Req_ (std::move(other_.m_TpLtBrtSet_Req_))
    ,
    m_BckLtBrtSet_Req_ (std::move(other_.m_BckLtBrtSet_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    InLt_Set_struct& InLt_Set_struct::operator=(InLt_Set_struct&&  other_) OMG_NOEXCEPT {
        InLt_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void InLt_Set_struct::swap(InLt_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TpLtAutoSet_Req_, other_.m_TpLtAutoSet_Req_);
        swap(m_TpLtClrSet_Req_, other_.m_TpLtClrSet_Req_);
        swap(m_TpLtBrtSet_Req_, other_.m_TpLtBrtSet_Req_);
        swap(m_BckLtBrtSet_Req_, other_.m_BckLtBrtSet_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool InLt_Set_struct::operator == (const InLt_Set_struct& other_) const {
        if (m_TpLtAutoSet_Req_ != other_.m_TpLtAutoSet_Req_) {
            return false;
        }
        if (m_TpLtClrSet_Req_ != other_.m_TpLtClrSet_Req_) {
            return false;
        }
        if (m_TpLtBrtSet_Req_ != other_.m_TpLtBrtSet_Req_) {
            return false;
        }
        if (m_BckLtBrtSet_Req_ != other_.m_BckLtBrtSet_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool InLt_Set_struct::operator != (const InLt_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TpLtAutoSet_Req: " << (int)sample.TpLtAutoSet_Req() <<", ";
        o << "TpLtClrSet_Req: " << (int)sample.TpLtClrSet_Req() <<", ";
        o << "TpLtBrtSet_Req: " << (int)sample.TpLtBrtSet_Req() <<", ";
        o << "BckLtBrtSet_Req: " << (int)sample.BckLtBrtSet_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- InLt_Get_struct: 

    InLt_Get_struct::InLt_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    InLt_Get_struct::InLt_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_Get_struct::InLt_Get_struct(InLt_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    InLt_Get_struct& InLt_Get_struct::operator=(InLt_Get_struct&&  other_) OMG_NOEXCEPT {
        InLt_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void InLt_Get_struct::swap(InLt_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool InLt_Get_struct::operator == (const InLt_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool InLt_Get_struct::operator != (const InLt_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- InLt_Rsp_struct: 

    InLt_Rsp_struct::InLt_Rsp_struct() :
        m_TpLtAutoSet_Rsp_ (0) ,
        m_TpLtClrSet_Rsp_ (0) ,
        m_TpLtBrtSet_Rsp_ (0) ,
        m_BckLtBrtSet_Rsp_ (0)  {
    }   

    InLt_Rsp_struct::InLt_Rsp_struct (
        uint8_t TpLtAutoSet_Rsp,
        uint8_t TpLtClrSet_Rsp,
        uint8_t TpLtBrtSet_Rsp,
        uint8_t BckLtBrtSet_Rsp)
        :
            m_TpLtAutoSet_Rsp_( TpLtAutoSet_Rsp ),
            m_TpLtClrSet_Rsp_( TpLtClrSet_Rsp ),
            m_TpLtBrtSet_Rsp_( TpLtBrtSet_Rsp ),
            m_BckLtBrtSet_Rsp_( BckLtBrtSet_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_Rsp_struct::InLt_Rsp_struct(InLt_Rsp_struct&& other_) OMG_NOEXCEPT  :m_TpLtAutoSet_Rsp_ (std::move(other_.m_TpLtAutoSet_Rsp_))
    ,
    m_TpLtClrSet_Rsp_ (std::move(other_.m_TpLtClrSet_Rsp_))
    ,
    m_TpLtBrtSet_Rsp_ (std::move(other_.m_TpLtBrtSet_Rsp_))
    ,
    m_BckLtBrtSet_Rsp_ (std::move(other_.m_BckLtBrtSet_Rsp_))
    {
    } 

    InLt_Rsp_struct& InLt_Rsp_struct::operator=(InLt_Rsp_struct&&  other_) OMG_NOEXCEPT {
        InLt_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void InLt_Rsp_struct::swap(InLt_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TpLtAutoSet_Rsp_, other_.m_TpLtAutoSet_Rsp_);
        swap(m_TpLtClrSet_Rsp_, other_.m_TpLtClrSet_Rsp_);
        swap(m_TpLtBrtSet_Rsp_, other_.m_TpLtBrtSet_Rsp_);
        swap(m_BckLtBrtSet_Rsp_, other_.m_BckLtBrtSet_Rsp_);
    }  

    bool InLt_Rsp_struct::operator == (const InLt_Rsp_struct& other_) const {
        if (m_TpLtAutoSet_Rsp_ != other_.m_TpLtAutoSet_Rsp_) {
            return false;
        }
        if (m_TpLtClrSet_Rsp_ != other_.m_TpLtClrSet_Rsp_) {
            return false;
        }
        if (m_TpLtBrtSet_Rsp_ != other_.m_TpLtBrtSet_Rsp_) {
            return false;
        }
        if (m_BckLtBrtSet_Rsp_ != other_.m_BckLtBrtSet_Rsp_) {
            return false;
        }
        return true;
    }
    bool InLt_Rsp_struct::operator != (const InLt_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TpLtAutoSet_Rsp: " << (int)sample.TpLtAutoSet_Rsp() <<", ";
        o << "TpLtClrSet_Rsp: " << (int)sample.TpLtClrSet_Rsp() <<", ";
        o << "TpLtBrtSet_Rsp: " << (int)sample.TpLtBrtSet_Rsp() <<", ";
        o << "BckLtBrtSet_Rsp: " << (int)sample.BckLtBrtSet_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- InLt_Ctrl_struct: 

    InLt_Ctrl_struct::InLt_Ctrl_struct() :
        m_TpLtBtn_Act_ (0) ,
        m_TpLtSearch_Act_ (0) ,
        m_FLTpLtRead_Act_ (0) ,
        m_RLTpLtRead_Act_ (0) ,
        m_FRTpLtRead_Act_ (0) ,
        m_RRTpLtRead_Act_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    InLt_Ctrl_struct::InLt_Ctrl_struct (
        uint8_t TpLtBtn_Act,
        uint8_t TpLtSearch_Act,
        uint8_t FLTpLtRead_Act,
        uint8_t RLTpLtRead_Act,
        uint8_t FRTpLtRead_Act,
        uint8_t RRTpLtRead_Act,
        const std::string& CtrlSource)
        :
            m_TpLtBtn_Act_( TpLtBtn_Act ),
            m_TpLtSearch_Act_( TpLtSearch_Act ),
            m_FLTpLtRead_Act_( FLTpLtRead_Act ),
            m_RLTpLtRead_Act_( RLTpLtRead_Act ),
            m_FRTpLtRead_Act_( FRTpLtRead_Act ),
            m_RRTpLtRead_Act_( RRTpLtRead_Act ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_Ctrl_struct::InLt_Ctrl_struct(InLt_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_TpLtBtn_Act_ (std::move(other_.m_TpLtBtn_Act_))
    ,
    m_TpLtSearch_Act_ (std::move(other_.m_TpLtSearch_Act_))
    ,
    m_FLTpLtRead_Act_ (std::move(other_.m_FLTpLtRead_Act_))
    ,
    m_RLTpLtRead_Act_ (std::move(other_.m_RLTpLtRead_Act_))
    ,
    m_FRTpLtRead_Act_ (std::move(other_.m_FRTpLtRead_Act_))
    ,
    m_RRTpLtRead_Act_ (std::move(other_.m_RRTpLtRead_Act_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    InLt_Ctrl_struct& InLt_Ctrl_struct::operator=(InLt_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        InLt_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void InLt_Ctrl_struct::swap(InLt_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TpLtBtn_Act_, other_.m_TpLtBtn_Act_);
        swap(m_TpLtSearch_Act_, other_.m_TpLtSearch_Act_);
        swap(m_FLTpLtRead_Act_, other_.m_FLTpLtRead_Act_);
        swap(m_RLTpLtRead_Act_, other_.m_RLTpLtRead_Act_);
        swap(m_FRTpLtRead_Act_, other_.m_FRTpLtRead_Act_);
        swap(m_RRTpLtRead_Act_, other_.m_RRTpLtRead_Act_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool InLt_Ctrl_struct::operator == (const InLt_Ctrl_struct& other_) const {
        if (m_TpLtBtn_Act_ != other_.m_TpLtBtn_Act_) {
            return false;
        }
        if (m_TpLtSearch_Act_ != other_.m_TpLtSearch_Act_) {
            return false;
        }
        if (m_FLTpLtRead_Act_ != other_.m_FLTpLtRead_Act_) {
            return false;
        }
        if (m_RLTpLtRead_Act_ != other_.m_RLTpLtRead_Act_) {
            return false;
        }
        if (m_FRTpLtRead_Act_ != other_.m_FRTpLtRead_Act_) {
            return false;
        }
        if (m_RRTpLtRead_Act_ != other_.m_RRTpLtRead_Act_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool InLt_Ctrl_struct::operator != (const InLt_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TpLtBtn_Act: " << (int)sample.TpLtBtn_Act() <<", ";
        o << "TpLtSearch_Act: " << (int)sample.TpLtSearch_Act() <<", ";
        o << "FLTpLtRead_Act: " << (int)sample.FLTpLtRead_Act() <<", ";
        o << "RLTpLtRead_Act: " << (int)sample.RLTpLtRead_Act() <<", ";
        o << "FRTpLtRead_Act: " << (int)sample.FRTpLtRead_Act() <<", ";
        o << "RRTpLtRead_Act: " << (int)sample.RRTpLtRead_Act() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- InLt_Ctrl_SOA_struct: 

    InLt_Ctrl_SOA_struct::InLt_Ctrl_SOA_struct() :
        m_InLt_Ctrl_SOA_u8_ (0)  {
    }   

    InLt_Ctrl_SOA_struct::InLt_Ctrl_SOA_struct (
        uint8_t InLt_Ctrl_SOA_u8)
        :
            m_InLt_Ctrl_SOA_u8_( InLt_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_Ctrl_SOA_struct::InLt_Ctrl_SOA_struct(InLt_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_InLt_Ctrl_SOA_u8_ (std::move(other_.m_InLt_Ctrl_SOA_u8_))
    {
    } 

    InLt_Ctrl_SOA_struct& InLt_Ctrl_SOA_struct::operator=(InLt_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        InLt_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void InLt_Ctrl_SOA_struct::swap(InLt_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_InLt_Ctrl_SOA_u8_, other_.m_InLt_Ctrl_SOA_u8_);
    }  

    bool InLt_Ctrl_SOA_struct::operator == (const InLt_Ctrl_SOA_struct& other_) const {
        if (m_InLt_Ctrl_SOA_u8_ != other_.m_InLt_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool InLt_Ctrl_SOA_struct::operator != (const InLt_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "InLt_Ctrl_SOA_u8: " << (int)sample.InLt_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- InLt_St_Get_struct: 

    InLt_St_Get_struct::InLt_St_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    InLt_St_Get_struct::InLt_St_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_St_Get_struct::InLt_St_Get_struct(InLt_St_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    InLt_St_Get_struct& InLt_St_Get_struct::operator=(InLt_St_Get_struct&&  other_) OMG_NOEXCEPT {
        InLt_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void InLt_St_Get_struct::swap(InLt_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool InLt_St_Get_struct::operator == (const InLt_St_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool InLt_St_Get_struct::operator != (const InLt_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- InLt_St_struct: 

    InLt_St_struct::InLt_St_struct() :
        m_TpLtWrk_St_ (0) ,
        m_TpLtSearch_St_ (0) ,
        m_FLTpLtRead_St_ (0) ,
        m_RLTpLtRead_St_ (0) ,
        m_FRTpLtRead_St_ (0) ,
        m_RRTpLtRead_St_ (0)  {
    }   

    InLt_St_struct::InLt_St_struct (
        uint8_t TpLtWrk_St,
        uint8_t TpLtSearch_St,
        uint8_t FLTpLtRead_St,
        uint8_t RLTpLtRead_St,
        uint8_t FRTpLtRead_St,
        uint8_t RRTpLtRead_St)
        :
            m_TpLtWrk_St_( TpLtWrk_St ),
            m_TpLtSearch_St_( TpLtSearch_St ),
            m_FLTpLtRead_St_( FLTpLtRead_St ),
            m_RLTpLtRead_St_( RLTpLtRead_St ),
            m_FRTpLtRead_St_( FRTpLtRead_St ),
            m_RRTpLtRead_St_( RRTpLtRead_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_St_struct::InLt_St_struct(InLt_St_struct&& other_) OMG_NOEXCEPT  :m_TpLtWrk_St_ (std::move(other_.m_TpLtWrk_St_))
    ,
    m_TpLtSearch_St_ (std::move(other_.m_TpLtSearch_St_))
    ,
    m_FLTpLtRead_St_ (std::move(other_.m_FLTpLtRead_St_))
    ,
    m_RLTpLtRead_St_ (std::move(other_.m_RLTpLtRead_St_))
    ,
    m_FRTpLtRead_St_ (std::move(other_.m_FRTpLtRead_St_))
    ,
    m_RRTpLtRead_St_ (std::move(other_.m_RRTpLtRead_St_))
    {
    } 

    InLt_St_struct& InLt_St_struct::operator=(InLt_St_struct&&  other_) OMG_NOEXCEPT {
        InLt_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void InLt_St_struct::swap(InLt_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TpLtWrk_St_, other_.m_TpLtWrk_St_);
        swap(m_TpLtSearch_St_, other_.m_TpLtSearch_St_);
        swap(m_FLTpLtRead_St_, other_.m_FLTpLtRead_St_);
        swap(m_RLTpLtRead_St_, other_.m_RLTpLtRead_St_);
        swap(m_FRTpLtRead_St_, other_.m_FRTpLtRead_St_);
        swap(m_RRTpLtRead_St_, other_.m_RRTpLtRead_St_);
    }  

    bool InLt_St_struct::operator == (const InLt_St_struct& other_) const {
        if (m_TpLtWrk_St_ != other_.m_TpLtWrk_St_) {
            return false;
        }
        if (m_TpLtSearch_St_ != other_.m_TpLtSearch_St_) {
            return false;
        }
        if (m_FLTpLtRead_St_ != other_.m_FLTpLtRead_St_) {
            return false;
        }
        if (m_RLTpLtRead_St_ != other_.m_RLTpLtRead_St_) {
            return false;
        }
        if (m_FRTpLtRead_St_ != other_.m_FRTpLtRead_St_) {
            return false;
        }
        if (m_RRTpLtRead_St_ != other_.m_RRTpLtRead_St_) {
            return false;
        }
        return true;
    }
    bool InLt_St_struct::operator != (const InLt_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TpLtWrk_St: " << (int)sample.TpLtWrk_St() <<", ";
        o << "TpLtSearch_St: " << (int)sample.TpLtSearch_St() <<", ";
        o << "FLTpLtRead_St: " << (int)sample.FLTpLtRead_St() <<", ";
        o << "RLTpLtRead_St: " << (int)sample.RLTpLtRead_St() <<", ";
        o << "FRTpLtRead_St: " << (int)sample.FRTpLtRead_St() <<", ";
        o << "RRTpLtRead_St: " << (int)sample.RRTpLtRead_St()  ;
        o <<"]";
        return o;
    }

    // ---- InLt_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_Srv_Req_Union::InLt_Srv_Req_Union(InLt_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                InLt_Set( std::move(other_.InLt_Set()));
            } break;
            case 1:
            {  
                InLt_Get( std::move(other_.InLt_Get()));
            } break;
            case 2:
            {  
                InLt_Ctrl( std::move(other_.InLt_Ctrl()));
            } break;
            case 3:
            {  
                InLt_St_Get( std::move(other_.InLt_St_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    InLt_Srv_Req_Union& InLt_Srv_Req_Union::operator=(InLt_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        InLt_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    InLt_Srv_Req_Union::Union_::Union_()  {
    }

    InLt_Srv_Req_Union::Union_::Union_(
        const BodyDomain::InLt_Set_struct& InLt_Set,
        const BodyDomain::InLt_Get_struct& InLt_Get,
        const BodyDomain::InLt_Ctrl_struct& InLt_Ctrl,
        const BodyDomain::InLt_St_Get_struct& InLt_St_Get)
        :
            m_InLt_Set_( InLt_Set ),
            m_InLt_Get_( InLt_Get ),
            m_InLt_Ctrl_( InLt_Ctrl ),
            m_InLt_St_Get_( InLt_St_Get ) {
    }

    InLt_Srv_Req_Union::InLt_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void InLt_Srv_Req_Union::swap(InLt_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_InLt_Set_, other_.m_u_.m_InLt_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_InLt_Get_, other_.m_u_.m_InLt_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_InLt_Ctrl_, other_.m_u_.m_InLt_Ctrl_);
            } break;
            case 3:
            {  
                swap(m_u_.m_InLt_St_Get_, other_.m_u_.m_InLt_St_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_InLt_Set_, other_.m_u_.m_InLt_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_InLt_Get_, other_.m_u_.m_InLt_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_InLt_Ctrl_, other_.m_u_.m_InLt_Ctrl_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_InLt_St_Get_, other_.m_u_.m_InLt_St_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool InLt_Srv_Req_Union::operator == (const InLt_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_InLt_Set_ != other_.m_u_.m_InLt_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_InLt_Get_ != other_.m_u_.m_InLt_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_InLt_Ctrl_ != other_.m_u_.m_InLt_Ctrl_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_InLt_St_Get_ != other_.m_u_.m_InLt_St_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool InLt_Srv_Req_Union::operator != (const InLt_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "InLt_Set: " << sample.InLt_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "InLt_Get: " << sample.InLt_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "InLt_Ctrl: " << sample.InLt_Ctrl()<<", ";
            } break ;
            case 3:
            {  
                o << "InLt_St_Get: " << sample.InLt_St_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t InLt_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- InLt_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    InLt_Srv_Resp_Union::InLt_Srv_Resp_Union(InLt_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                InLt_Set_SOA( std::move(other_.InLt_Set_SOA()));
            } break;
            case 1:
            {  
                InLt_Get_SOA( std::move(other_.InLt_Get_SOA()));
            } break;
            case 2:
            {  
                InLt_Ctrl_SOA( std::move(other_.InLt_Ctrl_SOA()));
            } break;
            case 3:
            {  
                InLt_St_Get_SOA( std::move(other_.InLt_St_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    InLt_Srv_Resp_Union& InLt_Srv_Resp_Union::operator=(InLt_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        InLt_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    InLt_Srv_Resp_Union::Union_::Union_()  {
    }

    InLt_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::InLt_Rsp_struct& InLt_Set_SOA,
        const BodyDomain::InLt_Rsp_struct& InLt_Get_SOA,
        const BodyDomain::InLt_Ctrl_SOA_struct& InLt_Ctrl_SOA,
        const BodyDomain::InLt_St_struct& InLt_St_Get_SOA)
        :
            m_InLt_Set_SOA_( InLt_Set_SOA ),
            m_InLt_Get_SOA_( InLt_Get_SOA ),
            m_InLt_Ctrl_SOA_( InLt_Ctrl_SOA ),
            m_InLt_St_Get_SOA_( InLt_St_Get_SOA ) {
    }

    InLt_Srv_Resp_Union::InLt_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void InLt_Srv_Resp_Union::swap(InLt_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_InLt_Set_SOA_, other_.m_u_.m_InLt_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_InLt_Get_SOA_, other_.m_u_.m_InLt_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_InLt_Ctrl_SOA_, other_.m_u_.m_InLt_Ctrl_SOA_);
            } break;
            case 3:
            {  
                swap(m_u_.m_InLt_St_Get_SOA_, other_.m_u_.m_InLt_St_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_InLt_Set_SOA_, other_.m_u_.m_InLt_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_InLt_Get_SOA_, other_.m_u_.m_InLt_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_InLt_Ctrl_SOA_, other_.m_u_.m_InLt_Ctrl_SOA_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_InLt_St_Get_SOA_, other_.m_u_.m_InLt_St_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool InLt_Srv_Resp_Union::operator == (const InLt_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_InLt_Set_SOA_ != other_.m_u_.m_InLt_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_InLt_Get_SOA_ != other_.m_u_.m_InLt_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_InLt_Ctrl_SOA_ != other_.m_u_.m_InLt_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_InLt_St_Get_SOA_ != other_.m_u_.m_InLt_St_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool InLt_Srv_Resp_Union::operator != (const InLt_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const InLt_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "InLt_Set_SOA: " << sample.InLt_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "InLt_Get_SOA: " << sample.InLt_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "InLt_Ctrl_SOA: " << sample.InLt_Ctrl_SOA()<<", ";
            } break ;
            case 3:
            {  
                o << "InLt_St_Get_SOA: " << sample.InLt_St_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t InLt_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- AmLt_Set_struct: 

    AmLt_Set_struct::AmLt_Set_struct() :
        m_AmLtBtn_Set_ (0) ,
        m_AmLtBrt_Set_ (0) ,
        m_AmLtMode_Set_ (0) ,
        m_AmLtCustomClr_Set_ (0) ,
        m_AmLtAutoBrt_Set_ (0) ,
        m_AmLtBrtFollow_Set_ (0) ,
        m_AmLtVoice_Set_ (0) ,
        m_Welcome_Set_ (0) ,
        m_AmLtMusic_Set_ (0) ,
        m_AmLtTemp_Set_ (0) ,
        m_AmLtMedRedVal_Set_ (0) ,
        m_AmLtMedGreenVal_Set_ (0) ,
        m_AmLtMedBlueVal_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    AmLt_Set_struct::AmLt_Set_struct (
        uint8_t AmLtBtn_Set,
        uint8_t AmLtBrt_Set,
        uint8_t AmLtMode_Set,
        uint16_t AmLtCustomClr_Set,
        uint8_t AmLtAutoBrt_Set,
        uint8_t AmLtBrtFollow_Set,
        uint8_t AmLtVoice_Set,
        uint8_t Welcome_Set,
        uint8_t AmLtMusic_Set,
        uint8_t AmLtTemp_Set,
        uint16_t AmLtMedRedVal_Set,
        uint16_t AmLtMedGreenVal_Set,
        uint16_t AmLtMedBlueVal_Set,
        const std::string& CtrlSource)
        :
            m_AmLtBtn_Set_( AmLtBtn_Set ),
            m_AmLtBrt_Set_( AmLtBrt_Set ),
            m_AmLtMode_Set_( AmLtMode_Set ),
            m_AmLtCustomClr_Set_( AmLtCustomClr_Set ),
            m_AmLtAutoBrt_Set_( AmLtAutoBrt_Set ),
            m_AmLtBrtFollow_Set_( AmLtBrtFollow_Set ),
            m_AmLtVoice_Set_( AmLtVoice_Set ),
            m_Welcome_Set_( Welcome_Set ),
            m_AmLtMusic_Set_( AmLtMusic_Set ),
            m_AmLtTemp_Set_( AmLtTemp_Set ),
            m_AmLtMedRedVal_Set_( AmLtMedRedVal_Set ),
            m_AmLtMedGreenVal_Set_( AmLtMedGreenVal_Set ),
            m_AmLtMedBlueVal_Set_( AmLtMedBlueVal_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AmLt_Set_struct::AmLt_Set_struct(AmLt_Set_struct&& other_) OMG_NOEXCEPT  :m_AmLtBtn_Set_ (std::move(other_.m_AmLtBtn_Set_))
    ,
    m_AmLtBrt_Set_ (std::move(other_.m_AmLtBrt_Set_))
    ,
    m_AmLtMode_Set_ (std::move(other_.m_AmLtMode_Set_))
    ,
    m_AmLtCustomClr_Set_ (std::move(other_.m_AmLtCustomClr_Set_))
    ,
    m_AmLtAutoBrt_Set_ (std::move(other_.m_AmLtAutoBrt_Set_))
    ,
    m_AmLtBrtFollow_Set_ (std::move(other_.m_AmLtBrtFollow_Set_))
    ,
    m_AmLtVoice_Set_ (std::move(other_.m_AmLtVoice_Set_))
    ,
    m_Welcome_Set_ (std::move(other_.m_Welcome_Set_))
    ,
    m_AmLtMusic_Set_ (std::move(other_.m_AmLtMusic_Set_))
    ,
    m_AmLtTemp_Set_ (std::move(other_.m_AmLtTemp_Set_))
    ,
    m_AmLtMedRedVal_Set_ (std::move(other_.m_AmLtMedRedVal_Set_))
    ,
    m_AmLtMedGreenVal_Set_ (std::move(other_.m_AmLtMedGreenVal_Set_))
    ,
    m_AmLtMedBlueVal_Set_ (std::move(other_.m_AmLtMedBlueVal_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    AmLt_Set_struct& AmLt_Set_struct::operator=(AmLt_Set_struct&&  other_) OMG_NOEXCEPT {
        AmLt_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void AmLt_Set_struct::swap(AmLt_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_AmLtBtn_Set_, other_.m_AmLtBtn_Set_);
        swap(m_AmLtBrt_Set_, other_.m_AmLtBrt_Set_);
        swap(m_AmLtMode_Set_, other_.m_AmLtMode_Set_);
        swap(m_AmLtCustomClr_Set_, other_.m_AmLtCustomClr_Set_);
        swap(m_AmLtAutoBrt_Set_, other_.m_AmLtAutoBrt_Set_);
        swap(m_AmLtBrtFollow_Set_, other_.m_AmLtBrtFollow_Set_);
        swap(m_AmLtVoice_Set_, other_.m_AmLtVoice_Set_);
        swap(m_Welcome_Set_, other_.m_Welcome_Set_);
        swap(m_AmLtMusic_Set_, other_.m_AmLtMusic_Set_);
        swap(m_AmLtTemp_Set_, other_.m_AmLtTemp_Set_);
        swap(m_AmLtMedRedVal_Set_, other_.m_AmLtMedRedVal_Set_);
        swap(m_AmLtMedGreenVal_Set_, other_.m_AmLtMedGreenVal_Set_);
        swap(m_AmLtMedBlueVal_Set_, other_.m_AmLtMedBlueVal_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool AmLt_Set_struct::operator == (const AmLt_Set_struct& other_) const {
        if (m_AmLtBtn_Set_ != other_.m_AmLtBtn_Set_) {
            return false;
        }
        if (m_AmLtBrt_Set_ != other_.m_AmLtBrt_Set_) {
            return false;
        }
        if (m_AmLtMode_Set_ != other_.m_AmLtMode_Set_) {
            return false;
        }
        if (m_AmLtCustomClr_Set_ != other_.m_AmLtCustomClr_Set_) {
            return false;
        }
        if (m_AmLtAutoBrt_Set_ != other_.m_AmLtAutoBrt_Set_) {
            return false;
        }
        if (m_AmLtBrtFollow_Set_ != other_.m_AmLtBrtFollow_Set_) {
            return false;
        }
        if (m_AmLtVoice_Set_ != other_.m_AmLtVoice_Set_) {
            return false;
        }
        if (m_Welcome_Set_ != other_.m_Welcome_Set_) {
            return false;
        }
        if (m_AmLtMusic_Set_ != other_.m_AmLtMusic_Set_) {
            return false;
        }
        if (m_AmLtTemp_Set_ != other_.m_AmLtTemp_Set_) {
            return false;
        }
        if (m_AmLtMedRedVal_Set_ != other_.m_AmLtMedRedVal_Set_) {
            return false;
        }
        if (m_AmLtMedGreenVal_Set_ != other_.m_AmLtMedGreenVal_Set_) {
            return false;
        }
        if (m_AmLtMedBlueVal_Set_ != other_.m_AmLtMedBlueVal_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool AmLt_Set_struct::operator != (const AmLt_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AmLt_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "AmLtBtn_Set: " << (int)sample.AmLtBtn_Set() <<", ";
        o << "AmLtBrt_Set: " << (int)sample.AmLtBrt_Set() <<", ";
        o << "AmLtMode_Set: " << (int)sample.AmLtMode_Set() <<", ";
        o << "AmLtCustomClr_Set: " << sample.AmLtCustomClr_Set()<<", ";
        o << "AmLtAutoBrt_Set: " << (int)sample.AmLtAutoBrt_Set() <<", ";
        o << "AmLtBrtFollow_Set: " << (int)sample.AmLtBrtFollow_Set() <<", ";
        o << "AmLtVoice_Set: " << (int)sample.AmLtVoice_Set() <<", ";
        o << "Welcome_Set: " << (int)sample.Welcome_Set() <<", ";
        o << "AmLtMusic_Set: " << (int)sample.AmLtMusic_Set() <<", ";
        o << "AmLtTemp_Set: " << (int)sample.AmLtTemp_Set() <<", ";
        o << "AmLtMedRedVal_Set: " << sample.AmLtMedRedVal_Set()<<", ";
        o << "AmLtMedGreenVal_Set: " << sample.AmLtMedGreenVal_Set()<<", ";
        o << "AmLtMedBlueVal_Set: " << sample.AmLtMedBlueVal_Set()<<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- AmLt_Get_struct: 

    AmLt_Get_struct::AmLt_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    AmLt_Get_struct::AmLt_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AmLt_Get_struct::AmLt_Get_struct(AmLt_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    AmLt_Get_struct& AmLt_Get_struct::operator=(AmLt_Get_struct&&  other_) OMG_NOEXCEPT {
        AmLt_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void AmLt_Get_struct::swap(AmLt_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool AmLt_Get_struct::operator == (const AmLt_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool AmLt_Get_struct::operator != (const AmLt_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AmLt_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- AmLt_Rsp_struct: 

    AmLt_Rsp_struct::AmLt_Rsp_struct() :
        m_AmLtBtn_Rsp_ (0) ,
        m_AmLtBrt_Rsp_ (0) ,
        m_AmLtMode_Rsp_ (0) ,
        m_AmLtCustomClr_Rsp_ (0) ,
        m_AmLtAutoBrt_Rsp_ (0) ,
        m_AmLtBrtFollow_Rsp_ (0) ,
        m_AmLtVoice_Rsp_ (0) ,
        m_AmLtWelcome_Rsp_ (0) ,
        m_AmLtMusic_Rsp_ (0) ,
        m_AmLtTemp_Rsp_ (0)  {
    }   

    AmLt_Rsp_struct::AmLt_Rsp_struct (
        uint8_t AmLtBtn_Rsp,
        uint8_t AmLtBrt_Rsp,
        uint8_t AmLtMode_Rsp,
        uint16_t AmLtCustomClr_Rsp,
        uint8_t AmLtAutoBrt_Rsp,
        uint8_t AmLtBrtFollow_Rsp,
        uint8_t AmLtVoice_Rsp,
        uint8_t AmLtWelcome_Rsp,
        uint8_t AmLtMusic_Rsp,
        uint8_t AmLtTemp_Rsp)
        :
            m_AmLtBtn_Rsp_( AmLtBtn_Rsp ),
            m_AmLtBrt_Rsp_( AmLtBrt_Rsp ),
            m_AmLtMode_Rsp_( AmLtMode_Rsp ),
            m_AmLtCustomClr_Rsp_( AmLtCustomClr_Rsp ),
            m_AmLtAutoBrt_Rsp_( AmLtAutoBrt_Rsp ),
            m_AmLtBrtFollow_Rsp_( AmLtBrtFollow_Rsp ),
            m_AmLtVoice_Rsp_( AmLtVoice_Rsp ),
            m_AmLtWelcome_Rsp_( AmLtWelcome_Rsp ),
            m_AmLtMusic_Rsp_( AmLtMusic_Rsp ),
            m_AmLtTemp_Rsp_( AmLtTemp_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AmLt_Rsp_struct::AmLt_Rsp_struct(AmLt_Rsp_struct&& other_) OMG_NOEXCEPT  :m_AmLtBtn_Rsp_ (std::move(other_.m_AmLtBtn_Rsp_))
    ,
    m_AmLtBrt_Rsp_ (std::move(other_.m_AmLtBrt_Rsp_))
    ,
    m_AmLtMode_Rsp_ (std::move(other_.m_AmLtMode_Rsp_))
    ,
    m_AmLtCustomClr_Rsp_ (std::move(other_.m_AmLtCustomClr_Rsp_))
    ,
    m_AmLtAutoBrt_Rsp_ (std::move(other_.m_AmLtAutoBrt_Rsp_))
    ,
    m_AmLtBrtFollow_Rsp_ (std::move(other_.m_AmLtBrtFollow_Rsp_))
    ,
    m_AmLtVoice_Rsp_ (std::move(other_.m_AmLtVoice_Rsp_))
    ,
    m_AmLtWelcome_Rsp_ (std::move(other_.m_AmLtWelcome_Rsp_))
    ,
    m_AmLtMusic_Rsp_ (std::move(other_.m_AmLtMusic_Rsp_))
    ,
    m_AmLtTemp_Rsp_ (std::move(other_.m_AmLtTemp_Rsp_))
    {
    } 

    AmLt_Rsp_struct& AmLt_Rsp_struct::operator=(AmLt_Rsp_struct&&  other_) OMG_NOEXCEPT {
        AmLt_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void AmLt_Rsp_struct::swap(AmLt_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_AmLtBtn_Rsp_, other_.m_AmLtBtn_Rsp_);
        swap(m_AmLtBrt_Rsp_, other_.m_AmLtBrt_Rsp_);
        swap(m_AmLtMode_Rsp_, other_.m_AmLtMode_Rsp_);
        swap(m_AmLtCustomClr_Rsp_, other_.m_AmLtCustomClr_Rsp_);
        swap(m_AmLtAutoBrt_Rsp_, other_.m_AmLtAutoBrt_Rsp_);
        swap(m_AmLtBrtFollow_Rsp_, other_.m_AmLtBrtFollow_Rsp_);
        swap(m_AmLtVoice_Rsp_, other_.m_AmLtVoice_Rsp_);
        swap(m_AmLtWelcome_Rsp_, other_.m_AmLtWelcome_Rsp_);
        swap(m_AmLtMusic_Rsp_, other_.m_AmLtMusic_Rsp_);
        swap(m_AmLtTemp_Rsp_, other_.m_AmLtTemp_Rsp_);
    }  

    bool AmLt_Rsp_struct::operator == (const AmLt_Rsp_struct& other_) const {
        if (m_AmLtBtn_Rsp_ != other_.m_AmLtBtn_Rsp_) {
            return false;
        }
        if (m_AmLtBrt_Rsp_ != other_.m_AmLtBrt_Rsp_) {
            return false;
        }
        if (m_AmLtMode_Rsp_ != other_.m_AmLtMode_Rsp_) {
            return false;
        }
        if (m_AmLtCustomClr_Rsp_ != other_.m_AmLtCustomClr_Rsp_) {
            return false;
        }
        if (m_AmLtAutoBrt_Rsp_ != other_.m_AmLtAutoBrt_Rsp_) {
            return false;
        }
        if (m_AmLtBrtFollow_Rsp_ != other_.m_AmLtBrtFollow_Rsp_) {
            return false;
        }
        if (m_AmLtVoice_Rsp_ != other_.m_AmLtVoice_Rsp_) {
            return false;
        }
        if (m_AmLtWelcome_Rsp_ != other_.m_AmLtWelcome_Rsp_) {
            return false;
        }
        if (m_AmLtMusic_Rsp_ != other_.m_AmLtMusic_Rsp_) {
            return false;
        }
        if (m_AmLtTemp_Rsp_ != other_.m_AmLtTemp_Rsp_) {
            return false;
        }
        return true;
    }
    bool AmLt_Rsp_struct::operator != (const AmLt_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AmLt_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "AmLtBtn_Rsp: " << (int)sample.AmLtBtn_Rsp() <<", ";
        o << "AmLtBrt_Rsp: " << (int)sample.AmLtBrt_Rsp() <<", ";
        o << "AmLtMode_Rsp: " << (int)sample.AmLtMode_Rsp() <<", ";
        o << "AmLtCustomClr_Rsp: " << sample.AmLtCustomClr_Rsp()<<", ";
        o << "AmLtAutoBrt_Rsp: " << (int)sample.AmLtAutoBrt_Rsp() <<", ";
        o << "AmLtBrtFollow_Rsp: " << (int)sample.AmLtBrtFollow_Rsp() <<", ";
        o << "AmLtVoice_Rsp: " << (int)sample.AmLtVoice_Rsp() <<", ";
        o << "AmLtWelcome_Rsp: " << (int)sample.AmLtWelcome_Rsp() <<", ";
        o << "AmLtMusic_Rsp: " << (int)sample.AmLtMusic_Rsp() <<", ";
        o << "AmLtTemp_Rsp: " << (int)sample.AmLtTemp_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- AmLt_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AmLt_Srv_Req_Union::AmLt_Srv_Req_Union(AmLt_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                AmLt_Set( std::move(other_.AmLt_Set()));
            } break;
            case 1:
            {  
                AmLt_Get( std::move(other_.AmLt_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    AmLt_Srv_Req_Union& AmLt_Srv_Req_Union::operator=(AmLt_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        AmLt_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    AmLt_Srv_Req_Union::Union_::Union_()  {
    }

    AmLt_Srv_Req_Union::Union_::Union_(
        const BodyDomain::AmLt_Set_struct& AmLt_Set,
        const BodyDomain::AmLt_Get_struct& AmLt_Get)
        :
            m_AmLt_Set_( AmLt_Set ),
            m_AmLt_Get_( AmLt_Get ) {
    }

    AmLt_Srv_Req_Union::AmLt_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void AmLt_Srv_Req_Union::swap(AmLt_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_AmLt_Set_, other_.m_u_.m_AmLt_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_AmLt_Get_, other_.m_u_.m_AmLt_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_AmLt_Set_, other_.m_u_.m_AmLt_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_AmLt_Get_, other_.m_u_.m_AmLt_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool AmLt_Srv_Req_Union::operator == (const AmLt_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_AmLt_Set_ != other_.m_u_.m_AmLt_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_AmLt_Get_ != other_.m_u_.m_AmLt_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool AmLt_Srv_Req_Union::operator != (const AmLt_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AmLt_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "AmLt_Set: " << sample.AmLt_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "AmLt_Get: " << sample.AmLt_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t AmLt_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- AmLt_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AmLt_Srv_Resp_Union::AmLt_Srv_Resp_Union(AmLt_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                AmLt_Set_SOA( std::move(other_.AmLt_Set_SOA()));
            } break;
            case 1:
            {  
                AmLt_Get_SOA( std::move(other_.AmLt_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    AmLt_Srv_Resp_Union& AmLt_Srv_Resp_Union::operator=(AmLt_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        AmLt_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    AmLt_Srv_Resp_Union::Union_::Union_()  {
    }

    AmLt_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::AmLt_Rsp_struct& AmLt_Set_SOA,
        const BodyDomain::AmLt_Rsp_struct& AmLt_Get_SOA)
        :
            m_AmLt_Set_SOA_( AmLt_Set_SOA ),
            m_AmLt_Get_SOA_( AmLt_Get_SOA ) {
    }

    AmLt_Srv_Resp_Union::AmLt_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void AmLt_Srv_Resp_Union::swap(AmLt_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_AmLt_Set_SOA_, other_.m_u_.m_AmLt_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_AmLt_Get_SOA_, other_.m_u_.m_AmLt_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_AmLt_Set_SOA_, other_.m_u_.m_AmLt_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_AmLt_Get_SOA_, other_.m_u_.m_AmLt_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool AmLt_Srv_Resp_Union::operator == (const AmLt_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_AmLt_Set_SOA_ != other_.m_u_.m_AmLt_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_AmLt_Get_SOA_ != other_.m_u_.m_AmLt_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool AmLt_Srv_Resp_Union::operator != (const AmLt_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AmLt_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "AmLt_Set_SOA: " << sample.AmLt_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "AmLt_Get_SOA: " << sample.AmLt_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t AmLt_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- ExtLt_Ctrl_Struct: 

    ExtLt_Ctrl_Struct::ExtLt_Ctrl_Struct() :
        m_TurnLight_Req_ (0) ,
        m_EtnlLgt_Req_ (0) ,
        m_HighBeam_Req_ (0) ,
        m_HDBI_RearFogBm_Req_ (0) ,
        m_FollowMeHome_Req_ (0) ,
        m_LgtHeightAdjSet_Req_ (0) ,
        m_AHB_Req_ (0) ,
        m_HzrdSW_St_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    ExtLt_Ctrl_Struct::ExtLt_Ctrl_Struct (
        uint8_t TurnLight_Req,
        uint8_t EtnlLgt_Req,
        uint8_t HighBeam_Req,
        uint8_t HDBI_RearFogBm_Req,
        uint8_t FollowMeHome_Req,
        uint8_t LgtHeightAdjSet_Req,
        uint8_t AHB_Req,
        uint8_t HzrdSW_St,
        const std::string& CtrlSource)
        :
            m_TurnLight_Req_( TurnLight_Req ),
            m_EtnlLgt_Req_( EtnlLgt_Req ),
            m_HighBeam_Req_( HighBeam_Req ),
            m_HDBI_RearFogBm_Req_( HDBI_RearFogBm_Req ),
            m_FollowMeHome_Req_( FollowMeHome_Req ),
            m_LgtHeightAdjSet_Req_( LgtHeightAdjSet_Req ),
            m_AHB_Req_( AHB_Req ),
            m_HzrdSW_St_( HzrdSW_St ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    ExtLt_Ctrl_Struct::ExtLt_Ctrl_Struct(ExtLt_Ctrl_Struct&& other_) OMG_NOEXCEPT  :m_TurnLight_Req_ (std::move(other_.m_TurnLight_Req_))
    ,
    m_EtnlLgt_Req_ (std::move(other_.m_EtnlLgt_Req_))
    ,
    m_HighBeam_Req_ (std::move(other_.m_HighBeam_Req_))
    ,
    m_HDBI_RearFogBm_Req_ (std::move(other_.m_HDBI_RearFogBm_Req_))
    ,
    m_FollowMeHome_Req_ (std::move(other_.m_FollowMeHome_Req_))
    ,
    m_LgtHeightAdjSet_Req_ (std::move(other_.m_LgtHeightAdjSet_Req_))
    ,
    m_AHB_Req_ (std::move(other_.m_AHB_Req_))
    ,
    m_HzrdSW_St_ (std::move(other_.m_HzrdSW_St_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    ExtLt_Ctrl_Struct& ExtLt_Ctrl_Struct::operator=(ExtLt_Ctrl_Struct&&  other_) OMG_NOEXCEPT {
        ExtLt_Ctrl_Struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void ExtLt_Ctrl_Struct::swap(ExtLt_Ctrl_Struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TurnLight_Req_, other_.m_TurnLight_Req_);
        swap(m_EtnlLgt_Req_, other_.m_EtnlLgt_Req_);
        swap(m_HighBeam_Req_, other_.m_HighBeam_Req_);
        swap(m_HDBI_RearFogBm_Req_, other_.m_HDBI_RearFogBm_Req_);
        swap(m_FollowMeHome_Req_, other_.m_FollowMeHome_Req_);
        swap(m_LgtHeightAdjSet_Req_, other_.m_LgtHeightAdjSet_Req_);
        swap(m_AHB_Req_, other_.m_AHB_Req_);
        swap(m_HzrdSW_St_, other_.m_HzrdSW_St_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool ExtLt_Ctrl_Struct::operator == (const ExtLt_Ctrl_Struct& other_) const {
        if (m_TurnLight_Req_ != other_.m_TurnLight_Req_) {
            return false;
        }
        if (m_EtnlLgt_Req_ != other_.m_EtnlLgt_Req_) {
            return false;
        }
        if (m_HighBeam_Req_ != other_.m_HighBeam_Req_) {
            return false;
        }
        if (m_HDBI_RearFogBm_Req_ != other_.m_HDBI_RearFogBm_Req_) {
            return false;
        }
        if (m_FollowMeHome_Req_ != other_.m_FollowMeHome_Req_) {
            return false;
        }
        if (m_LgtHeightAdjSet_Req_ != other_.m_LgtHeightAdjSet_Req_) {
            return false;
        }
        if (m_AHB_Req_ != other_.m_AHB_Req_) {
            return false;
        }
        if (m_HzrdSW_St_ != other_.m_HzrdSW_St_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool ExtLt_Ctrl_Struct::operator != (const ExtLt_Ctrl_Struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const ExtLt_Ctrl_Struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TurnLight_Req: " << (int)sample.TurnLight_Req() <<", ";
        o << "EtnlLgt_Req: " << (int)sample.EtnlLgt_Req() <<", ";
        o << "HighBeam_Req: " << (int)sample.HighBeam_Req() <<", ";
        o << "HDBI_RearFogBm_Req: " << (int)sample.HDBI_RearFogBm_Req() <<", ";
        o << "FollowMeHome_Req: " << (int)sample.FollowMeHome_Req() <<", ";
        o << "LgtHeightAdjSet_Req: " << (int)sample.LgtHeightAdjSet_Req() <<", ";
        o << "AHB_Req: " << (int)sample.AHB_Req() <<", ";
        o << "HzrdSW_St: " << (int)sample.HzrdSW_St() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- ExtLt_Ctrl_SOA_struct: 

    ExtLt_Ctrl_SOA_struct::ExtLt_Ctrl_SOA_struct() :
        m_ExtLt_Ctrl_SOA_u8_ (0)  {
    }   

    ExtLt_Ctrl_SOA_struct::ExtLt_Ctrl_SOA_struct (
        uint8_t ExtLt_Ctrl_SOA_u8)
        :
            m_ExtLt_Ctrl_SOA_u8_( ExtLt_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    ExtLt_Ctrl_SOA_struct::ExtLt_Ctrl_SOA_struct(ExtLt_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_ExtLt_Ctrl_SOA_u8_ (std::move(other_.m_ExtLt_Ctrl_SOA_u8_))
    {
    } 

    ExtLt_Ctrl_SOA_struct& ExtLt_Ctrl_SOA_struct::operator=(ExtLt_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        ExtLt_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void ExtLt_Ctrl_SOA_struct::swap(ExtLt_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ExtLt_Ctrl_SOA_u8_, other_.m_ExtLt_Ctrl_SOA_u8_);
    }  

    bool ExtLt_Ctrl_SOA_struct::operator == (const ExtLt_Ctrl_SOA_struct& other_) const {
        if (m_ExtLt_Ctrl_SOA_u8_ != other_.m_ExtLt_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool ExtLt_Ctrl_SOA_struct::operator != (const ExtLt_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const ExtLt_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ExtLt_Ctrl_SOA_u8: " << (int)sample.ExtLt_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- ExtLt_St_Struct: 

    ExtLt_St_Struct::ExtLt_St_Struct() :
        m_LeftTurnLgt_Req_ (0) ,
        m_RgtTurnLgt_Req_ (0) ,
        m_FLPstnLgt_Req_ (0) ,
        m_FRPstnLgt_Req_ (0) ,
        m_RLPstnLgt_Req_ (0) ,
        m_RRPstnLgt_Req_ (0) ,
        m_HighLgt_Req_ (0) ,
        m_LwLgt_Req_ (0) ,
        m_HDBM_RearFogBm_Req_ (0) ,
        m_EtnlLgt_Rsp_ (0) ,
        m_FollowMeHome_Rsp_ (0) ,
        m_LgtHeightAdjSet_Rsp_ (0) ,
        m_AHB_Rsp_ (0)  {
    }   

    ExtLt_St_Struct::ExtLt_St_Struct (
        uint8_t LeftTurnLgt_Req,
        uint8_t RgtTurnLgt_Req,
        uint8_t FLPstnLgt_Req,
        uint8_t FRPstnLgt_Req,
        uint8_t RLPstnLgt_Req,
        uint8_t RRPstnLgt_Req,
        uint8_t HighLgt_Req,
        uint8_t LwLgt_Req,
        uint8_t HDBM_RearFogBm_Req,
        uint8_t EtnlLgt_Rsp,
        uint8_t FollowMeHome_Rsp,
        uint8_t LgtHeightAdjSet_Rsp,
        uint8_t AHB_Rsp)
        :
            m_LeftTurnLgt_Req_( LeftTurnLgt_Req ),
            m_RgtTurnLgt_Req_( RgtTurnLgt_Req ),
            m_FLPstnLgt_Req_( FLPstnLgt_Req ),
            m_FRPstnLgt_Req_( FRPstnLgt_Req ),
            m_RLPstnLgt_Req_( RLPstnLgt_Req ),
            m_RRPstnLgt_Req_( RRPstnLgt_Req ),
            m_HighLgt_Req_( HighLgt_Req ),
            m_LwLgt_Req_( LwLgt_Req ),
            m_HDBM_RearFogBm_Req_( HDBM_RearFogBm_Req ),
            m_EtnlLgt_Rsp_( EtnlLgt_Rsp ),
            m_FollowMeHome_Rsp_( FollowMeHome_Rsp ),
            m_LgtHeightAdjSet_Rsp_( LgtHeightAdjSet_Rsp ),
            m_AHB_Rsp_( AHB_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    ExtLt_St_Struct::ExtLt_St_Struct(ExtLt_St_Struct&& other_) OMG_NOEXCEPT  :m_LeftTurnLgt_Req_ (std::move(other_.m_LeftTurnLgt_Req_))
    ,
    m_RgtTurnLgt_Req_ (std::move(other_.m_RgtTurnLgt_Req_))
    ,
    m_FLPstnLgt_Req_ (std::move(other_.m_FLPstnLgt_Req_))
    ,
    m_FRPstnLgt_Req_ (std::move(other_.m_FRPstnLgt_Req_))
    ,
    m_RLPstnLgt_Req_ (std::move(other_.m_RLPstnLgt_Req_))
    ,
    m_RRPstnLgt_Req_ (std::move(other_.m_RRPstnLgt_Req_))
    ,
    m_HighLgt_Req_ (std::move(other_.m_HighLgt_Req_))
    ,
    m_LwLgt_Req_ (std::move(other_.m_LwLgt_Req_))
    ,
    m_HDBM_RearFogBm_Req_ (std::move(other_.m_HDBM_RearFogBm_Req_))
    ,
    m_EtnlLgt_Rsp_ (std::move(other_.m_EtnlLgt_Rsp_))
    ,
    m_FollowMeHome_Rsp_ (std::move(other_.m_FollowMeHome_Rsp_))
    ,
    m_LgtHeightAdjSet_Rsp_ (std::move(other_.m_LgtHeightAdjSet_Rsp_))
    ,
    m_AHB_Rsp_ (std::move(other_.m_AHB_Rsp_))
    {
    } 

    ExtLt_St_Struct& ExtLt_St_Struct::operator=(ExtLt_St_Struct&&  other_) OMG_NOEXCEPT {
        ExtLt_St_Struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void ExtLt_St_Struct::swap(ExtLt_St_Struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LeftTurnLgt_Req_, other_.m_LeftTurnLgt_Req_);
        swap(m_RgtTurnLgt_Req_, other_.m_RgtTurnLgt_Req_);
        swap(m_FLPstnLgt_Req_, other_.m_FLPstnLgt_Req_);
        swap(m_FRPstnLgt_Req_, other_.m_FRPstnLgt_Req_);
        swap(m_RLPstnLgt_Req_, other_.m_RLPstnLgt_Req_);
        swap(m_RRPstnLgt_Req_, other_.m_RRPstnLgt_Req_);
        swap(m_HighLgt_Req_, other_.m_HighLgt_Req_);
        swap(m_LwLgt_Req_, other_.m_LwLgt_Req_);
        swap(m_HDBM_RearFogBm_Req_, other_.m_HDBM_RearFogBm_Req_);
        swap(m_EtnlLgt_Rsp_, other_.m_EtnlLgt_Rsp_);
        swap(m_FollowMeHome_Rsp_, other_.m_FollowMeHome_Rsp_);
        swap(m_LgtHeightAdjSet_Rsp_, other_.m_LgtHeightAdjSet_Rsp_);
        swap(m_AHB_Rsp_, other_.m_AHB_Rsp_);
    }  

    bool ExtLt_St_Struct::operator == (const ExtLt_St_Struct& other_) const {
        if (m_LeftTurnLgt_Req_ != other_.m_LeftTurnLgt_Req_) {
            return false;
        }
        if (m_RgtTurnLgt_Req_ != other_.m_RgtTurnLgt_Req_) {
            return false;
        }
        if (m_FLPstnLgt_Req_ != other_.m_FLPstnLgt_Req_) {
            return false;
        }
        if (m_FRPstnLgt_Req_ != other_.m_FRPstnLgt_Req_) {
            return false;
        }
        if (m_RLPstnLgt_Req_ != other_.m_RLPstnLgt_Req_) {
            return false;
        }
        if (m_RRPstnLgt_Req_ != other_.m_RRPstnLgt_Req_) {
            return false;
        }
        if (m_HighLgt_Req_ != other_.m_HighLgt_Req_) {
            return false;
        }
        if (m_LwLgt_Req_ != other_.m_LwLgt_Req_) {
            return false;
        }
        if (m_HDBM_RearFogBm_Req_ != other_.m_HDBM_RearFogBm_Req_) {
            return false;
        }
        if (m_EtnlLgt_Rsp_ != other_.m_EtnlLgt_Rsp_) {
            return false;
        }
        if (m_FollowMeHome_Rsp_ != other_.m_FollowMeHome_Rsp_) {
            return false;
        }
        if (m_LgtHeightAdjSet_Rsp_ != other_.m_LgtHeightAdjSet_Rsp_) {
            return false;
        }
        if (m_AHB_Rsp_ != other_.m_AHB_Rsp_) {
            return false;
        }
        return true;
    }
    bool ExtLt_St_Struct::operator != (const ExtLt_St_Struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const ExtLt_St_Struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LeftTurnLgt_Req: " << (int)sample.LeftTurnLgt_Req() <<", ";
        o << "RgtTurnLgt_Req: " << (int)sample.RgtTurnLgt_Req() <<", ";
        o << "FLPstnLgt_Req: " << (int)sample.FLPstnLgt_Req() <<", ";
        o << "FRPstnLgt_Req: " << (int)sample.FRPstnLgt_Req() <<", ";
        o << "RLPstnLgt_Req: " << (int)sample.RLPstnLgt_Req() <<", ";
        o << "RRPstnLgt_Req: " << (int)sample.RRPstnLgt_Req() <<", ";
        o << "HighLgt_Req: " << (int)sample.HighLgt_Req() <<", ";
        o << "LwLgt_Req: " << (int)sample.LwLgt_Req() <<", ";
        o << "HDBM_RearFogBm_Req: " << (int)sample.HDBM_RearFogBm_Req() <<", ";
        o << "EtnlLgt_Rsp: " << (int)sample.EtnlLgt_Rsp() <<", ";
        o << "FollowMeHome_Rsp: " << (int)sample.FollowMeHome_Rsp() <<", ";
        o << "LgtHeightAdjSet_Rsp: " << (int)sample.LgtHeightAdjSet_Rsp() <<", ";
        o << "AHB_Rsp: " << (int)sample.AHB_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- BdSf_Ctrl_struct: 

    BdSf_Ctrl_struct::BdSf_Ctrl_struct() :
        m_LChdlock_Req_ (0) ,
        m_RChdlock_Req_ (0) ,
        m_ChdLockMode_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdSf_Ctrl_struct::BdSf_Ctrl_struct (
        uint8_t LChdlock_Req,
        uint8_t RChdlock_Req,
        uint8_t ChdLockMode_Req,
        const std::string& CtrlSource)
        :
            m_LChdlock_Req_( LChdlock_Req ),
            m_RChdlock_Req_( RChdlock_Req ),
            m_ChdLockMode_Req_( ChdLockMode_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdSf_Ctrl_struct::BdSf_Ctrl_struct(BdSf_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_LChdlock_Req_ (std::move(other_.m_LChdlock_Req_))
    ,
    m_RChdlock_Req_ (std::move(other_.m_RChdlock_Req_))
    ,
    m_ChdLockMode_Req_ (std::move(other_.m_ChdLockMode_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdSf_Ctrl_struct& BdSf_Ctrl_struct::operator=(BdSf_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        BdSf_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdSf_Ctrl_struct::swap(BdSf_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LChdlock_Req_, other_.m_LChdlock_Req_);
        swap(m_RChdlock_Req_, other_.m_RChdlock_Req_);
        swap(m_ChdLockMode_Req_, other_.m_ChdLockMode_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdSf_Ctrl_struct::operator == (const BdSf_Ctrl_struct& other_) const {
        if (m_LChdlock_Req_ != other_.m_LChdlock_Req_) {
            return false;
        }
        if (m_RChdlock_Req_ != other_.m_RChdlock_Req_) {
            return false;
        }
        if (m_ChdLockMode_Req_ != other_.m_ChdLockMode_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdSf_Ctrl_struct::operator != (const BdSf_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdSf_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LChdlock_Req: " << (int)sample.LChdlock_Req() <<", ";
        o << "RChdlock_Req: " << (int)sample.RChdlock_Req() <<", ";
        o << "ChdLockMode_Req: " << (int)sample.ChdLockMode_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdSf_Ctrl_SOA_struct: 

    BdSf_Ctrl_SOA_struct::BdSf_Ctrl_SOA_struct() :
        m_BdSf_Ctrl_SOA_u8_ (0)  {
    }   

    BdSf_Ctrl_SOA_struct::BdSf_Ctrl_SOA_struct (
        uint8_t BdSf_Ctrl_SOA_u8)
        :
            m_BdSf_Ctrl_SOA_u8_( BdSf_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdSf_Ctrl_SOA_struct::BdSf_Ctrl_SOA_struct(BdSf_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_BdSf_Ctrl_SOA_u8_ (std::move(other_.m_BdSf_Ctrl_SOA_u8_))
    {
    } 

    BdSf_Ctrl_SOA_struct& BdSf_Ctrl_SOA_struct::operator=(BdSf_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        BdSf_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdSf_Ctrl_SOA_struct::swap(BdSf_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_BdSf_Ctrl_SOA_u8_, other_.m_BdSf_Ctrl_SOA_u8_);
    }  

    bool BdSf_Ctrl_SOA_struct::operator == (const BdSf_Ctrl_SOA_struct& other_) const {
        if (m_BdSf_Ctrl_SOA_u8_ != other_.m_BdSf_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool BdSf_Ctrl_SOA_struct::operator != (const BdSf_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdSf_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "BdSf_Ctrl_SOA_u8: " << (int)sample.BdSf_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- BdSf_St_struct: 

    BdSf_St_struct::BdSf_St_struct() :
        m_LChdlock_st_ (0) ,
        m_RChdlock_st_ (0) ,
        m_ChdLockMode_st_ (0)  {
    }   

    BdSf_St_struct::BdSf_St_struct (
        uint8_t LChdlock_st,
        uint8_t RChdlock_st,
        uint8_t ChdLockMode_st)
        :
            m_LChdlock_st_( LChdlock_st ),
            m_RChdlock_st_( RChdlock_st ),
            m_ChdLockMode_st_( ChdLockMode_st ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdSf_St_struct::BdSf_St_struct(BdSf_St_struct&& other_) OMG_NOEXCEPT  :m_LChdlock_st_ (std::move(other_.m_LChdlock_st_))
    ,
    m_RChdlock_st_ (std::move(other_.m_RChdlock_st_))
    ,
    m_ChdLockMode_st_ (std::move(other_.m_ChdLockMode_st_))
    {
    } 

    BdSf_St_struct& BdSf_St_struct::operator=(BdSf_St_struct&&  other_) OMG_NOEXCEPT {
        BdSf_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdSf_St_struct::swap(BdSf_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_LChdlock_st_, other_.m_LChdlock_st_);
        swap(m_RChdlock_st_, other_.m_RChdlock_st_);
        swap(m_ChdLockMode_st_, other_.m_ChdLockMode_st_);
    }  

    bool BdSf_St_struct::operator == (const BdSf_St_struct& other_) const {
        if (m_LChdlock_st_ != other_.m_LChdlock_st_) {
            return false;
        }
        if (m_RChdlock_st_ != other_.m_RChdlock_st_) {
            return false;
        }
        if (m_ChdLockMode_st_ != other_.m_ChdLockMode_st_) {
            return false;
        }
        return true;
    }
    bool BdSf_St_struct::operator != (const BdSf_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdSf_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "LChdlock_st: " << (int)sample.LChdlock_st() <<", ";
        o << "RChdlock_st: " << (int)sample.RChdlock_st() <<", ";
        o << "ChdLockMode_st: " << (int)sample.ChdLockMode_st()  ;
        o <<"]";
        return o;
    }

    // ---- CgC_Ctrl_struct: 

    CgC_Ctrl_struct::CgC_Ctrl_struct() :
        m_ChrgCapCtrlSW_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    CgC_Ctrl_struct::CgC_Ctrl_struct (
        uint8_t ChrgCapCtrlSW_Req,
        const std::string& CtrlSource)
        :
            m_ChrgCapCtrlSW_Req_( ChrgCapCtrlSW_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CgC_Ctrl_struct::CgC_Ctrl_struct(CgC_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_ChrgCapCtrlSW_Req_ (std::move(other_.m_ChrgCapCtrlSW_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    CgC_Ctrl_struct& CgC_Ctrl_struct::operator=(CgC_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        CgC_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CgC_Ctrl_struct::swap(CgC_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ChrgCapCtrlSW_Req_, other_.m_ChrgCapCtrlSW_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool CgC_Ctrl_struct::operator == (const CgC_Ctrl_struct& other_) const {
        if (m_ChrgCapCtrlSW_Req_ != other_.m_ChrgCapCtrlSW_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool CgC_Ctrl_struct::operator != (const CgC_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CgC_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ChrgCapCtrlSW_Req: " << (int)sample.ChrgCapCtrlSW_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- CgC_Ctrl_SOA_struct: 

    CgC_Ctrl_SOA_struct::CgC_Ctrl_SOA_struct() :
        m_CgC_Ctrl_SOA_u8_ (0)  {
    }   

    CgC_Ctrl_SOA_struct::CgC_Ctrl_SOA_struct (
        uint8_t CgC_Ctrl_SOA_u8)
        :
            m_CgC_Ctrl_SOA_u8_( CgC_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CgC_Ctrl_SOA_struct::CgC_Ctrl_SOA_struct(CgC_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_CgC_Ctrl_SOA_u8_ (std::move(other_.m_CgC_Ctrl_SOA_u8_))
    {
    } 

    CgC_Ctrl_SOA_struct& CgC_Ctrl_SOA_struct::operator=(CgC_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        CgC_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CgC_Ctrl_SOA_struct::swap(CgC_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_CgC_Ctrl_SOA_u8_, other_.m_CgC_Ctrl_SOA_u8_);
    }  

    bool CgC_Ctrl_SOA_struct::operator == (const CgC_Ctrl_SOA_struct& other_) const {
        if (m_CgC_Ctrl_SOA_u8_ != other_.m_CgC_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool CgC_Ctrl_SOA_struct::operator != (const CgC_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CgC_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "CgC_Ctrl_SOA_u8: " << (int)sample.CgC_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- CgC_St_struct: 

    CgC_St_struct::CgC_St_struct() :
        m_ChrgCap_St_ (0) ,
        m_ChrgCapMv_St_ (0) ,
        m_ChrgCapPst_St_ (0) ,
        m_ChrgCapStpRsn_St_ (0)  {
    }   

    CgC_St_struct::CgC_St_struct (
        uint8_t ChrgCap_St,
        uint8_t ChrgCapMv_St,
        uint8_t ChrgCapPst_St,
        uint8_t ChrgCapStpRsn_St)
        :
            m_ChrgCap_St_( ChrgCap_St ),
            m_ChrgCapMv_St_( ChrgCapMv_St ),
            m_ChrgCapPst_St_( ChrgCapPst_St ),
            m_ChrgCapStpRsn_St_( ChrgCapStpRsn_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CgC_St_struct::CgC_St_struct(CgC_St_struct&& other_) OMG_NOEXCEPT  :m_ChrgCap_St_ (std::move(other_.m_ChrgCap_St_))
    ,
    m_ChrgCapMv_St_ (std::move(other_.m_ChrgCapMv_St_))
    ,
    m_ChrgCapPst_St_ (std::move(other_.m_ChrgCapPst_St_))
    ,
    m_ChrgCapStpRsn_St_ (std::move(other_.m_ChrgCapStpRsn_St_))
    {
    } 

    CgC_St_struct& CgC_St_struct::operator=(CgC_St_struct&&  other_) OMG_NOEXCEPT {
        CgC_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CgC_St_struct::swap(CgC_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ChrgCap_St_, other_.m_ChrgCap_St_);
        swap(m_ChrgCapMv_St_, other_.m_ChrgCapMv_St_);
        swap(m_ChrgCapPst_St_, other_.m_ChrgCapPst_St_);
        swap(m_ChrgCapStpRsn_St_, other_.m_ChrgCapStpRsn_St_);
    }  

    bool CgC_St_struct::operator == (const CgC_St_struct& other_) const {
        if (m_ChrgCap_St_ != other_.m_ChrgCap_St_) {
            return false;
        }
        if (m_ChrgCapMv_St_ != other_.m_ChrgCapMv_St_) {
            return false;
        }
        if (m_ChrgCapPst_St_ != other_.m_ChrgCapPst_St_) {
            return false;
        }
        if (m_ChrgCapStpRsn_St_ != other_.m_ChrgCapStpRsn_St_) {
            return false;
        }
        return true;
    }
    bool CgC_St_struct::operator != (const CgC_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CgC_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ChrgCap_St: " << (int)sample.ChrgCap_St() <<", ";
        o << "ChrgCapMv_St: " << (int)sample.ChrgCapMv_St() <<", ";
        o << "ChrgCapPst_St: " << (int)sample.ChrgCapPst_St() <<", ";
        o << "ChrgCapStpRsn_St: " << (int)sample.ChrgCapStpRsn_St()  ;
        o <<"]";
        return o;
    }

    // ---- BdCft_Ctrl_struct: 

    BdCft_Ctrl_struct::BdCft_Ctrl_struct() :
        m_FLLumbSuppUDAdj_Act_ (0) ,
        m_FLLumbSuppFBAdj_Act_ (0) ,
        m_FRLumbSuppUDAdj_Act_ (0) ,
        m_FRLumbSuppFBAdj_Act_ (0) ,
        m_FLSeatShoulderAdj_Act_ (0) ,
        m_FRSeatShoulderAdj_Act_ (0) ,
        m_FLSeatMsg_Act_ (0) ,
        m_FLSeatMsgMode_Act_ (0) ,
        m_FLSeatMsgStrth_Act_ (0) ,
        m_FRSeatMsg_Act_ (0) ,
        m_FRSeatMsgMode_Act_ (0) ,
        m_FRSeatMsgStrth_Act_ (0) ,
        m_FLSeatHt_Act_ (0) ,
        m_FRSeatHt_Act_ (0) ,
        m_SRLSeatHt_Act_ (0) ,
        m_SRRSeatHt_Act_ (0) ,
        m_FLSeatVtlt_Act_ (0) ,
        m_FRSeatVtlt_Act_ (0) ,
        m_SRLSeatVtlt_Act_ (0) ,
        m_SRRSeatVtlt_Act_ (0) ,
        m_SteerHt_Act_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdCft_Ctrl_struct::BdCft_Ctrl_struct (
        uint8_t FLLumbSuppUDAdj_Act,
        uint8_t FLLumbSuppFBAdj_Act,
        uint8_t FRLumbSuppUDAdj_Act,
        uint8_t FRLumbSuppFBAdj_Act,
        uint8_t FLSeatShoulderAdj_Act,
        uint8_t FRSeatShoulderAdj_Act,
        uint8_t FLSeatMsg_Act,
        uint8_t FLSeatMsgMode_Act,
        uint8_t FLSeatMsgStrth_Act,
        uint8_t FRSeatMsg_Act,
        uint8_t FRSeatMsgMode_Act,
        uint8_t FRSeatMsgStrth_Act,
        uint8_t FLSeatHt_Act,
        uint8_t FRSeatHt_Act,
        uint8_t SRLSeatHt_Act,
        uint8_t SRRSeatHt_Act,
        uint8_t FLSeatVtlt_Act,
        uint8_t FRSeatVtlt_Act,
        uint8_t SRLSeatVtlt_Act,
        uint8_t SRRSeatVtlt_Act,
        uint8_t SteerHt_Act,
        const std::string& CtrlSource)
        :
            m_FLLumbSuppUDAdj_Act_( FLLumbSuppUDAdj_Act ),
            m_FLLumbSuppFBAdj_Act_( FLLumbSuppFBAdj_Act ),
            m_FRLumbSuppUDAdj_Act_( FRLumbSuppUDAdj_Act ),
            m_FRLumbSuppFBAdj_Act_( FRLumbSuppFBAdj_Act ),
            m_FLSeatShoulderAdj_Act_( FLSeatShoulderAdj_Act ),
            m_FRSeatShoulderAdj_Act_( FRSeatShoulderAdj_Act ),
            m_FLSeatMsg_Act_( FLSeatMsg_Act ),
            m_FLSeatMsgMode_Act_( FLSeatMsgMode_Act ),
            m_FLSeatMsgStrth_Act_( FLSeatMsgStrth_Act ),
            m_FRSeatMsg_Act_( FRSeatMsg_Act ),
            m_FRSeatMsgMode_Act_( FRSeatMsgMode_Act ),
            m_FRSeatMsgStrth_Act_( FRSeatMsgStrth_Act ),
            m_FLSeatHt_Act_( FLSeatHt_Act ),
            m_FRSeatHt_Act_( FRSeatHt_Act ),
            m_SRLSeatHt_Act_( SRLSeatHt_Act ),
            m_SRRSeatHt_Act_( SRRSeatHt_Act ),
            m_FLSeatVtlt_Act_( FLSeatVtlt_Act ),
            m_FRSeatVtlt_Act_( FRSeatVtlt_Act ),
            m_SRLSeatVtlt_Act_( SRLSeatVtlt_Act ),
            m_SRRSeatVtlt_Act_( SRRSeatVtlt_Act ),
            m_SteerHt_Act_( SteerHt_Act ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_Ctrl_struct::BdCft_Ctrl_struct(BdCft_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_FLLumbSuppUDAdj_Act_ (std::move(other_.m_FLLumbSuppUDAdj_Act_))
    ,
    m_FLLumbSuppFBAdj_Act_ (std::move(other_.m_FLLumbSuppFBAdj_Act_))
    ,
    m_FRLumbSuppUDAdj_Act_ (std::move(other_.m_FRLumbSuppUDAdj_Act_))
    ,
    m_FRLumbSuppFBAdj_Act_ (std::move(other_.m_FRLumbSuppFBAdj_Act_))
    ,
    m_FLSeatShoulderAdj_Act_ (std::move(other_.m_FLSeatShoulderAdj_Act_))
    ,
    m_FRSeatShoulderAdj_Act_ (std::move(other_.m_FRSeatShoulderAdj_Act_))
    ,
    m_FLSeatMsg_Act_ (std::move(other_.m_FLSeatMsg_Act_))
    ,
    m_FLSeatMsgMode_Act_ (std::move(other_.m_FLSeatMsgMode_Act_))
    ,
    m_FLSeatMsgStrth_Act_ (std::move(other_.m_FLSeatMsgStrth_Act_))
    ,
    m_FRSeatMsg_Act_ (std::move(other_.m_FRSeatMsg_Act_))
    ,
    m_FRSeatMsgMode_Act_ (std::move(other_.m_FRSeatMsgMode_Act_))
    ,
    m_FRSeatMsgStrth_Act_ (std::move(other_.m_FRSeatMsgStrth_Act_))
    ,
    m_FLSeatHt_Act_ (std::move(other_.m_FLSeatHt_Act_))
    ,
    m_FRSeatHt_Act_ (std::move(other_.m_FRSeatHt_Act_))
    ,
    m_SRLSeatHt_Act_ (std::move(other_.m_SRLSeatHt_Act_))
    ,
    m_SRRSeatHt_Act_ (std::move(other_.m_SRRSeatHt_Act_))
    ,
    m_FLSeatVtlt_Act_ (std::move(other_.m_FLSeatVtlt_Act_))
    ,
    m_FRSeatVtlt_Act_ (std::move(other_.m_FRSeatVtlt_Act_))
    ,
    m_SRLSeatVtlt_Act_ (std::move(other_.m_SRLSeatVtlt_Act_))
    ,
    m_SRRSeatVtlt_Act_ (std::move(other_.m_SRRSeatVtlt_Act_))
    ,
    m_SteerHt_Act_ (std::move(other_.m_SteerHt_Act_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdCft_Ctrl_struct& BdCft_Ctrl_struct::operator=(BdCft_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        BdCft_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdCft_Ctrl_struct::swap(BdCft_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLLumbSuppUDAdj_Act_, other_.m_FLLumbSuppUDAdj_Act_);
        swap(m_FLLumbSuppFBAdj_Act_, other_.m_FLLumbSuppFBAdj_Act_);
        swap(m_FRLumbSuppUDAdj_Act_, other_.m_FRLumbSuppUDAdj_Act_);
        swap(m_FRLumbSuppFBAdj_Act_, other_.m_FRLumbSuppFBAdj_Act_);
        swap(m_FLSeatShoulderAdj_Act_, other_.m_FLSeatShoulderAdj_Act_);
        swap(m_FRSeatShoulderAdj_Act_, other_.m_FRSeatShoulderAdj_Act_);
        swap(m_FLSeatMsg_Act_, other_.m_FLSeatMsg_Act_);
        swap(m_FLSeatMsgMode_Act_, other_.m_FLSeatMsgMode_Act_);
        swap(m_FLSeatMsgStrth_Act_, other_.m_FLSeatMsgStrth_Act_);
        swap(m_FRSeatMsg_Act_, other_.m_FRSeatMsg_Act_);
        swap(m_FRSeatMsgMode_Act_, other_.m_FRSeatMsgMode_Act_);
        swap(m_FRSeatMsgStrth_Act_, other_.m_FRSeatMsgStrth_Act_);
        swap(m_FLSeatHt_Act_, other_.m_FLSeatHt_Act_);
        swap(m_FRSeatHt_Act_, other_.m_FRSeatHt_Act_);
        swap(m_SRLSeatHt_Act_, other_.m_SRLSeatHt_Act_);
        swap(m_SRRSeatHt_Act_, other_.m_SRRSeatHt_Act_);
        swap(m_FLSeatVtlt_Act_, other_.m_FLSeatVtlt_Act_);
        swap(m_FRSeatVtlt_Act_, other_.m_FRSeatVtlt_Act_);
        swap(m_SRLSeatVtlt_Act_, other_.m_SRLSeatVtlt_Act_);
        swap(m_SRRSeatVtlt_Act_, other_.m_SRRSeatVtlt_Act_);
        swap(m_SteerHt_Act_, other_.m_SteerHt_Act_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdCft_Ctrl_struct::operator == (const BdCft_Ctrl_struct& other_) const {
        if (m_FLLumbSuppUDAdj_Act_ != other_.m_FLLumbSuppUDAdj_Act_) {
            return false;
        }
        if (m_FLLumbSuppFBAdj_Act_ != other_.m_FLLumbSuppFBAdj_Act_) {
            return false;
        }
        if (m_FRLumbSuppUDAdj_Act_ != other_.m_FRLumbSuppUDAdj_Act_) {
            return false;
        }
        if (m_FRLumbSuppFBAdj_Act_ != other_.m_FRLumbSuppFBAdj_Act_) {
            return false;
        }
        if (m_FLSeatShoulderAdj_Act_ != other_.m_FLSeatShoulderAdj_Act_) {
            return false;
        }
        if (m_FRSeatShoulderAdj_Act_ != other_.m_FRSeatShoulderAdj_Act_) {
            return false;
        }
        if (m_FLSeatMsg_Act_ != other_.m_FLSeatMsg_Act_) {
            return false;
        }
        if (m_FLSeatMsgMode_Act_ != other_.m_FLSeatMsgMode_Act_) {
            return false;
        }
        if (m_FLSeatMsgStrth_Act_ != other_.m_FLSeatMsgStrth_Act_) {
            return false;
        }
        if (m_FRSeatMsg_Act_ != other_.m_FRSeatMsg_Act_) {
            return false;
        }
        if (m_FRSeatMsgMode_Act_ != other_.m_FRSeatMsgMode_Act_) {
            return false;
        }
        if (m_FRSeatMsgStrth_Act_ != other_.m_FRSeatMsgStrth_Act_) {
            return false;
        }
        if (m_FLSeatHt_Act_ != other_.m_FLSeatHt_Act_) {
            return false;
        }
        if (m_FRSeatHt_Act_ != other_.m_FRSeatHt_Act_) {
            return false;
        }
        if (m_SRLSeatHt_Act_ != other_.m_SRLSeatHt_Act_) {
            return false;
        }
        if (m_SRRSeatHt_Act_ != other_.m_SRRSeatHt_Act_) {
            return false;
        }
        if (m_FLSeatVtlt_Act_ != other_.m_FLSeatVtlt_Act_) {
            return false;
        }
        if (m_FRSeatVtlt_Act_ != other_.m_FRSeatVtlt_Act_) {
            return false;
        }
        if (m_SRLSeatVtlt_Act_ != other_.m_SRLSeatVtlt_Act_) {
            return false;
        }
        if (m_SRRSeatVtlt_Act_ != other_.m_SRRSeatVtlt_Act_) {
            return false;
        }
        if (m_SteerHt_Act_ != other_.m_SteerHt_Act_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdCft_Ctrl_struct::operator != (const BdCft_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLLumbSuppUDAdj_Act: " << (int)sample.FLLumbSuppUDAdj_Act() <<", ";
        o << "FLLumbSuppFBAdj_Act: " << (int)sample.FLLumbSuppFBAdj_Act() <<", ";
        o << "FRLumbSuppUDAdj_Act: " << (int)sample.FRLumbSuppUDAdj_Act() <<", ";
        o << "FRLumbSuppFBAdj_Act: " << (int)sample.FRLumbSuppFBAdj_Act() <<", ";
        o << "FLSeatShoulderAdj_Act: " << (int)sample.FLSeatShoulderAdj_Act() <<", ";
        o << "FRSeatShoulderAdj_Act: " << (int)sample.FRSeatShoulderAdj_Act() <<", ";
        o << "FLSeatMsg_Act: " << (int)sample.FLSeatMsg_Act() <<", ";
        o << "FLSeatMsgMode_Act: " << (int)sample.FLSeatMsgMode_Act() <<", ";
        o << "FLSeatMsgStrth_Act: " << (int)sample.FLSeatMsgStrth_Act() <<", ";
        o << "FRSeatMsg_Act: " << (int)sample.FRSeatMsg_Act() <<", ";
        o << "FRSeatMsgMode_Act: " << (int)sample.FRSeatMsgMode_Act() <<", ";
        o << "FRSeatMsgStrth_Act: " << (int)sample.FRSeatMsgStrth_Act() <<", ";
        o << "FLSeatHt_Act: " << (int)sample.FLSeatHt_Act() <<", ";
        o << "FRSeatHt_Act: " << (int)sample.FRSeatHt_Act() <<", ";
        o << "SRLSeatHt_Act: " << (int)sample.SRLSeatHt_Act() <<", ";
        o << "SRRSeatHt_Act: " << (int)sample.SRRSeatHt_Act() <<", ";
        o << "FLSeatVtlt_Act: " << (int)sample.FLSeatVtlt_Act() <<", ";
        o << "FRSeatVtlt_Act: " << (int)sample.FRSeatVtlt_Act() <<", ";
        o << "SRLSeatVtlt_Act: " << (int)sample.SRLSeatVtlt_Act() <<", ";
        o << "SRRSeatVtlt_Act: " << (int)sample.SRRSeatVtlt_Act() <<", ";
        o << "SteerHt_Act: " << (int)sample.SteerHt_Act() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdCft_Ctrl_SOA_struct: 

    BdCft_Ctrl_SOA_struct::BdCft_Ctrl_SOA_struct() :
        m_BdCft_Ctrl_SOA_u8_ (0)  {
    }   

    BdCft_Ctrl_SOA_struct::BdCft_Ctrl_SOA_struct (
        uint8_t BdCft_Ctrl_SOA_u8)
        :
            m_BdCft_Ctrl_SOA_u8_( BdCft_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_Ctrl_SOA_struct::BdCft_Ctrl_SOA_struct(BdCft_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_BdCft_Ctrl_SOA_u8_ (std::move(other_.m_BdCft_Ctrl_SOA_u8_))
    {
    } 

    BdCft_Ctrl_SOA_struct& BdCft_Ctrl_SOA_struct::operator=(BdCft_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        BdCft_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdCft_Ctrl_SOA_struct::swap(BdCft_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_BdCft_Ctrl_SOA_u8_, other_.m_BdCft_Ctrl_SOA_u8_);
    }  

    bool BdCft_Ctrl_SOA_struct::operator == (const BdCft_Ctrl_SOA_struct& other_) const {
        if (m_BdCft_Ctrl_SOA_u8_ != other_.m_BdCft_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool BdCft_Ctrl_SOA_struct::operator != (const BdCft_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "BdCft_Ctrl_SOA_u8: " << (int)sample.BdCft_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- BdCft_St_Get_struct: 

    BdCft_St_Get_struct::BdCft_St_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdCft_St_Get_struct::BdCft_St_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_St_Get_struct::BdCft_St_Get_struct(BdCft_St_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdCft_St_Get_struct& BdCft_St_Get_struct::operator=(BdCft_St_Get_struct&&  other_) OMG_NOEXCEPT {
        BdCft_St_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdCft_St_Get_struct::swap(BdCft_St_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdCft_St_Get_struct::operator == (const BdCft_St_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdCft_St_Get_struct::operator != (const BdCft_St_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_St_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdCft_St_struct: 

    BdCft_St_struct::BdCft_St_struct() :
        m_FLLumbSuppFBMv_St_ (0) ,
        m_FLLumbSuppUDMv_St_ (0) ,
        m_FRLumbSuppFBMv_St_ (0) ,
        m_FRLumbSuppUDMv_St_ (0) ,
        m_FLSeatShoulderAdj_St_ (0) ,
        m_FRSeatShoulderAdj_St_ (0) ,
        m_FLSeatMsg_St_ (0) ,
        m_FLSeatMsgMode_St_ (0) ,
        m_FLSeatMsgStrth_St_ (0) ,
        m_FRSeatMsg_St_ (0) ,
        m_FRSeatMsgMode_St_ (0) ,
        m_FRSeatMsgStrth_St_ (0) ,
        m_FLSeatHt_St_ (0) ,
        m_FRSeatHt_St_ (0) ,
        m_SRLSeatHt_St_ (0) ,
        m_SRRSeatHt_St_ (0) ,
        m_FLSeatVtlt_St_ (0) ,
        m_FRSeatVtlt_St_ (0) ,
        m_SRLSeatVtlt_St_ (0) ,
        m_SRRSeatVtlt_St_ (0) ,
        m_SteerHt_St_ (0)  {
    }   

    BdCft_St_struct::BdCft_St_struct (
        uint8_t FLLumbSuppFBMv_St,
        uint8_t FLLumbSuppUDMv_St,
        uint8_t FRLumbSuppFBMv_St,
        uint8_t FRLumbSuppUDMv_St,
        uint8_t FLSeatShoulderAdj_St,
        uint8_t FRSeatShoulderAdj_St,
        uint8_t FLSeatMsg_St,
        uint8_t FLSeatMsgMode_St,
        uint8_t FLSeatMsgStrth_St,
        uint8_t FRSeatMsg_St,
        uint8_t FRSeatMsgMode_St,
        uint8_t FRSeatMsgStrth_St,
        uint8_t FLSeatHt_St,
        uint8_t FRSeatHt_St,
        uint8_t SRLSeatHt_St,
        uint8_t SRRSeatHt_St,
        uint8_t FLSeatVtlt_St,
        uint8_t FRSeatVtlt_St,
        uint8_t SRLSeatVtlt_St,
        uint8_t SRRSeatVtlt_St,
        uint8_t SteerHt_St)
        :
            m_FLLumbSuppFBMv_St_( FLLumbSuppFBMv_St ),
            m_FLLumbSuppUDMv_St_( FLLumbSuppUDMv_St ),
            m_FRLumbSuppFBMv_St_( FRLumbSuppFBMv_St ),
            m_FRLumbSuppUDMv_St_( FRLumbSuppUDMv_St ),
            m_FLSeatShoulderAdj_St_( FLSeatShoulderAdj_St ),
            m_FRSeatShoulderAdj_St_( FRSeatShoulderAdj_St ),
            m_FLSeatMsg_St_( FLSeatMsg_St ),
            m_FLSeatMsgMode_St_( FLSeatMsgMode_St ),
            m_FLSeatMsgStrth_St_( FLSeatMsgStrth_St ),
            m_FRSeatMsg_St_( FRSeatMsg_St ),
            m_FRSeatMsgMode_St_( FRSeatMsgMode_St ),
            m_FRSeatMsgStrth_St_( FRSeatMsgStrth_St ),
            m_FLSeatHt_St_( FLSeatHt_St ),
            m_FRSeatHt_St_( FRSeatHt_St ),
            m_SRLSeatHt_St_( SRLSeatHt_St ),
            m_SRRSeatHt_St_( SRRSeatHt_St ),
            m_FLSeatVtlt_St_( FLSeatVtlt_St ),
            m_FRSeatVtlt_St_( FRSeatVtlt_St ),
            m_SRLSeatVtlt_St_( SRLSeatVtlt_St ),
            m_SRRSeatVtlt_St_( SRRSeatVtlt_St ),
            m_SteerHt_St_( SteerHt_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_St_struct::BdCft_St_struct(BdCft_St_struct&& other_) OMG_NOEXCEPT  :m_FLLumbSuppFBMv_St_ (std::move(other_.m_FLLumbSuppFBMv_St_))
    ,
    m_FLLumbSuppUDMv_St_ (std::move(other_.m_FLLumbSuppUDMv_St_))
    ,
    m_FRLumbSuppFBMv_St_ (std::move(other_.m_FRLumbSuppFBMv_St_))
    ,
    m_FRLumbSuppUDMv_St_ (std::move(other_.m_FRLumbSuppUDMv_St_))
    ,
    m_FLSeatShoulderAdj_St_ (std::move(other_.m_FLSeatShoulderAdj_St_))
    ,
    m_FRSeatShoulderAdj_St_ (std::move(other_.m_FRSeatShoulderAdj_St_))
    ,
    m_FLSeatMsg_St_ (std::move(other_.m_FLSeatMsg_St_))
    ,
    m_FLSeatMsgMode_St_ (std::move(other_.m_FLSeatMsgMode_St_))
    ,
    m_FLSeatMsgStrth_St_ (std::move(other_.m_FLSeatMsgStrth_St_))
    ,
    m_FRSeatMsg_St_ (std::move(other_.m_FRSeatMsg_St_))
    ,
    m_FRSeatMsgMode_St_ (std::move(other_.m_FRSeatMsgMode_St_))
    ,
    m_FRSeatMsgStrth_St_ (std::move(other_.m_FRSeatMsgStrth_St_))
    ,
    m_FLSeatHt_St_ (std::move(other_.m_FLSeatHt_St_))
    ,
    m_FRSeatHt_St_ (std::move(other_.m_FRSeatHt_St_))
    ,
    m_SRLSeatHt_St_ (std::move(other_.m_SRLSeatHt_St_))
    ,
    m_SRRSeatHt_St_ (std::move(other_.m_SRRSeatHt_St_))
    ,
    m_FLSeatVtlt_St_ (std::move(other_.m_FLSeatVtlt_St_))
    ,
    m_FRSeatVtlt_St_ (std::move(other_.m_FRSeatVtlt_St_))
    ,
    m_SRLSeatVtlt_St_ (std::move(other_.m_SRLSeatVtlt_St_))
    ,
    m_SRRSeatVtlt_St_ (std::move(other_.m_SRRSeatVtlt_St_))
    ,
    m_SteerHt_St_ (std::move(other_.m_SteerHt_St_))
    {
    } 

    BdCft_St_struct& BdCft_St_struct::operator=(BdCft_St_struct&&  other_) OMG_NOEXCEPT {
        BdCft_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdCft_St_struct::swap(BdCft_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_FLLumbSuppFBMv_St_, other_.m_FLLumbSuppFBMv_St_);
        swap(m_FLLumbSuppUDMv_St_, other_.m_FLLumbSuppUDMv_St_);
        swap(m_FRLumbSuppFBMv_St_, other_.m_FRLumbSuppFBMv_St_);
        swap(m_FRLumbSuppUDMv_St_, other_.m_FRLumbSuppUDMv_St_);
        swap(m_FLSeatShoulderAdj_St_, other_.m_FLSeatShoulderAdj_St_);
        swap(m_FRSeatShoulderAdj_St_, other_.m_FRSeatShoulderAdj_St_);
        swap(m_FLSeatMsg_St_, other_.m_FLSeatMsg_St_);
        swap(m_FLSeatMsgMode_St_, other_.m_FLSeatMsgMode_St_);
        swap(m_FLSeatMsgStrth_St_, other_.m_FLSeatMsgStrth_St_);
        swap(m_FRSeatMsg_St_, other_.m_FRSeatMsg_St_);
        swap(m_FRSeatMsgMode_St_, other_.m_FRSeatMsgMode_St_);
        swap(m_FRSeatMsgStrth_St_, other_.m_FRSeatMsgStrth_St_);
        swap(m_FLSeatHt_St_, other_.m_FLSeatHt_St_);
        swap(m_FRSeatHt_St_, other_.m_FRSeatHt_St_);
        swap(m_SRLSeatHt_St_, other_.m_SRLSeatHt_St_);
        swap(m_SRRSeatHt_St_, other_.m_SRRSeatHt_St_);
        swap(m_FLSeatVtlt_St_, other_.m_FLSeatVtlt_St_);
        swap(m_FRSeatVtlt_St_, other_.m_FRSeatVtlt_St_);
        swap(m_SRLSeatVtlt_St_, other_.m_SRLSeatVtlt_St_);
        swap(m_SRRSeatVtlt_St_, other_.m_SRRSeatVtlt_St_);
        swap(m_SteerHt_St_, other_.m_SteerHt_St_);
    }  

    bool BdCft_St_struct::operator == (const BdCft_St_struct& other_) const {
        if (m_FLLumbSuppFBMv_St_ != other_.m_FLLumbSuppFBMv_St_) {
            return false;
        }
        if (m_FLLumbSuppUDMv_St_ != other_.m_FLLumbSuppUDMv_St_) {
            return false;
        }
        if (m_FRLumbSuppFBMv_St_ != other_.m_FRLumbSuppFBMv_St_) {
            return false;
        }
        if (m_FRLumbSuppUDMv_St_ != other_.m_FRLumbSuppUDMv_St_) {
            return false;
        }
        if (m_FLSeatShoulderAdj_St_ != other_.m_FLSeatShoulderAdj_St_) {
            return false;
        }
        if (m_FRSeatShoulderAdj_St_ != other_.m_FRSeatShoulderAdj_St_) {
            return false;
        }
        if (m_FLSeatMsg_St_ != other_.m_FLSeatMsg_St_) {
            return false;
        }
        if (m_FLSeatMsgMode_St_ != other_.m_FLSeatMsgMode_St_) {
            return false;
        }
        if (m_FLSeatMsgStrth_St_ != other_.m_FLSeatMsgStrth_St_) {
            return false;
        }
        if (m_FRSeatMsg_St_ != other_.m_FRSeatMsg_St_) {
            return false;
        }
        if (m_FRSeatMsgMode_St_ != other_.m_FRSeatMsgMode_St_) {
            return false;
        }
        if (m_FRSeatMsgStrth_St_ != other_.m_FRSeatMsgStrth_St_) {
            return false;
        }
        if (m_FLSeatHt_St_ != other_.m_FLSeatHt_St_) {
            return false;
        }
        if (m_FRSeatHt_St_ != other_.m_FRSeatHt_St_) {
            return false;
        }
        if (m_SRLSeatHt_St_ != other_.m_SRLSeatHt_St_) {
            return false;
        }
        if (m_SRRSeatHt_St_ != other_.m_SRRSeatHt_St_) {
            return false;
        }
        if (m_FLSeatVtlt_St_ != other_.m_FLSeatVtlt_St_) {
            return false;
        }
        if (m_FRSeatVtlt_St_ != other_.m_FRSeatVtlt_St_) {
            return false;
        }
        if (m_SRLSeatVtlt_St_ != other_.m_SRLSeatVtlt_St_) {
            return false;
        }
        if (m_SRRSeatVtlt_St_ != other_.m_SRRSeatVtlt_St_) {
            return false;
        }
        if (m_SteerHt_St_ != other_.m_SteerHt_St_) {
            return false;
        }
        return true;
    }
    bool BdCft_St_struct::operator != (const BdCft_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "FLLumbSuppFBMv_St: " << (int)sample.FLLumbSuppFBMv_St() <<", ";
        o << "FLLumbSuppUDMv_St: " << (int)sample.FLLumbSuppUDMv_St() <<", ";
        o << "FRLumbSuppFBMv_St: " << (int)sample.FRLumbSuppFBMv_St() <<", ";
        o << "FRLumbSuppUDMv_St: " << (int)sample.FRLumbSuppUDMv_St() <<", ";
        o << "FLSeatShoulderAdj_St: " << (int)sample.FLSeatShoulderAdj_St() <<", ";
        o << "FRSeatShoulderAdj_St: " << (int)sample.FRSeatShoulderAdj_St() <<", ";
        o << "FLSeatMsg_St: " << (int)sample.FLSeatMsg_St() <<", ";
        o << "FLSeatMsgMode_St: " << (int)sample.FLSeatMsgMode_St() <<", ";
        o << "FLSeatMsgStrth_St: " << (int)sample.FLSeatMsgStrth_St() <<", ";
        o << "FRSeatMsg_St: " << (int)sample.FRSeatMsg_St() <<", ";
        o << "FRSeatMsgMode_St: " << (int)sample.FRSeatMsgMode_St() <<", ";
        o << "FRSeatMsgStrth_St: " << (int)sample.FRSeatMsgStrth_St() <<", ";
        o << "FLSeatHt_St: " << (int)sample.FLSeatHt_St() <<", ";
        o << "FRSeatHt_St: " << (int)sample.FRSeatHt_St() <<", ";
        o << "SRLSeatHt_St: " << (int)sample.SRLSeatHt_St() <<", ";
        o << "SRRSeatHt_St: " << (int)sample.SRRSeatHt_St() <<", ";
        o << "FLSeatVtlt_St: " << (int)sample.FLSeatVtlt_St() <<", ";
        o << "FRSeatVtlt_St: " << (int)sample.FRSeatVtlt_St() <<", ";
        o << "SRLSeatVtlt_St: " << (int)sample.SRLSeatVtlt_St() <<", ";
        o << "SRRSeatVtlt_St: " << (int)sample.SRRSeatVtlt_St() <<", ";
        o << "SteerHt_St: " << (int)sample.SteerHt_St()  ;
        o <<"]";
        return o;
    }

    // ---- BdCft_Set_struct: 

    BdCft_Set_struct::BdCft_Set_struct() :
        m_SeatAutoHeat_Set_ (0) ,
        m_StreeAutoHeat_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BdCft_Set_struct::BdCft_Set_struct (
        uint8_t SeatAutoHeat_Set,
        uint8_t StreeAutoHeat_Set,
        const std::string& CtrlSource)
        :
            m_SeatAutoHeat_Set_( SeatAutoHeat_Set ),
            m_StreeAutoHeat_Set_( StreeAutoHeat_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_Set_struct::BdCft_Set_struct(BdCft_Set_struct&& other_) OMG_NOEXCEPT  :m_SeatAutoHeat_Set_ (std::move(other_.m_SeatAutoHeat_Set_))
    ,
    m_StreeAutoHeat_Set_ (std::move(other_.m_StreeAutoHeat_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BdCft_Set_struct& BdCft_Set_struct::operator=(BdCft_Set_struct&&  other_) OMG_NOEXCEPT {
        BdCft_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdCft_Set_struct::swap(BdCft_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SeatAutoHeat_Set_, other_.m_SeatAutoHeat_Set_);
        swap(m_StreeAutoHeat_Set_, other_.m_StreeAutoHeat_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BdCft_Set_struct::operator == (const BdCft_Set_struct& other_) const {
        if (m_SeatAutoHeat_Set_ != other_.m_SeatAutoHeat_Set_) {
            return false;
        }
        if (m_StreeAutoHeat_Set_ != other_.m_StreeAutoHeat_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BdCft_Set_struct::operator != (const BdCft_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SeatAutoHeat_Set: " << (int)sample.SeatAutoHeat_Set() <<", ";
        o << "StreeAutoHeat_Set: " << (int)sample.StreeAutoHeat_Set() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BdCft_Rsp_struct: 

    BdCft_Rsp_struct::BdCft_Rsp_struct() :
        m_SeatAutoHeat_Rsp_ (0) ,
        m_StreeAutoHeat_Rsp_ (0)  {
    }   

    BdCft_Rsp_struct::BdCft_Rsp_struct (
        uint8_t SeatAutoHeat_Rsp,
        uint8_t StreeAutoHeat_Rsp)
        :
            m_SeatAutoHeat_Rsp_( SeatAutoHeat_Rsp ),
            m_StreeAutoHeat_Rsp_( StreeAutoHeat_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_Rsp_struct::BdCft_Rsp_struct(BdCft_Rsp_struct&& other_) OMG_NOEXCEPT  :m_SeatAutoHeat_Rsp_ (std::move(other_.m_SeatAutoHeat_Rsp_))
    ,
    m_StreeAutoHeat_Rsp_ (std::move(other_.m_StreeAutoHeat_Rsp_))
    {
    } 

    BdCft_Rsp_struct& BdCft_Rsp_struct::operator=(BdCft_Rsp_struct&&  other_) OMG_NOEXCEPT {
        BdCft_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BdCft_Rsp_struct::swap(BdCft_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SeatAutoHeat_Rsp_, other_.m_SeatAutoHeat_Rsp_);
        swap(m_StreeAutoHeat_Rsp_, other_.m_StreeAutoHeat_Rsp_);
    }  

    bool BdCft_Rsp_struct::operator == (const BdCft_Rsp_struct& other_) const {
        if (m_SeatAutoHeat_Rsp_ != other_.m_SeatAutoHeat_Rsp_) {
            return false;
        }
        if (m_StreeAutoHeat_Rsp_ != other_.m_StreeAutoHeat_Rsp_) {
            return false;
        }
        return true;
    }
    bool BdCft_Rsp_struct::operator != (const BdCft_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SeatAutoHeat_Rsp: " << (int)sample.SeatAutoHeat_Rsp() <<", ";
        o << "StreeAutoHeat_Rsp: " << (int)sample.StreeAutoHeat_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- BdCft_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_Srv_Req_Union::BdCft_Srv_Req_Union(BdCft_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BdCft_Ctrl( std::move(other_.BdCft_Ctrl()));
            } break;
            case 1:
            {  
                BdCft_St_Get( std::move(other_.BdCft_St_Get()));
            } break;
            case 2:
            {  
                BdCft_Set( std::move(other_.BdCft_Set()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    BdCft_Srv_Req_Union& BdCft_Srv_Req_Union::operator=(BdCft_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        BdCft_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    BdCft_Srv_Req_Union::Union_::Union_()  {
    }

    BdCft_Srv_Req_Union::Union_::Union_(
        const BodyDomain::BdCft_Ctrl_struct& BdCft_Ctrl,
        const BodyDomain::BdCft_St_Get_struct& BdCft_St_Get,
        const BodyDomain::BdCft_Set_struct& BdCft_Set)
        :
            m_BdCft_Ctrl_( BdCft_Ctrl ),
            m_BdCft_St_Get_( BdCft_St_Get ),
            m_BdCft_Set_( BdCft_Set ) {
    }

    BdCft_Srv_Req_Union::BdCft_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void BdCft_Srv_Req_Union::swap(BdCft_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BdCft_Ctrl_, other_.m_u_.m_BdCft_Ctrl_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BdCft_St_Get_, other_.m_u_.m_BdCft_St_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BdCft_Set_, other_.m_u_.m_BdCft_Set_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BdCft_Ctrl_, other_.m_u_.m_BdCft_Ctrl_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BdCft_St_Get_, other_.m_u_.m_BdCft_St_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BdCft_Set_, other_.m_u_.m_BdCft_Set_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool BdCft_Srv_Req_Union::operator == (const BdCft_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BdCft_Ctrl_ != other_.m_u_.m_BdCft_Ctrl_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BdCft_St_Get_ != other_.m_u_.m_BdCft_St_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BdCft_Set_ != other_.m_u_.m_BdCft_Set_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool BdCft_Srv_Req_Union::operator != (const BdCft_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BdCft_Ctrl: " << sample.BdCft_Ctrl()<<", ";
            } break ;
            case 1:
            {  
                o << "BdCft_St_Get: " << sample.BdCft_St_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "BdCft_Set: " << sample.BdCft_Set() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t BdCft_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- BdCft_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BdCft_Srv_Resp_Union::BdCft_Srv_Resp_Union(BdCft_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BdCft_Ctrl_SOA( std::move(other_.BdCft_Ctrl_SOA()));
            } break;
            case 1:
            {  
                BdCft_St_Get_SOA( std::move(other_.BdCft_St_Get_SOA()));
            } break;
            case 2:
            {  
                BdCft_Set_SOA( std::move(other_.BdCft_Set_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    BdCft_Srv_Resp_Union& BdCft_Srv_Resp_Union::operator=(BdCft_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        BdCft_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    BdCft_Srv_Resp_Union::Union_::Union_()  {
    }

    BdCft_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::BdCft_Ctrl_SOA_struct& BdCft_Ctrl_SOA,
        const BodyDomain::BdCft_St_struct& BdCft_St_Get_SOA,
        const BodyDomain::BdCft_Rsp_struct& BdCft_Set_SOA)
        :
            m_BdCft_Ctrl_SOA_( BdCft_Ctrl_SOA ),
            m_BdCft_St_Get_SOA_( BdCft_St_Get_SOA ),
            m_BdCft_Set_SOA_( BdCft_Set_SOA ) {
    }

    BdCft_Srv_Resp_Union::BdCft_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void BdCft_Srv_Resp_Union::swap(BdCft_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BdCft_Ctrl_SOA_, other_.m_u_.m_BdCft_Ctrl_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BdCft_St_Get_SOA_, other_.m_u_.m_BdCft_St_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BdCft_Set_SOA_, other_.m_u_.m_BdCft_Set_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BdCft_Ctrl_SOA_, other_.m_u_.m_BdCft_Ctrl_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BdCft_St_Get_SOA_, other_.m_u_.m_BdCft_St_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BdCft_Set_SOA_, other_.m_u_.m_BdCft_Set_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool BdCft_Srv_Resp_Union::operator == (const BdCft_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BdCft_Ctrl_SOA_ != other_.m_u_.m_BdCft_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BdCft_St_Get_SOA_ != other_.m_u_.m_BdCft_St_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BdCft_Set_SOA_ != other_.m_u_.m_BdCft_Set_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool BdCft_Srv_Resp_Union::operator != (const BdCft_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BdCft_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BdCft_Ctrl_SOA: " << sample.BdCft_Ctrl_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "BdCft_St_Get_SOA: " << sample.BdCft_St_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "BdCft_Set_SOA: " << sample.BdCft_Set_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t BdCft_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- BotSeatSync_Set_struct: 

    BotSeatSync_Set_struct::BotSeatSync_Set_struct() :
        m_SeatSync_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BotSeatSync_Set_struct::BotSeatSync_Set_struct (
        uint8_t SeatSync_Set,
        const std::string& CtrlSource)
        :
            m_SeatSync_Set_( SeatSync_Set ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotSeatSync_Set_struct::BotSeatSync_Set_struct(BotSeatSync_Set_struct&& other_) OMG_NOEXCEPT  :m_SeatSync_Set_ (std::move(other_.m_SeatSync_Set_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BotSeatSync_Set_struct& BotSeatSync_Set_struct::operator=(BotSeatSync_Set_struct&&  other_) OMG_NOEXCEPT {
        BotSeatSync_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotSeatSync_Set_struct::swap(BotSeatSync_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SeatSync_Set_, other_.m_SeatSync_Set_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BotSeatSync_Set_struct::operator == (const BotSeatSync_Set_struct& other_) const {
        if (m_SeatSync_Set_ != other_.m_SeatSync_Set_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BotSeatSync_Set_struct::operator != (const BotSeatSync_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotSeatSync_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SeatSync_Set: " << (int)sample.SeatSync_Set() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BotSeatSync_Get_struct: 

    BotSeatSync_Get_struct::BotSeatSync_Get_struct() :
        m_constant_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BotSeatSync_Get_struct::BotSeatSync_Get_struct (
        uint8_t constant,
        const std::string& CtrlSource)
        :
            m_constant_( constant ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotSeatSync_Get_struct::BotSeatSync_Get_struct(BotSeatSync_Get_struct&& other_) OMG_NOEXCEPT  :m_constant_ (std::move(other_.m_constant_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BotSeatSync_Get_struct& BotSeatSync_Get_struct::operator=(BotSeatSync_Get_struct&&  other_) OMG_NOEXCEPT {
        BotSeatSync_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotSeatSync_Get_struct::swap(BotSeatSync_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_constant_, other_.m_constant_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BotSeatSync_Get_struct::operator == (const BotSeatSync_Get_struct& other_) const {
        if (m_constant_ != other_.m_constant_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BotSeatSync_Get_struct::operator != (const BotSeatSync_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotSeatSync_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "constant: " << (int)sample.constant() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BotSeatSync_Rsp_struct: 

    BotSeatSync_Rsp_struct::BotSeatSync_Rsp_struct() :
        m_SeatSync_Rsp_ (0)  {
    }   

    BotSeatSync_Rsp_struct::BotSeatSync_Rsp_struct (
        uint8_t SeatSync_Rsp)
        :
            m_SeatSync_Rsp_( SeatSync_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotSeatSync_Rsp_struct::BotSeatSync_Rsp_struct(BotSeatSync_Rsp_struct&& other_) OMG_NOEXCEPT  :m_SeatSync_Rsp_ (std::move(other_.m_SeatSync_Rsp_))
    {
    } 

    BotSeatSync_Rsp_struct& BotSeatSync_Rsp_struct::operator=(BotSeatSync_Rsp_struct&&  other_) OMG_NOEXCEPT {
        BotSeatSync_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotSeatSync_Rsp_struct::swap(BotSeatSync_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SeatSync_Rsp_, other_.m_SeatSync_Rsp_);
    }  

    bool BotSeatSync_Rsp_struct::operator == (const BotSeatSync_Rsp_struct& other_) const {
        if (m_SeatSync_Rsp_ != other_.m_SeatSync_Rsp_) {
            return false;
        }
        return true;
    }
    bool BotSeatSync_Rsp_struct::operator != (const BotSeatSync_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotSeatSync_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SeatSync_Rsp: " << (int)sample.SeatSync_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- TargetPointSubstruct: 

    TargetPointSubstruct::TargetPointSubstruct() :
        m_TargetPoint_Num_ (0) ,
        m_MovePosition_Rz_ (0) ,
        m_TargetPointTime_Increase_ (0)  {
    }   

    TargetPointSubstruct::TargetPointSubstruct (
        uint8_t TargetPoint_Num,
        uint16_t MovePosition_Rz,
        uint16_t TargetPointTime_Increase)
        :
            m_TargetPoint_Num_( TargetPoint_Num ),
            m_MovePosition_Rz_( MovePosition_Rz ),
            m_TargetPointTime_Increase_( TargetPointTime_Increase ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    TargetPointSubstruct::TargetPointSubstruct(TargetPointSubstruct&& other_) OMG_NOEXCEPT  :m_TargetPoint_Num_ (std::move(other_.m_TargetPoint_Num_))
    ,
    m_MovePosition_Rz_ (std::move(other_.m_MovePosition_Rz_))
    ,
    m_TargetPointTime_Increase_ (std::move(other_.m_TargetPointTime_Increase_))
    {
    } 

    TargetPointSubstruct& TargetPointSubstruct::operator=(TargetPointSubstruct&&  other_) OMG_NOEXCEPT {
        TargetPointSubstruct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void TargetPointSubstruct::swap(TargetPointSubstruct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TargetPoint_Num_, other_.m_TargetPoint_Num_);
        swap(m_MovePosition_Rz_, other_.m_MovePosition_Rz_);
        swap(m_TargetPointTime_Increase_, other_.m_TargetPointTime_Increase_);
    }  

    bool TargetPointSubstruct::operator == (const TargetPointSubstruct& other_) const {
        if (m_TargetPoint_Num_ != other_.m_TargetPoint_Num_) {
            return false;
        }
        if (m_MovePosition_Rz_ != other_.m_MovePosition_Rz_) {
            return false;
        }
        if (m_TargetPointTime_Increase_ != other_.m_TargetPointTime_Increase_) {
            return false;
        }
        return true;
    }
    bool TargetPointSubstruct::operator != (const TargetPointSubstruct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const TargetPointSubstruct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TargetPoint_Num: " << (int)sample.TargetPoint_Num() <<", ";
        o << "MovePosition_Rz: " << sample.MovePosition_Rz()<<", ";
        o << "TargetPointTime_Increase: " << sample.TargetPointTime_Increase() ;
        o <<"]";
        return o;
    }

    // ---- BotScript_Ctrl_struct: 

    BotScript_Ctrl_struct::BotScript_Ctrl_struct() :
        m_ScriptID_ (0) ,
        m_MotionScript_ (0)  {
    }   

    BotScript_Ctrl_struct::BotScript_Ctrl_struct (
        uint8_t ScriptID,
        uint8_t MotionScript,
        const ::rti::core::bounded_sequence< BodyDomain::TargetPointSubstruct, 252L >& TargetPointSequence)
        :
            m_ScriptID_( ScriptID ),
            m_MotionScript_( MotionScript ),
            m_TargetPointSequence_( TargetPointSequence ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotScript_Ctrl_struct::BotScript_Ctrl_struct(BotScript_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_ScriptID_ (std::move(other_.m_ScriptID_))
    ,
    m_MotionScript_ (std::move(other_.m_MotionScript_))
    ,
    m_TargetPointSequence_ (std::move(other_.m_TargetPointSequence_))
    {
    } 

    BotScript_Ctrl_struct& BotScript_Ctrl_struct::operator=(BotScript_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        BotScript_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotScript_Ctrl_struct::swap(BotScript_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ScriptID_, other_.m_ScriptID_);
        swap(m_MotionScript_, other_.m_MotionScript_);
        swap(m_TargetPointSequence_, other_.m_TargetPointSequence_);
    }  

    bool BotScript_Ctrl_struct::operator == (const BotScript_Ctrl_struct& other_) const {
        if (m_ScriptID_ != other_.m_ScriptID_) {
            return false;
        }
        if (m_MotionScript_ != other_.m_MotionScript_) {
            return false;
        }
        if (m_TargetPointSequence_ != other_.m_TargetPointSequence_) {
            return false;
        }
        return true;
    }
    bool BotScript_Ctrl_struct::operator != (const BotScript_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotScript_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ScriptID: " << (int)sample.ScriptID() <<", ";
        o << "MotionScript: " << (int)sample.MotionScript() <<", ";
        o << "TargetPointSequence: " << sample.TargetPointSequence() ;
        o <<"]";
        return o;
    }

    // ---- BotScript_St_struct: 

    BotScript_St_struct::BotScript_St_struct() :
        m_TransScript_st_ (0)  {
    }   

    BotScript_St_struct::BotScript_St_struct (
        uint8_t TransScript_st)
        :
            m_TransScript_st_( TransScript_st ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotScript_St_struct::BotScript_St_struct(BotScript_St_struct&& other_) OMG_NOEXCEPT  :m_TransScript_st_ (std::move(other_.m_TransScript_st_))
    {
    } 

    BotScript_St_struct& BotScript_St_struct::operator=(BotScript_St_struct&&  other_) OMG_NOEXCEPT {
        BotScript_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotScript_St_struct::swap(BotScript_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TransScript_st_, other_.m_TransScript_st_);
    }  

    bool BotScript_St_struct::operator == (const BotScript_St_struct& other_) const {
        if (m_TransScript_st_ != other_.m_TransScript_st_) {
            return false;
        }
        return true;
    }
    bool BotScript_St_struct::operator != (const BotScript_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotScript_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TransScript_st: " << (int)sample.TransScript_st()  ;
        o <<"]";
        return o;
    }

    // ---- BotMotion_Ctrl_struct: 

    BotMotion_Ctrl_struct::BotMotion_Ctrl_struct() :
        m_RelCallMotionScript_Ctrl_ (0) ,
        m_AbsCallMotionScript_Ctrl_ (0) ,
        m_JogRight_Ctrl_ (0) ,
        m_JogLeft_Ctrl_ (0) ,
        m_ComfortPosition_Ctrl_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    BotMotion_Ctrl_struct::BotMotion_Ctrl_struct (
        uint8_t RelCallMotionScript_Ctrl,
        uint8_t AbsCallMotionScript_Ctrl,
        uint8_t JogRight_Ctrl,
        uint8_t JogLeft_Ctrl,
        uint8_t ComfortPosition_Ctrl,
        const std::string& CtrlSource)
        :
            m_RelCallMotionScript_Ctrl_( RelCallMotionScript_Ctrl ),
            m_AbsCallMotionScript_Ctrl_( AbsCallMotionScript_Ctrl ),
            m_JogRight_Ctrl_( JogRight_Ctrl ),
            m_JogLeft_Ctrl_( JogLeft_Ctrl ),
            m_ComfortPosition_Ctrl_( ComfortPosition_Ctrl ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotMotion_Ctrl_struct::BotMotion_Ctrl_struct(BotMotion_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_RelCallMotionScript_Ctrl_ (std::move(other_.m_RelCallMotionScript_Ctrl_))
    ,
    m_AbsCallMotionScript_Ctrl_ (std::move(other_.m_AbsCallMotionScript_Ctrl_))
    ,
    m_JogRight_Ctrl_ (std::move(other_.m_JogRight_Ctrl_))
    ,
    m_JogLeft_Ctrl_ (std::move(other_.m_JogLeft_Ctrl_))
    ,
    m_ComfortPosition_Ctrl_ (std::move(other_.m_ComfortPosition_Ctrl_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    BotMotion_Ctrl_struct& BotMotion_Ctrl_struct::operator=(BotMotion_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        BotMotion_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotMotion_Ctrl_struct::swap(BotMotion_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_RelCallMotionScript_Ctrl_, other_.m_RelCallMotionScript_Ctrl_);
        swap(m_AbsCallMotionScript_Ctrl_, other_.m_AbsCallMotionScript_Ctrl_);
        swap(m_JogRight_Ctrl_, other_.m_JogRight_Ctrl_);
        swap(m_JogLeft_Ctrl_, other_.m_JogLeft_Ctrl_);
        swap(m_ComfortPosition_Ctrl_, other_.m_ComfortPosition_Ctrl_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool BotMotion_Ctrl_struct::operator == (const BotMotion_Ctrl_struct& other_) const {
        if (m_RelCallMotionScript_Ctrl_ != other_.m_RelCallMotionScript_Ctrl_) {
            return false;
        }
        if (m_AbsCallMotionScript_Ctrl_ != other_.m_AbsCallMotionScript_Ctrl_) {
            return false;
        }
        if (m_JogRight_Ctrl_ != other_.m_JogRight_Ctrl_) {
            return false;
        }
        if (m_JogLeft_Ctrl_ != other_.m_JogLeft_Ctrl_) {
            return false;
        }
        if (m_ComfortPosition_Ctrl_ != other_.m_ComfortPosition_Ctrl_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool BotMotion_Ctrl_struct::operator != (const BotMotion_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotMotion_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "RelCallMotionScript_Ctrl: " << (int)sample.RelCallMotionScript_Ctrl() <<", ";
        o << "AbsCallMotionScript_Ctrl: " << (int)sample.AbsCallMotionScript_Ctrl() <<", ";
        o << "JogRight_Ctrl: " << (int)sample.JogRight_Ctrl() <<", ";
        o << "JogLeft_Ctrl: " << (int)sample.JogLeft_Ctrl() <<", ";
        o << "ComfortPosition_Ctrl: " << (int)sample.ComfortPosition_Ctrl() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- BotMotion_Ctrl_SOA_struct: 

    BotMotion_Ctrl_SOA_struct::BotMotion_Ctrl_SOA_struct() :
        m_BotMotion_Ctrl_SOA_u8_ (0)  {
    }   

    BotMotion_Ctrl_SOA_struct::BotMotion_Ctrl_SOA_struct (
        uint8_t BotMotion_Ctrl_SOA_u8)
        :
            m_BotMotion_Ctrl_SOA_u8_( BotMotion_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotMotion_Ctrl_SOA_struct::BotMotion_Ctrl_SOA_struct(BotMotion_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_BotMotion_Ctrl_SOA_u8_ (std::move(other_.m_BotMotion_Ctrl_SOA_u8_))
    {
    } 

    BotMotion_Ctrl_SOA_struct& BotMotion_Ctrl_SOA_struct::operator=(BotMotion_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        BotMotion_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotMotion_Ctrl_SOA_struct::swap(BotMotion_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_BotMotion_Ctrl_SOA_u8_, other_.m_BotMotion_Ctrl_SOA_u8_);
    }  

    bool BotMotion_Ctrl_SOA_struct::operator == (const BotMotion_Ctrl_SOA_struct& other_) const {
        if (m_BotMotion_Ctrl_SOA_u8_ != other_.m_BotMotion_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool BotMotion_Ctrl_SOA_struct::operator != (const BotMotion_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotMotion_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "BotMotion_Ctrl_SOA_u8: " << (int)sample.BotMotion_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- BotMotion_St_struct: 

    BotMotion_St_struct::BotMotion_St_struct() :
        m_Main_St_ (0) ,
        m_Sub_St_ (0) ,
        m_RotationAngle_Z_St_ (0) ,
        m_MotionCommand_St_ (0) ,
        m_ComfortPosition_St_ (0) ,
        m_ScriptExeFinish_Rsp_ (0)  {
    }   

    BotMotion_St_struct::BotMotion_St_struct (
        uint8_t Main_St,
        uint8_t Sub_St,
        uint8_t RotationAngle_Z_St,
        uint8_t MotionCommand_St,
        uint8_t ComfortPosition_St,
        uint8_t ScriptExeFinish_Rsp)
        :
            m_Main_St_( Main_St ),
            m_Sub_St_( Sub_St ),
            m_RotationAngle_Z_St_( RotationAngle_Z_St ),
            m_MotionCommand_St_( MotionCommand_St ),
            m_ComfortPosition_St_( ComfortPosition_St ),
            m_ScriptExeFinish_Rsp_( ScriptExeFinish_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    BotMotion_St_struct::BotMotion_St_struct(BotMotion_St_struct&& other_) OMG_NOEXCEPT  :m_Main_St_ (std::move(other_.m_Main_St_))
    ,
    m_Sub_St_ (std::move(other_.m_Sub_St_))
    ,
    m_RotationAngle_Z_St_ (std::move(other_.m_RotationAngle_Z_St_))
    ,
    m_MotionCommand_St_ (std::move(other_.m_MotionCommand_St_))
    ,
    m_ComfortPosition_St_ (std::move(other_.m_ComfortPosition_St_))
    ,
    m_ScriptExeFinish_Rsp_ (std::move(other_.m_ScriptExeFinish_Rsp_))
    {
    } 

    BotMotion_St_struct& BotMotion_St_struct::operator=(BotMotion_St_struct&&  other_) OMG_NOEXCEPT {
        BotMotion_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void BotMotion_St_struct::swap(BotMotion_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_Main_St_, other_.m_Main_St_);
        swap(m_Sub_St_, other_.m_Sub_St_);
        swap(m_RotationAngle_Z_St_, other_.m_RotationAngle_Z_St_);
        swap(m_MotionCommand_St_, other_.m_MotionCommand_St_);
        swap(m_ComfortPosition_St_, other_.m_ComfortPosition_St_);
        swap(m_ScriptExeFinish_Rsp_, other_.m_ScriptExeFinish_Rsp_);
    }  

    bool BotMotion_St_struct::operator == (const BotMotion_St_struct& other_) const {
        if (m_Main_St_ != other_.m_Main_St_) {
            return false;
        }
        if (m_Sub_St_ != other_.m_Sub_St_) {
            return false;
        }
        if (m_RotationAngle_Z_St_ != other_.m_RotationAngle_Z_St_) {
            return false;
        }
        if (m_MotionCommand_St_ != other_.m_MotionCommand_St_) {
            return false;
        }
        if (m_ComfortPosition_St_ != other_.m_ComfortPosition_St_) {
            return false;
        }
        if (m_ScriptExeFinish_Rsp_ != other_.m_ScriptExeFinish_Rsp_) {
            return false;
        }
        return true;
    }
    bool BotMotion_St_struct::operator != (const BotMotion_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const BotMotion_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "Main_St: " << (int)sample.Main_St() <<", ";
        o << "Sub_St: " << (int)sample.Sub_St() <<", ";
        o << "RotationAngle_Z_St: " << (int)sample.RotationAngle_Z_St() <<", ";
        o << "MotionCommand_St: " << (int)sample.MotionCommand_St() <<", ";
        o << "ComfortPosition_St: " << (int)sample.ComfortPosition_St() <<", ";
        o << "ScriptExeFinish_Rsp: " << (int)sample.ScriptExeFinish_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- Bot_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Bot_Srv_Req_Union::Bot_Srv_Req_Union(Bot_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BotSeatSync_Set( std::move(other_.BotSeatSync_Set()));
            } break;
            case 1:
            {  
                BotSeatSync_Get( std::move(other_.BotSeatSync_Get()));
            } break;
            case 2:
            {  
                BotMotion_Ctrl( std::move(other_.BotMotion_Ctrl()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    Bot_Srv_Req_Union& Bot_Srv_Req_Union::operator=(Bot_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        Bot_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    Bot_Srv_Req_Union::Union_::Union_()  {
    }

    Bot_Srv_Req_Union::Union_::Union_(
        const BodyDomain::BotSeatSync_Set_struct& BotSeatSync_Set,
        const BodyDomain::BotSeatSync_Get_struct& BotSeatSync_Get,
        const BodyDomain::BotMotion_Ctrl_struct& BotMotion_Ctrl)
        :
            m_BotSeatSync_Set_( BotSeatSync_Set ),
            m_BotSeatSync_Get_( BotSeatSync_Get ),
            m_BotMotion_Ctrl_( BotMotion_Ctrl ) {
    }

    Bot_Srv_Req_Union::Bot_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void Bot_Srv_Req_Union::swap(Bot_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BotSeatSync_Set_, other_.m_u_.m_BotSeatSync_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BotSeatSync_Get_, other_.m_u_.m_BotSeatSync_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BotMotion_Ctrl_, other_.m_u_.m_BotMotion_Ctrl_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BotSeatSync_Set_, other_.m_u_.m_BotSeatSync_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BotSeatSync_Get_, other_.m_u_.m_BotSeatSync_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BotMotion_Ctrl_, other_.m_u_.m_BotMotion_Ctrl_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool Bot_Srv_Req_Union::operator == (const Bot_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BotSeatSync_Set_ != other_.m_u_.m_BotSeatSync_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BotSeatSync_Get_ != other_.m_u_.m_BotSeatSync_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BotMotion_Ctrl_ != other_.m_u_.m_BotMotion_Ctrl_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool Bot_Srv_Req_Union::operator != (const Bot_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Bot_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BotSeatSync_Set: " << sample.BotSeatSync_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "BotSeatSync_Get: " << sample.BotSeatSync_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "BotMotion_Ctrl: " << sample.BotMotion_Ctrl() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t Bot_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- Bot_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Bot_Srv_Resp_Union::Bot_Srv_Resp_Union(Bot_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                BotSeatSync_Set_SOA( std::move(other_.BotSeatSync_Set_SOA()));
            } break;
            case 1:
            {  
                BotSeatSync_Get_SOA( std::move(other_.BotSeatSync_Get_SOA()));
            } break;
            case 2:
            {  
                BotMotion_Ctrl_SOA( std::move(other_.BotMotion_Ctrl_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    Bot_Srv_Resp_Union& Bot_Srv_Resp_Union::operator=(Bot_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        Bot_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    Bot_Srv_Resp_Union::Union_::Union_()  {
    }

    Bot_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::BotSeatSync_Rsp_struct& BotSeatSync_Set_SOA,
        const BodyDomain::BotSeatSync_Rsp_struct& BotSeatSync_Get_SOA,
        const BodyDomain::BotMotion_Ctrl_SOA_struct& BotMotion_Ctrl_SOA)
        :
            m_BotSeatSync_Set_SOA_( BotSeatSync_Set_SOA ),
            m_BotSeatSync_Get_SOA_( BotSeatSync_Get_SOA ),
            m_BotMotion_Ctrl_SOA_( BotMotion_Ctrl_SOA ) {
    }

    Bot_Srv_Resp_Union::Bot_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void Bot_Srv_Resp_Union::swap(Bot_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_BotSeatSync_Set_SOA_, other_.m_u_.m_BotSeatSync_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_BotSeatSync_Get_SOA_, other_.m_u_.m_BotSeatSync_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_BotMotion_Ctrl_SOA_, other_.m_u_.m_BotMotion_Ctrl_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_BotSeatSync_Set_SOA_, other_.m_u_.m_BotSeatSync_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_BotSeatSync_Get_SOA_, other_.m_u_.m_BotSeatSync_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_BotMotion_Ctrl_SOA_, other_.m_u_.m_BotMotion_Ctrl_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool Bot_Srv_Resp_Union::operator == (const Bot_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_BotSeatSync_Set_SOA_ != other_.m_u_.m_BotSeatSync_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_BotSeatSync_Get_SOA_ != other_.m_u_.m_BotSeatSync_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_BotMotion_Ctrl_SOA_ != other_.m_u_.m_BotMotion_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool Bot_Srv_Resp_Union::operator != (const Bot_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Bot_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "BotSeatSync_Set_SOA: " << sample.BotSeatSync_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "BotSeatSync_Get_SOA: " << sample.BotSeatSync_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "BotMotion_Ctrl_SOA: " << sample.BotMotion_Ctrl_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t Bot_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- DKLst_Get_struct: 

    DKLst_Get_struct::DKLst_Get_struct() :
        m_DKLst_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    DKLst_Get_struct::DKLst_Get_struct (
        uint8_t DKLst_Req,
        const std::string& CtrlSource)
        :
            m_DKLst_Req_( DKLst_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DKLst_Get_struct::DKLst_Get_struct(DKLst_Get_struct&& other_) OMG_NOEXCEPT  :m_DKLst_Req_ (std::move(other_.m_DKLst_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    DKLst_Get_struct& DKLst_Get_struct::operator=(DKLst_Get_struct&&  other_) OMG_NOEXCEPT {
        DKLst_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DKLst_Get_struct::swap(DKLst_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_DKLst_Req_, other_.m_DKLst_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool DKLst_Get_struct::operator == (const DKLst_Get_struct& other_) const {
        if (m_DKLst_Req_ != other_.m_DKLst_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool DKLst_Get_struct::operator != (const DKLst_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DKLst_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "DKLst_Req: " << (int)sample.DKLst_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- DigitalKeyIDArray: 

    DigitalKeyIDArray::DigitalKeyIDArray()  {
        ::rti::core::fill_array< uint8_t >( m_DigitalKeyID_, 0);
    }   

    DigitalKeyIDArray::DigitalKeyIDArray (
        const ::dds::core::array< uint8_t, 16L>& DigitalKeyID)
        :
            m_DigitalKeyID_( DigitalKeyID ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DigitalKeyIDArray::DigitalKeyIDArray(DigitalKeyIDArray&& other_) OMG_NOEXCEPT  :m_DigitalKeyID_ (std::move(other_.m_DigitalKeyID_))
    {
    } 

    DigitalKeyIDArray& DigitalKeyIDArray::operator=(DigitalKeyIDArray&&  other_) OMG_NOEXCEPT {
        DigitalKeyIDArray tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DigitalKeyIDArray::swap(DigitalKeyIDArray& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_DigitalKeyID_, other_.m_DigitalKeyID_);
    }  

    bool DigitalKeyIDArray::operator == (const DigitalKeyIDArray& other_) const {
        if (m_DigitalKeyID_ != other_.m_DigitalKeyID_) {
            return false;
        }
        return true;
    }
    bool DigitalKeyIDArray::operator != (const DigitalKeyIDArray& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DigitalKeyIDArray& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "DigitalKeyID: " << sample.DigitalKeyID() ;
        o <<"]";
        return o;
    }

    // ---- DKLstSubstruct: 

    DKLstSubstruct::DKLstSubstruct() :
        m_DigitalKey_St_ (0) ,
        m_DigitalKeyName_ ("") ,
        m_DigitalKeyAuth_St_ (0)  {
    }   

    DKLstSubstruct::DKLstSubstruct (
        const BodyDomain::DigitalKeyIDArray& DigitalKeyID,
        uint8_t DigitalKey_St,
        const std::string& DigitalKeyName,
        uint8_t DigitalKeyAuth_St)
        :
            m_DigitalKeyID_( DigitalKeyID ),
            m_DigitalKey_St_( DigitalKey_St ),
            m_DigitalKeyName_( DigitalKeyName ),
            m_DigitalKeyAuth_St_( DigitalKeyAuth_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DKLstSubstruct::DKLstSubstruct(DKLstSubstruct&& other_) OMG_NOEXCEPT  :m_DigitalKeyID_ (std::move(other_.m_DigitalKeyID_))
    ,
    m_DigitalKey_St_ (std::move(other_.m_DigitalKey_St_))
    ,
    m_DigitalKeyName_ (std::move(other_.m_DigitalKeyName_))
    ,
    m_DigitalKeyAuth_St_ (std::move(other_.m_DigitalKeyAuth_St_))
    {
    } 

    DKLstSubstruct& DKLstSubstruct::operator=(DKLstSubstruct&&  other_) OMG_NOEXCEPT {
        DKLstSubstruct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DKLstSubstruct::swap(DKLstSubstruct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_DigitalKeyID_, other_.m_DigitalKeyID_);
        swap(m_DigitalKey_St_, other_.m_DigitalKey_St_);
        swap(m_DigitalKeyName_, other_.m_DigitalKeyName_);
        swap(m_DigitalKeyAuth_St_, other_.m_DigitalKeyAuth_St_);
    }  

    bool DKLstSubstruct::operator == (const DKLstSubstruct& other_) const {
        if (m_DigitalKeyID_ != other_.m_DigitalKeyID_) {
            return false;
        }
        if (m_DigitalKey_St_ != other_.m_DigitalKey_St_) {
            return false;
        }
        if (m_DigitalKeyName_ != other_.m_DigitalKeyName_) {
            return false;
        }
        if (m_DigitalKeyAuth_St_ != other_.m_DigitalKeyAuth_St_) {
            return false;
        }
        return true;
    }
    bool DKLstSubstruct::operator != (const DKLstSubstruct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DKLstSubstruct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "DigitalKeyID: " << sample.DigitalKeyID()<<", ";
        o << "DigitalKey_St: " << (int)sample.DigitalKey_St() <<", ";
        o << "DigitalKeyName: " << sample.DigitalKeyName()<<", ";
        o << "DigitalKeyAuth_St: " << (int)sample.DigitalKeyAuth_St()  ;
        o <<"]";
        return o;
    }

    // ---- DKLst_Rsp_array: 

    DKLst_Rsp_array::DKLst_Rsp_array()  {
    }   

    DKLst_Rsp_array::DKLst_Rsp_array (
        const ::rti::core::bounded_sequence< BodyDomain::DKLstSubstruct, 16L >& DKLst)
        :
            m_DKLst_( DKLst ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DKLst_Rsp_array::DKLst_Rsp_array(DKLst_Rsp_array&& other_) OMG_NOEXCEPT  :m_DKLst_ (std::move(other_.m_DKLst_))
    {
    } 

    DKLst_Rsp_array& DKLst_Rsp_array::operator=(DKLst_Rsp_array&&  other_) OMG_NOEXCEPT {
        DKLst_Rsp_array tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DKLst_Rsp_array::swap(DKLst_Rsp_array& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_DKLst_, other_.m_DKLst_);
    }  

    bool DKLst_Rsp_array::operator == (const DKLst_Rsp_array& other_) const {
        if (m_DKLst_ != other_.m_DKLst_) {
            return false;
        }
        return true;
    }
    bool DKLst_Rsp_array::operator != (const DKLst_Rsp_array& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DKLst_Rsp_array& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "DKLst: " << sample.DKLst() ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyLst_Get_struct: 

    NFCKeyLst_Get_struct::NFCKeyLst_Get_struct() :
        m_NFCKeyLst_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    NFCKeyLst_Get_struct::NFCKeyLst_Get_struct (
        uint8_t NFCKeyLst_Req,
        const std::string& CtrlSource)
        :
            m_NFCKeyLst_Req_( NFCKeyLst_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyLst_Get_struct::NFCKeyLst_Get_struct(NFCKeyLst_Get_struct&& other_) OMG_NOEXCEPT  :m_NFCKeyLst_Req_ (std::move(other_.m_NFCKeyLst_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    NFCKeyLst_Get_struct& NFCKeyLst_Get_struct::operator=(NFCKeyLst_Get_struct&&  other_) OMG_NOEXCEPT {
        NFCKeyLst_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyLst_Get_struct::swap(NFCKeyLst_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCKeyLst_Req_, other_.m_NFCKeyLst_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool NFCKeyLst_Get_struct::operator == (const NFCKeyLst_Get_struct& other_) const {
        if (m_NFCKeyLst_Req_ != other_.m_NFCKeyLst_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool NFCKeyLst_Get_struct::operator != (const NFCKeyLst_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyLst_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCKeyLst_Req: " << (int)sample.NFCKeyLst_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- NFCCardIDArray: 

    NFCCardIDArray::NFCCardIDArray()  {
        ::rti::core::fill_array< uint8_t >( m_NFCCardID_, 0);
    }   

    NFCCardIDArray::NFCCardIDArray (
        const ::dds::core::array< uint8_t, 16L>& NFCCardID)
        :
            m_NFCCardID_( NFCCardID ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCCardIDArray::NFCCardIDArray(NFCCardIDArray&& other_) OMG_NOEXCEPT  :m_NFCCardID_ (std::move(other_.m_NFCCardID_))
    {
    } 

    NFCCardIDArray& NFCCardIDArray::operator=(NFCCardIDArray&&  other_) OMG_NOEXCEPT {
        NFCCardIDArray tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCCardIDArray::swap(NFCCardIDArray& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCCardID_, other_.m_NFCCardID_);
    }  

    bool NFCCardIDArray::operator == (const NFCCardIDArray& other_) const {
        if (m_NFCCardID_ != other_.m_NFCCardID_) {
            return false;
        }
        return true;
    }
    bool NFCCardIDArray::operator != (const NFCCardIDArray& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCCardIDArray& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCCardID: " << sample.NFCCardID() ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyLstSubstruct: 

    NFCKeyLstSubstruct::NFCKeyLstSubstruct() :
        m_NFCCard1_St_ (0) ,
        m_NFCCardName_ ("") ,
        m_NFCCardAuth_St_ (0)  {
    }   

    NFCKeyLstSubstruct::NFCKeyLstSubstruct (
        const BodyDomain::NFCCardIDArray& NFCCardID,
        uint8_t NFCCard1_St,
        const std::string& NFCCardName,
        uint8_t NFCCardAuth_St)
        :
            m_NFCCardID_( NFCCardID ),
            m_NFCCard1_St_( NFCCard1_St ),
            m_NFCCardName_( NFCCardName ),
            m_NFCCardAuth_St_( NFCCardAuth_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyLstSubstruct::NFCKeyLstSubstruct(NFCKeyLstSubstruct&& other_) OMG_NOEXCEPT  :m_NFCCardID_ (std::move(other_.m_NFCCardID_))
    ,
    m_NFCCard1_St_ (std::move(other_.m_NFCCard1_St_))
    ,
    m_NFCCardName_ (std::move(other_.m_NFCCardName_))
    ,
    m_NFCCardAuth_St_ (std::move(other_.m_NFCCardAuth_St_))
    {
    } 

    NFCKeyLstSubstruct& NFCKeyLstSubstruct::operator=(NFCKeyLstSubstruct&&  other_) OMG_NOEXCEPT {
        NFCKeyLstSubstruct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyLstSubstruct::swap(NFCKeyLstSubstruct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCCardID_, other_.m_NFCCardID_);
        swap(m_NFCCard1_St_, other_.m_NFCCard1_St_);
        swap(m_NFCCardName_, other_.m_NFCCardName_);
        swap(m_NFCCardAuth_St_, other_.m_NFCCardAuth_St_);
    }  

    bool NFCKeyLstSubstruct::operator == (const NFCKeyLstSubstruct& other_) const {
        if (m_NFCCardID_ != other_.m_NFCCardID_) {
            return false;
        }
        if (m_NFCCard1_St_ != other_.m_NFCCard1_St_) {
            return false;
        }
        if (m_NFCCardName_ != other_.m_NFCCardName_) {
            return false;
        }
        if (m_NFCCardAuth_St_ != other_.m_NFCCardAuth_St_) {
            return false;
        }
        return true;
    }
    bool NFCKeyLstSubstruct::operator != (const NFCKeyLstSubstruct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyLstSubstruct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCCardID: " << sample.NFCCardID()<<", ";
        o << "NFCCard1_St: " << (int)sample.NFCCard1_St() <<", ";
        o << "NFCCardName: " << sample.NFCCardName()<<", ";
        o << "NFCCardAuth_St: " << (int)sample.NFCCardAuth_St()  ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyLst_Rsp_array: 

    NFCKeyLst_Rsp_array::NFCKeyLst_Rsp_array()  {
    }   

    NFCKeyLst_Rsp_array::NFCKeyLst_Rsp_array (
        const ::rti::core::bounded_sequence< BodyDomain::NFCKeyLstSubstruct, 10L >& NFCKeyLst)
        :
            m_NFCKeyLst_( NFCKeyLst ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyLst_Rsp_array::NFCKeyLst_Rsp_array(NFCKeyLst_Rsp_array&& other_) OMG_NOEXCEPT  :m_NFCKeyLst_ (std::move(other_.m_NFCKeyLst_))
    {
    } 

    NFCKeyLst_Rsp_array& NFCKeyLst_Rsp_array::operator=(NFCKeyLst_Rsp_array&&  other_) OMG_NOEXCEPT {
        NFCKeyLst_Rsp_array tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyLst_Rsp_array::swap(NFCKeyLst_Rsp_array& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCKeyLst_, other_.m_NFCKeyLst_);
    }  

    bool NFCKeyLst_Rsp_array::operator == (const NFCKeyLst_Rsp_array& other_) const {
        if (m_NFCKeyLst_ != other_.m_NFCKeyLst_) {
            return false;
        }
        return true;
    }
    bool NFCKeyLst_Rsp_array::operator != (const NFCKeyLst_Rsp_array& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyLst_Rsp_array& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCKeyLst: " << sample.NFCKeyLst() ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyRename_Set_struct: 

    NFCKeyRename_Set_struct::NFCKeyRename_Set_struct() :
        m_NFCCardName_ ("") ,
        m_CtrlSource_ ("")  {
    }   

    NFCKeyRename_Set_struct::NFCKeyRename_Set_struct (
        const BodyDomain::NFCCardIDArray& NFCCardID,
        const std::string& NFCCardName,
        const std::string& CtrlSource)
        :
            m_NFCCardID_( NFCCardID ),
            m_NFCCardName_( NFCCardName ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyRename_Set_struct::NFCKeyRename_Set_struct(NFCKeyRename_Set_struct&& other_) OMG_NOEXCEPT  :m_NFCCardID_ (std::move(other_.m_NFCCardID_))
    ,
    m_NFCCardName_ (std::move(other_.m_NFCCardName_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    NFCKeyRename_Set_struct& NFCKeyRename_Set_struct::operator=(NFCKeyRename_Set_struct&&  other_) OMG_NOEXCEPT {
        NFCKeyRename_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyRename_Set_struct::swap(NFCKeyRename_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCCardID_, other_.m_NFCCardID_);
        swap(m_NFCCardName_, other_.m_NFCCardName_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool NFCKeyRename_Set_struct::operator == (const NFCKeyRename_Set_struct& other_) const {
        if (m_NFCCardID_ != other_.m_NFCCardID_) {
            return false;
        }
        if (m_NFCCardName_ != other_.m_NFCCardName_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool NFCKeyRename_Set_struct::operator != (const NFCKeyRename_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyRename_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCCardID: " << sample.NFCCardID()<<", ";
        o << "NFCCardName: " << sample.NFCCardName()<<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyRename_Rsp_struct: 

    NFCKeyRename_Rsp_struct::NFCKeyRename_Rsp_struct() :
        m_NFCCardRenameRslt_ (0)  {
    }   

    NFCKeyRename_Rsp_struct::NFCKeyRename_Rsp_struct (
        uint8_t NFCCardRenameRslt)
        :
            m_NFCCardRenameRslt_( NFCCardRenameRslt ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyRename_Rsp_struct::NFCKeyRename_Rsp_struct(NFCKeyRename_Rsp_struct&& other_) OMG_NOEXCEPT  :m_NFCCardRenameRslt_ (std::move(other_.m_NFCCardRenameRslt_))
    {
    } 

    NFCKeyRename_Rsp_struct& NFCKeyRename_Rsp_struct::operator=(NFCKeyRename_Rsp_struct&&  other_) OMG_NOEXCEPT {
        NFCKeyRename_Rsp_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyRename_Rsp_struct::swap(NFCKeyRename_Rsp_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCCardRenameRslt_, other_.m_NFCCardRenameRslt_);
    }  

    bool NFCKeyRename_Rsp_struct::operator == (const NFCKeyRename_Rsp_struct& other_) const {
        if (m_NFCCardRenameRslt_ != other_.m_NFCCardRenameRslt_) {
            return false;
        }
        return true;
    }
    bool NFCKeyRename_Rsp_struct::operator != (const NFCKeyRename_Rsp_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyRename_Rsp_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCCardRenameRslt: " << (int)sample.NFCCardRenameRslt()  ;
        o <<"]";
        return o;
    }

    // ---- PhysicalKeyLst_Get_struct: 

    PhysicalKeyLst_Get_struct::PhysicalKeyLst_Get_struct() :
        m_PhysicalKeyLst_Req_ (0)  {
    }   

    PhysicalKeyLst_Get_struct::PhysicalKeyLst_Get_struct (
        uint8_t PhysicalKeyLst_Req)
        :
            m_PhysicalKeyLst_Req_( PhysicalKeyLst_Req ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PhysicalKeyLst_Get_struct::PhysicalKeyLst_Get_struct(PhysicalKeyLst_Get_struct&& other_) OMG_NOEXCEPT  :m_PhysicalKeyLst_Req_ (std::move(other_.m_PhysicalKeyLst_Req_))
    {
    } 

    PhysicalKeyLst_Get_struct& PhysicalKeyLst_Get_struct::operator=(PhysicalKeyLst_Get_struct&&  other_) OMG_NOEXCEPT {
        PhysicalKeyLst_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PhysicalKeyLst_Get_struct::swap(PhysicalKeyLst_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_PhysicalKeyLst_Req_, other_.m_PhysicalKeyLst_Req_);
    }  

    bool PhysicalKeyLst_Get_struct::operator == (const PhysicalKeyLst_Get_struct& other_) const {
        if (m_PhysicalKeyLst_Req_ != other_.m_PhysicalKeyLst_Req_) {
            return false;
        }
        return true;
    }
    bool PhysicalKeyLst_Get_struct::operator != (const PhysicalKeyLst_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PhysicalKeyLst_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "PhysicalKeyLst_Req: " << (int)sample.PhysicalKeyLst_Req()  ;
        o <<"]";
        return o;
    }

    // ---- PhysicalKeyMACArray: 

    PhysicalKeyMACArray::PhysicalKeyMACArray()  {
        ::rti::core::fill_array< uint8_t >( m_PhysicalKeyMACAddr_, 0);
    }   

    PhysicalKeyMACArray::PhysicalKeyMACArray (
        const ::dds::core::array< uint8_t, 6L>& PhysicalKeyMACAddr)
        :
            m_PhysicalKeyMACAddr_( PhysicalKeyMACAddr ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PhysicalKeyMACArray::PhysicalKeyMACArray(PhysicalKeyMACArray&& other_) OMG_NOEXCEPT  :m_PhysicalKeyMACAddr_ (std::move(other_.m_PhysicalKeyMACAddr_))
    {
    } 

    PhysicalKeyMACArray& PhysicalKeyMACArray::operator=(PhysicalKeyMACArray&&  other_) OMG_NOEXCEPT {
        PhysicalKeyMACArray tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PhysicalKeyMACArray::swap(PhysicalKeyMACArray& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_PhysicalKeyMACAddr_, other_.m_PhysicalKeyMACAddr_);
    }  

    bool PhysicalKeyMACArray::operator == (const PhysicalKeyMACArray& other_) const {
        if (m_PhysicalKeyMACAddr_ != other_.m_PhysicalKeyMACAddr_) {
            return false;
        }
        return true;
    }
    bool PhysicalKeyMACArray::operator != (const PhysicalKeyMACArray& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PhysicalKeyMACArray& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "PhysicalKeyMACAddr: " << sample.PhysicalKeyMACAddr() ;
        o <<"]";
        return o;
    }

    // ---- PhysicalKeyLstSubstruct: 

    PhysicalKeyLstSubstruct::PhysicalKeyLstSubstruct() :
        m_PhysicalKeyAuth_St_ (0)  {
    }   

    PhysicalKeyLstSubstruct::PhysicalKeyLstSubstruct (
        const BodyDomain::PhysicalKeyMACArray& PhysicalKeyMACAddr,
        uint8_t PhysicalKeyAuth_St)
        :
            m_PhysicalKeyMACAddr_( PhysicalKeyMACAddr ),
            m_PhysicalKeyAuth_St_( PhysicalKeyAuth_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PhysicalKeyLstSubstruct::PhysicalKeyLstSubstruct(PhysicalKeyLstSubstruct&& other_) OMG_NOEXCEPT  :m_PhysicalKeyMACAddr_ (std::move(other_.m_PhysicalKeyMACAddr_))
    ,
    m_PhysicalKeyAuth_St_ (std::move(other_.m_PhysicalKeyAuth_St_))
    {
    } 

    PhysicalKeyLstSubstruct& PhysicalKeyLstSubstruct::operator=(PhysicalKeyLstSubstruct&&  other_) OMG_NOEXCEPT {
        PhysicalKeyLstSubstruct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PhysicalKeyLstSubstruct::swap(PhysicalKeyLstSubstruct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_PhysicalKeyMACAddr_, other_.m_PhysicalKeyMACAddr_);
        swap(m_PhysicalKeyAuth_St_, other_.m_PhysicalKeyAuth_St_);
    }  

    bool PhysicalKeyLstSubstruct::operator == (const PhysicalKeyLstSubstruct& other_) const {
        if (m_PhysicalKeyMACAddr_ != other_.m_PhysicalKeyMACAddr_) {
            return false;
        }
        if (m_PhysicalKeyAuth_St_ != other_.m_PhysicalKeyAuth_St_) {
            return false;
        }
        return true;
    }
    bool PhysicalKeyLstSubstruct::operator != (const PhysicalKeyLstSubstruct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PhysicalKeyLstSubstruct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "PhysicalKeyMACAddr: " << sample.PhysicalKeyMACAddr()<<", ";
        o << "PhysicalKeyAuth_St: " << (int)sample.PhysicalKeyAuth_St()  ;
        o <<"]";
        return o;
    }

    // ---- PhysicalKeyLst_Rsp_array: 

    PhysicalKeyLst_Rsp_array::PhysicalKeyLst_Rsp_array()  {
    }   

    PhysicalKeyLst_Rsp_array::PhysicalKeyLst_Rsp_array (
        const ::rti::core::bounded_sequence< BodyDomain::PhysicalKeyLstSubstruct, 2L >& PhysicalKeyLst)
        :
            m_PhysicalKeyLst_( PhysicalKeyLst ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PhysicalKeyLst_Rsp_array::PhysicalKeyLst_Rsp_array(PhysicalKeyLst_Rsp_array&& other_) OMG_NOEXCEPT  :m_PhysicalKeyLst_ (std::move(other_.m_PhysicalKeyLst_))
    {
    } 

    PhysicalKeyLst_Rsp_array& PhysicalKeyLst_Rsp_array::operator=(PhysicalKeyLst_Rsp_array&&  other_) OMG_NOEXCEPT {
        PhysicalKeyLst_Rsp_array tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PhysicalKeyLst_Rsp_array::swap(PhysicalKeyLst_Rsp_array& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_PhysicalKeyLst_, other_.m_PhysicalKeyLst_);
    }  

    bool PhysicalKeyLst_Rsp_array::operator == (const PhysicalKeyLst_Rsp_array& other_) const {
        if (m_PhysicalKeyLst_ != other_.m_PhysicalKeyLst_) {
            return false;
        }
        return true;
    }
    bool PhysicalKeyLst_Rsp_array::operator != (const PhysicalKeyLst_Rsp_array& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PhysicalKeyLst_Rsp_array& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "PhysicalKeyLst: " << sample.PhysicalKeyLst() ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyMag_Crtl_struct: 

    NFCKeyMag_Crtl_struct::NFCKeyMag_Crtl_struct() :
        m_NFCSKeyAuth_Set_ (0) ,
        m_NFCKeyBind_Set_ (0) ,
        m_NFCKeyDel_Set_ (0) ,
        m_NFCKeyFrz_Set_ (0) ,
        m_NFCKeyUnfrzAuth_Set_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    NFCKeyMag_Crtl_struct::NFCKeyMag_Crtl_struct (
        uint8_t NFCSKeyAuth_Set,
        uint8_t NFCKeyBind_Set,
        uint8_t NFCKeyDel_Set,
        uint8_t NFCKeyFrz_Set,
        uint8_t NFCKeyUnfrzAuth_Set,
        const BodyDomain::NFCCardIDArray& NFCCardID,
        const std::string& CtrlSource)
        :
            m_NFCSKeyAuth_Set_( NFCSKeyAuth_Set ),
            m_NFCKeyBind_Set_( NFCKeyBind_Set ),
            m_NFCKeyDel_Set_( NFCKeyDel_Set ),
            m_NFCKeyFrz_Set_( NFCKeyFrz_Set ),
            m_NFCKeyUnfrzAuth_Set_( NFCKeyUnfrzAuth_Set ),
            m_NFCCardID_( NFCCardID ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyMag_Crtl_struct::NFCKeyMag_Crtl_struct(NFCKeyMag_Crtl_struct&& other_) OMG_NOEXCEPT  :m_NFCSKeyAuth_Set_ (std::move(other_.m_NFCSKeyAuth_Set_))
    ,
    m_NFCKeyBind_Set_ (std::move(other_.m_NFCKeyBind_Set_))
    ,
    m_NFCKeyDel_Set_ (std::move(other_.m_NFCKeyDel_Set_))
    ,
    m_NFCKeyFrz_Set_ (std::move(other_.m_NFCKeyFrz_Set_))
    ,
    m_NFCKeyUnfrzAuth_Set_ (std::move(other_.m_NFCKeyUnfrzAuth_Set_))
    ,
    m_NFCCardID_ (std::move(other_.m_NFCCardID_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    NFCKeyMag_Crtl_struct& NFCKeyMag_Crtl_struct::operator=(NFCKeyMag_Crtl_struct&&  other_) OMG_NOEXCEPT {
        NFCKeyMag_Crtl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyMag_Crtl_struct::swap(NFCKeyMag_Crtl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCSKeyAuth_Set_, other_.m_NFCSKeyAuth_Set_);
        swap(m_NFCKeyBind_Set_, other_.m_NFCKeyBind_Set_);
        swap(m_NFCKeyDel_Set_, other_.m_NFCKeyDel_Set_);
        swap(m_NFCKeyFrz_Set_, other_.m_NFCKeyFrz_Set_);
        swap(m_NFCKeyUnfrzAuth_Set_, other_.m_NFCKeyUnfrzAuth_Set_);
        swap(m_NFCCardID_, other_.m_NFCCardID_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool NFCKeyMag_Crtl_struct::operator == (const NFCKeyMag_Crtl_struct& other_) const {
        if (m_NFCSKeyAuth_Set_ != other_.m_NFCSKeyAuth_Set_) {
            return false;
        }
        if (m_NFCKeyBind_Set_ != other_.m_NFCKeyBind_Set_) {
            return false;
        }
        if (m_NFCKeyDel_Set_ != other_.m_NFCKeyDel_Set_) {
            return false;
        }
        if (m_NFCKeyFrz_Set_ != other_.m_NFCKeyFrz_Set_) {
            return false;
        }
        if (m_NFCKeyUnfrzAuth_Set_ != other_.m_NFCKeyUnfrzAuth_Set_) {
            return false;
        }
        if (m_NFCCardID_ != other_.m_NFCCardID_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool NFCKeyMag_Crtl_struct::operator != (const NFCKeyMag_Crtl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyMag_Crtl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCSKeyAuth_Set: " << (int)sample.NFCSKeyAuth_Set() <<", ";
        o << "NFCKeyBind_Set: " << (int)sample.NFCKeyBind_Set() <<", ";
        o << "NFCKeyDel_Set: " << (int)sample.NFCKeyDel_Set() <<", ";
        o << "NFCKeyFrz_Set: " << (int)sample.NFCKeyFrz_Set() <<", ";
        o << "NFCKeyUnfrzAuth_Set: " << (int)sample.NFCKeyUnfrzAuth_Set() <<", ";
        o << "NFCCardID: " << sample.NFCCardID()<<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyMag_Crtl_SOA_struct: 

    NFCKeyMag_Crtl_SOA_struct::NFCKeyMag_Crtl_SOA_struct() :
        m_NFCKeyMag_Crtl_SOA_u8_ (0)  {
    }   

    NFCKeyMag_Crtl_SOA_struct::NFCKeyMag_Crtl_SOA_struct (
        uint8_t NFCKeyMag_Crtl_SOA_u8)
        :
            m_NFCKeyMag_Crtl_SOA_u8_( NFCKeyMag_Crtl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyMag_Crtl_SOA_struct::NFCKeyMag_Crtl_SOA_struct(NFCKeyMag_Crtl_SOA_struct&& other_) OMG_NOEXCEPT  :m_NFCKeyMag_Crtl_SOA_u8_ (std::move(other_.m_NFCKeyMag_Crtl_SOA_u8_))
    {
    } 

    NFCKeyMag_Crtl_SOA_struct& NFCKeyMag_Crtl_SOA_struct::operator=(NFCKeyMag_Crtl_SOA_struct&&  other_) OMG_NOEXCEPT {
        NFCKeyMag_Crtl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyMag_Crtl_SOA_struct::swap(NFCKeyMag_Crtl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCKeyMag_Crtl_SOA_u8_, other_.m_NFCKeyMag_Crtl_SOA_u8_);
    }  

    bool NFCKeyMag_Crtl_SOA_struct::operator == (const NFCKeyMag_Crtl_SOA_struct& other_) const {
        if (m_NFCKeyMag_Crtl_SOA_u8_ != other_.m_NFCKeyMag_Crtl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool NFCKeyMag_Crtl_SOA_struct::operator != (const NFCKeyMag_Crtl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyMag_Crtl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCKeyMag_Crtl_SOA_u8: " << (int)sample.NFCKeyMag_Crtl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- NFCKeyMag_St_struct: 

    NFCKeyMag_St_struct::NFCKeyMag_St_struct() :
        m_NFCKeyBindRslt_St_ (0) ,
        m_NFCKeyBindFailRsn_St_ (0) ,
        m_NFCKeyDelRslt_St_ (0) ,
        m_NFCKeyDelFailRsn_St_ (0) ,
        m_NFCKeyFrzRslt_St_ (0) ,
        m_NFCKeyFrzFailRsn_St_ (0) ,
        m_NFCKeyUnfrzAuthRslt_St_ (0) ,
        m_NFCKeyUnfrzAuthFailRsn_St_ (0) ,
        m_NFCKeyUnfrzRslt_St_ (0) ,
        m_NFCKeyUnfrzFailRsn_St_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    NFCKeyMag_St_struct::NFCKeyMag_St_struct (
        uint8_t NFCKeyBindRslt_St,
        uint8_t NFCKeyBindFailRsn_St,
        uint8_t NFCKeyDelRslt_St,
        uint8_t NFCKeyDelFailRsn_St,
        uint8_t NFCKeyFrzRslt_St,
        uint8_t NFCKeyFrzFailRsn_St,
        uint8_t NFCKeyUnfrzAuthRslt_St,
        uint8_t NFCKeyUnfrzAuthFailRsn_St,
        uint8_t NFCKeyUnfrzRslt_St,
        uint8_t NFCKeyUnfrzFailRsn_St,
        const std::string& CtrlSource)
        :
            m_NFCKeyBindRslt_St_( NFCKeyBindRslt_St ),
            m_NFCKeyBindFailRsn_St_( NFCKeyBindFailRsn_St ),
            m_NFCKeyDelRslt_St_( NFCKeyDelRslt_St ),
            m_NFCKeyDelFailRsn_St_( NFCKeyDelFailRsn_St ),
            m_NFCKeyFrzRslt_St_( NFCKeyFrzRslt_St ),
            m_NFCKeyFrzFailRsn_St_( NFCKeyFrzFailRsn_St ),
            m_NFCKeyUnfrzAuthRslt_St_( NFCKeyUnfrzAuthRslt_St ),
            m_NFCKeyUnfrzAuthFailRsn_St_( NFCKeyUnfrzAuthFailRsn_St ),
            m_NFCKeyUnfrzRslt_St_( NFCKeyUnfrzRslt_St ),
            m_NFCKeyUnfrzFailRsn_St_( NFCKeyUnfrzFailRsn_St ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NFCKeyMag_St_struct::NFCKeyMag_St_struct(NFCKeyMag_St_struct&& other_) OMG_NOEXCEPT  :m_NFCKeyBindRslt_St_ (std::move(other_.m_NFCKeyBindRslt_St_))
    ,
    m_NFCKeyBindFailRsn_St_ (std::move(other_.m_NFCKeyBindFailRsn_St_))
    ,
    m_NFCKeyDelRslt_St_ (std::move(other_.m_NFCKeyDelRslt_St_))
    ,
    m_NFCKeyDelFailRsn_St_ (std::move(other_.m_NFCKeyDelFailRsn_St_))
    ,
    m_NFCKeyFrzRslt_St_ (std::move(other_.m_NFCKeyFrzRslt_St_))
    ,
    m_NFCKeyFrzFailRsn_St_ (std::move(other_.m_NFCKeyFrzFailRsn_St_))
    ,
    m_NFCKeyUnfrzAuthRslt_St_ (std::move(other_.m_NFCKeyUnfrzAuthRslt_St_))
    ,
    m_NFCKeyUnfrzAuthFailRsn_St_ (std::move(other_.m_NFCKeyUnfrzAuthFailRsn_St_))
    ,
    m_NFCKeyUnfrzRslt_St_ (std::move(other_.m_NFCKeyUnfrzRslt_St_))
    ,
    m_NFCKeyUnfrzFailRsn_St_ (std::move(other_.m_NFCKeyUnfrzFailRsn_St_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    NFCKeyMag_St_struct& NFCKeyMag_St_struct::operator=(NFCKeyMag_St_struct&&  other_) OMG_NOEXCEPT {
        NFCKeyMag_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NFCKeyMag_St_struct::swap(NFCKeyMag_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCKeyBindRslt_St_, other_.m_NFCKeyBindRslt_St_);
        swap(m_NFCKeyBindFailRsn_St_, other_.m_NFCKeyBindFailRsn_St_);
        swap(m_NFCKeyDelRslt_St_, other_.m_NFCKeyDelRslt_St_);
        swap(m_NFCKeyDelFailRsn_St_, other_.m_NFCKeyDelFailRsn_St_);
        swap(m_NFCKeyFrzRslt_St_, other_.m_NFCKeyFrzRslt_St_);
        swap(m_NFCKeyFrzFailRsn_St_, other_.m_NFCKeyFrzFailRsn_St_);
        swap(m_NFCKeyUnfrzAuthRslt_St_, other_.m_NFCKeyUnfrzAuthRslt_St_);
        swap(m_NFCKeyUnfrzAuthFailRsn_St_, other_.m_NFCKeyUnfrzAuthFailRsn_St_);
        swap(m_NFCKeyUnfrzRslt_St_, other_.m_NFCKeyUnfrzRslt_St_);
        swap(m_NFCKeyUnfrzFailRsn_St_, other_.m_NFCKeyUnfrzFailRsn_St_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool NFCKeyMag_St_struct::operator == (const NFCKeyMag_St_struct& other_) const {
        if (m_NFCKeyBindRslt_St_ != other_.m_NFCKeyBindRslt_St_) {
            return false;
        }
        if (m_NFCKeyBindFailRsn_St_ != other_.m_NFCKeyBindFailRsn_St_) {
            return false;
        }
        if (m_NFCKeyDelRslt_St_ != other_.m_NFCKeyDelRslt_St_) {
            return false;
        }
        if (m_NFCKeyDelFailRsn_St_ != other_.m_NFCKeyDelFailRsn_St_) {
            return false;
        }
        if (m_NFCKeyFrzRslt_St_ != other_.m_NFCKeyFrzRslt_St_) {
            return false;
        }
        if (m_NFCKeyFrzFailRsn_St_ != other_.m_NFCKeyFrzFailRsn_St_) {
            return false;
        }
        if (m_NFCKeyUnfrzAuthRslt_St_ != other_.m_NFCKeyUnfrzAuthRslt_St_) {
            return false;
        }
        if (m_NFCKeyUnfrzAuthFailRsn_St_ != other_.m_NFCKeyUnfrzAuthFailRsn_St_) {
            return false;
        }
        if (m_NFCKeyUnfrzRslt_St_ != other_.m_NFCKeyUnfrzRslt_St_) {
            return false;
        }
        if (m_NFCKeyUnfrzFailRsn_St_ != other_.m_NFCKeyUnfrzFailRsn_St_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool NFCKeyMag_St_struct::operator != (const NFCKeyMag_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NFCKeyMag_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCKeyBindRslt_St: " << (int)sample.NFCKeyBindRslt_St() <<", ";
        o << "NFCKeyBindFailRsn_St: " << (int)sample.NFCKeyBindFailRsn_St() <<", ";
        o << "NFCKeyDelRslt_St: " << (int)sample.NFCKeyDelRslt_St() <<", ";
        o << "NFCKeyDelFailRsn_St: " << (int)sample.NFCKeyDelFailRsn_St() <<", ";
        o << "NFCKeyFrzRslt_St: " << (int)sample.NFCKeyFrzRslt_St() <<", ";
        o << "NFCKeyFrzFailRsn_St: " << (int)sample.NFCKeyFrzFailRsn_St() <<", ";
        o << "NFCKeyUnfrzAuthRslt_St: " << (int)sample.NFCKeyUnfrzAuthRslt_St() <<", ";
        o << "NFCKeyUnfrzAuthFailRsn_St: " << (int)sample.NFCKeyUnfrzAuthFailRsn_St() <<", ";
        o << "NFCKeyUnfrzRslt_St: " << (int)sample.NFCKeyUnfrzRslt_St() <<", ";
        o << "NFCKeyUnfrzFailRsn_St: " << (int)sample.NFCKeyUnfrzFailRsn_St() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- TargetPointStruct_Array: 

    TargetPointStruct_Array::TargetPointStruct_Array()  {
    }   

    TargetPointStruct_Array::TargetPointStruct_Array (
        const ::rti::core::bounded_sequence< BodyDomain::TargetPointSubstruct, 252L >& TargetPoint)
        :
            m_TargetPoint_( TargetPoint ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    TargetPointStruct_Array::TargetPointStruct_Array(TargetPointStruct_Array&& other_) OMG_NOEXCEPT  :m_TargetPoint_ (std::move(other_.m_TargetPoint_))
    {
    } 

    TargetPointStruct_Array& TargetPointStruct_Array::operator=(TargetPointStruct_Array&&  other_) OMG_NOEXCEPT {
        TargetPointStruct_Array tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void TargetPointStruct_Array::swap(TargetPointStruct_Array& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_TargetPoint_, other_.m_TargetPoint_);
    }  

    bool TargetPointStruct_Array::operator == (const TargetPointStruct_Array& other_) const {
        if (m_TargetPoint_ != other_.m_TargetPoint_) {
            return false;
        }
        return true;
    }
    bool TargetPointStruct_Array::operator != (const TargetPointStruct_Array& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const TargetPointStruct_Array& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "TargetPoint: " << sample.TargetPoint() ;
        o <<"]";
        return o;
    }

    // ---- Key_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Key_Srv_Req_Union::Key_Srv_Req_Union(Key_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                DKLst_Get( std::move(other_.DKLst_Get()));
            } break;
            case 1:
            {  
                NFCKeyLst_Get( std::move(other_.NFCKeyLst_Get()));
            } break;
            case 2:
            {  
                NFCKeyRename_Set( std::move(other_.NFCKeyRename_Set()));
            } break;
            case 3:
            {  
                PhysicalKeyLst_Get( std::move(other_.PhysicalKeyLst_Get()));
            } break;
            case 4:
            {  
                NFCKeyMag_Crtl( std::move(other_.NFCKeyMag_Crtl()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    Key_Srv_Req_Union& Key_Srv_Req_Union::operator=(Key_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        Key_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    Key_Srv_Req_Union::Union_::Union_()  {
    }

    Key_Srv_Req_Union::Union_::Union_(
        const BodyDomain::DKLst_Get_struct& DKLst_Get,
        const BodyDomain::NFCKeyLst_Get_struct& NFCKeyLst_Get,
        const BodyDomain::NFCKeyRename_Set_struct& NFCKeyRename_Set,
        const BodyDomain::PhysicalKeyLst_Get_struct& PhysicalKeyLst_Get,
        const BodyDomain::NFCKeyMag_Crtl_struct& NFCKeyMag_Crtl)
        :
            m_DKLst_Get_( DKLst_Get ),
            m_NFCKeyLst_Get_( NFCKeyLst_Get ),
            m_NFCKeyRename_Set_( NFCKeyRename_Set ),
            m_PhysicalKeyLst_Get_( PhysicalKeyLst_Get ),
            m_NFCKeyMag_Crtl_( NFCKeyMag_Crtl ) {
    }

    Key_Srv_Req_Union::Key_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void Key_Srv_Req_Union::swap(Key_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_DKLst_Get_, other_.m_u_.m_DKLst_Get_);
            } break;
            case 1:
            {  
                swap(m_u_.m_NFCKeyLst_Get_, other_.m_u_.m_NFCKeyLst_Get_);
            } break;
            case 2:
            {  
                swap(m_u_.m_NFCKeyRename_Set_, other_.m_u_.m_NFCKeyRename_Set_);
            } break;
            case 3:
            {  
                swap(m_u_.m_PhysicalKeyLst_Get_, other_.m_u_.m_PhysicalKeyLst_Get_);
            } break;
            case 4:
            {  
                swap(m_u_.m_NFCKeyMag_Crtl_, other_.m_u_.m_NFCKeyMag_Crtl_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_DKLst_Get_, other_.m_u_.m_DKLst_Get_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_NFCKeyLst_Get_, other_.m_u_.m_NFCKeyLst_Get_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_NFCKeyRename_Set_, other_.m_u_.m_NFCKeyRename_Set_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_PhysicalKeyLst_Get_, other_.m_u_.m_PhysicalKeyLst_Get_);
                } break;
                case 4:
                {  
                    swap(m_u_.m_NFCKeyMag_Crtl_, other_.m_u_.m_NFCKeyMag_Crtl_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool Key_Srv_Req_Union::operator == (const Key_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_DKLst_Get_ != other_.m_u_.m_DKLst_Get_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_NFCKeyLst_Get_ != other_.m_u_.m_NFCKeyLst_Get_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_NFCKeyRename_Set_ != other_.m_u_.m_NFCKeyRename_Set_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_PhysicalKeyLst_Get_ != other_.m_u_.m_PhysicalKeyLst_Get_) {
                    return false;
                }
            } break ;
            case 4:
            {  
                if ( m_u_.m_NFCKeyMag_Crtl_ != other_.m_u_.m_NFCKeyMag_Crtl_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool Key_Srv_Req_Union::operator != (const Key_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Key_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "DKLst_Get: " << sample.DKLst_Get()<<", ";
            } break ;
            case 1:
            {  
                o << "NFCKeyLst_Get: " << sample.NFCKeyLst_Get()<<", ";
            } break ;
            case 2:
            {  
                o << "NFCKeyRename_Set: " << sample.NFCKeyRename_Set()<<", ";
            } break ;
            case 3:
            {  
                o << "PhysicalKeyLst_Get: " << sample.PhysicalKeyLst_Get()<<", ";
            } break ;
            case 4:
            {  
                o << "NFCKeyMag_Crtl: " << sample.NFCKeyMag_Crtl() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t Key_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- Key_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Key_Srv_Resp_Union::Key_Srv_Resp_Union(Key_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                DKLst_Get_SOA( std::move(other_.DKLst_Get_SOA()));
            } break;
            case 1:
            {  
                NFCKeyLst_Get_SOA( std::move(other_.NFCKeyLst_Get_SOA()));
            } break;
            case 2:
            {  
                NFCKeyRename_Set_SOA( std::move(other_.NFCKeyRename_Set_SOA()));
            } break;
            case 3:
            {  
                PhysicalKeyLst_Get_SOA( std::move(other_.PhysicalKeyLst_Get_SOA()));
            } break;
            case 4:
            {  
                NFCKeyMag_Crtl_SOA( std::move(other_.NFCKeyMag_Crtl_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    Key_Srv_Resp_Union& Key_Srv_Resp_Union::operator=(Key_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        Key_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    Key_Srv_Resp_Union::Union_::Union_()  {
    }

    Key_Srv_Resp_Union::Union_::Union_(
        const BodyDomain::DKLst_Rsp_array& DKLst_Get_SOA,
        const BodyDomain::NFCKeyLst_Rsp_array& NFCKeyLst_Get_SOA,
        const BodyDomain::NFCKeyRename_Rsp_struct& NFCKeyRename_Set_SOA,
        const BodyDomain::PhysicalKeyLst_Rsp_array& PhysicalKeyLst_Get_SOA,
        const BodyDomain::NFCKeyMag_Crtl_SOA_struct& NFCKeyMag_Crtl_SOA)
        :
            m_DKLst_Get_SOA_( DKLst_Get_SOA ),
            m_NFCKeyLst_Get_SOA_( NFCKeyLst_Get_SOA ),
            m_NFCKeyRename_Set_SOA_( NFCKeyRename_Set_SOA ),
            m_PhysicalKeyLst_Get_SOA_( PhysicalKeyLst_Get_SOA ),
            m_NFCKeyMag_Crtl_SOA_( NFCKeyMag_Crtl_SOA ) {
    }

    Key_Srv_Resp_Union::Key_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void Key_Srv_Resp_Union::swap(Key_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_DKLst_Get_SOA_, other_.m_u_.m_DKLst_Get_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_NFCKeyLst_Get_SOA_, other_.m_u_.m_NFCKeyLst_Get_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_NFCKeyRename_Set_SOA_, other_.m_u_.m_NFCKeyRename_Set_SOA_);
            } break;
            case 3:
            {  
                swap(m_u_.m_PhysicalKeyLst_Get_SOA_, other_.m_u_.m_PhysicalKeyLst_Get_SOA_);
            } break;
            case 4:
            {  
                swap(m_u_.m_NFCKeyMag_Crtl_SOA_, other_.m_u_.m_NFCKeyMag_Crtl_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_DKLst_Get_SOA_, other_.m_u_.m_DKLst_Get_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_NFCKeyLst_Get_SOA_, other_.m_u_.m_NFCKeyLst_Get_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_NFCKeyRename_Set_SOA_, other_.m_u_.m_NFCKeyRename_Set_SOA_);
                } break;
                case 3:
                {  
                    swap(m_u_.m_PhysicalKeyLst_Get_SOA_, other_.m_u_.m_PhysicalKeyLst_Get_SOA_);
                } break;
                case 4:
                {  
                    swap(m_u_.m_NFCKeyMag_Crtl_SOA_, other_.m_u_.m_NFCKeyMag_Crtl_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool Key_Srv_Resp_Union::operator == (const Key_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_DKLst_Get_SOA_ != other_.m_u_.m_DKLst_Get_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_NFCKeyLst_Get_SOA_ != other_.m_u_.m_NFCKeyLst_Get_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_NFCKeyRename_Set_SOA_ != other_.m_u_.m_NFCKeyRename_Set_SOA_) {
                    return false;
                }
            } break ;
            case 3:
            {  
                if ( m_u_.m_PhysicalKeyLst_Get_SOA_ != other_.m_u_.m_PhysicalKeyLst_Get_SOA_) {
                    return false;
                }
            } break ;
            case 4:
            {  
                if ( m_u_.m_NFCKeyMag_Crtl_SOA_ != other_.m_u_.m_NFCKeyMag_Crtl_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool Key_Srv_Resp_Union::operator != (const Key_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Key_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "DKLst_Get_SOA: " << sample.DKLst_Get_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "NFCKeyLst_Get_SOA: " << sample.NFCKeyLst_Get_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "NFCKeyRename_Set_SOA: " << sample.NFCKeyRename_Set_SOA()<<", ";
            } break ;
            case 3:
            {  
                o << "PhysicalKeyLst_Get_SOA: " << sample.PhysicalKeyLst_Get_SOA()<<", ";
            } break ;
            case 4:
            {  
                o << "NFCKeyMag_Crtl_SOA: " << sample.NFCKeyMag_Crtl_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t Key_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- KeyInfo_Notify_struct: 

    KeyInfo_Notify_struct::KeyInfo_Notify_struct() :
        m_NFCDetRmdrSet_Req_ (0) ,
        m_BleKeyDiscnctRmdr_Req_ (0) ,
        m_OwnerKey_St_ (0)  {
    }   

    KeyInfo_Notify_struct::KeyInfo_Notify_struct (
        uint8_t NFCDetRmdrSet_Req,
        uint8_t BleKeyDiscnctRmdr_Req,
        uint8_t OwnerKey_St)
        :
            m_NFCDetRmdrSet_Req_( NFCDetRmdrSet_Req ),
            m_BleKeyDiscnctRmdr_Req_( BleKeyDiscnctRmdr_Req ),
            m_OwnerKey_St_( OwnerKey_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    KeyInfo_Notify_struct::KeyInfo_Notify_struct(KeyInfo_Notify_struct&& other_) OMG_NOEXCEPT  :m_NFCDetRmdrSet_Req_ (std::move(other_.m_NFCDetRmdrSet_Req_))
    ,
    m_BleKeyDiscnctRmdr_Req_ (std::move(other_.m_BleKeyDiscnctRmdr_Req_))
    ,
    m_OwnerKey_St_ (std::move(other_.m_OwnerKey_St_))
    {
    } 

    KeyInfo_Notify_struct& KeyInfo_Notify_struct::operator=(KeyInfo_Notify_struct&&  other_) OMG_NOEXCEPT {
        KeyInfo_Notify_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void KeyInfo_Notify_struct::swap(KeyInfo_Notify_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NFCDetRmdrSet_Req_, other_.m_NFCDetRmdrSet_Req_);
        swap(m_BleKeyDiscnctRmdr_Req_, other_.m_BleKeyDiscnctRmdr_Req_);
        swap(m_OwnerKey_St_, other_.m_OwnerKey_St_);
    }  

    bool KeyInfo_Notify_struct::operator == (const KeyInfo_Notify_struct& other_) const {
        if (m_NFCDetRmdrSet_Req_ != other_.m_NFCDetRmdrSet_Req_) {
            return false;
        }
        if (m_BleKeyDiscnctRmdr_Req_ != other_.m_BleKeyDiscnctRmdr_Req_) {
            return false;
        }
        if (m_OwnerKey_St_ != other_.m_OwnerKey_St_) {
            return false;
        }
        return true;
    }
    bool KeyInfo_Notify_struct::operator != (const KeyInfo_Notify_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const KeyInfo_Notify_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NFCDetRmdrSet_Req: " << (int)sample.NFCDetRmdrSet_Req() <<", ";
        o << "BleKeyDiscnctRmdr_Req: " << (int)sample.BleKeyDiscnctRmdr_Req() <<", ";
        o << "OwnerKey_St: " << (int)sample.OwnerKey_St()  ;
        o <<"]";
        return o;
    }

} // namespace BodyDomain  

namespace PTDomain {

    // ---- PowerMode_Ctrl_struct: 

    PowerMode_Ctrl_struct::PowerMode_Ctrl_struct() :
        m_PowerMode_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    PowerMode_Ctrl_struct::PowerMode_Ctrl_struct (
        uint8_t PowerMode_Req,
        const std::string& CtrlSource)
        :
            m_PowerMode_Req_( PowerMode_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PowerMode_Ctrl_struct::PowerMode_Ctrl_struct(PowerMode_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_PowerMode_Req_ (std::move(other_.m_PowerMode_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    PowerMode_Ctrl_struct& PowerMode_Ctrl_struct::operator=(PowerMode_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        PowerMode_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PowerMode_Ctrl_struct::swap(PowerMode_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_PowerMode_Req_, other_.m_PowerMode_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool PowerMode_Ctrl_struct::operator == (const PowerMode_Ctrl_struct& other_) const {
        if (m_PowerMode_Req_ != other_.m_PowerMode_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool PowerMode_Ctrl_struct::operator != (const PowerMode_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PowerMode_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "PowerMode_Req: " << (int)sample.PowerMode_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- PowerMode_Ctrl_SOA_struct: 

    PowerMode_Ctrl_SOA_struct::PowerMode_Ctrl_SOA_struct() :
        m_PowerOn_Rsp_ (0) ,
        m_PowerOff_Rsp_ (0)  {
    }   

    PowerMode_Ctrl_SOA_struct::PowerMode_Ctrl_SOA_struct (
        uint8_t PowerOn_Rsp,
        uint8_t PowerOff_Rsp)
        :
            m_PowerOn_Rsp_( PowerOn_Rsp ),
            m_PowerOff_Rsp_( PowerOff_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PowerMode_Ctrl_SOA_struct::PowerMode_Ctrl_SOA_struct(PowerMode_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_PowerOn_Rsp_ (std::move(other_.m_PowerOn_Rsp_))
    ,
    m_PowerOff_Rsp_ (std::move(other_.m_PowerOff_Rsp_))
    {
    } 

    PowerMode_Ctrl_SOA_struct& PowerMode_Ctrl_SOA_struct::operator=(PowerMode_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        PowerMode_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PowerMode_Ctrl_SOA_struct::swap(PowerMode_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_PowerOn_Rsp_, other_.m_PowerOn_Rsp_);
        swap(m_PowerOff_Rsp_, other_.m_PowerOff_Rsp_);
    }  

    bool PowerMode_Ctrl_SOA_struct::operator == (const PowerMode_Ctrl_SOA_struct& other_) const {
        if (m_PowerOn_Rsp_ != other_.m_PowerOn_Rsp_) {
            return false;
        }
        if (m_PowerOff_Rsp_ != other_.m_PowerOff_Rsp_) {
            return false;
        }
        return true;
    }
    bool PowerMode_Ctrl_SOA_struct::operator != (const PowerMode_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PowerMode_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "PowerOn_Rsp: " << (int)sample.PowerOn_Rsp() <<", ";
        o << "PowerOff_Rsp: " << (int)sample.PowerOff_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- PowerMode_St_struct: 

    PowerMode_St_struct::PowerMode_St_struct() :
        m_PowerMode_St_ (0) ,
        m_PowerGoOff_St_ (0) ,
        m_PowerOffAvl_St_ (0)  {
    }   

    PowerMode_St_struct::PowerMode_St_struct (
        uint8_t PowerMode_St,
        uint8_t PowerGoOff_St,
        uint8_t PowerOffAvl_St)
        :
            m_PowerMode_St_( PowerMode_St ),
            m_PowerGoOff_St_( PowerGoOff_St ),
            m_PowerOffAvl_St_( PowerOffAvl_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PowerMode_St_struct::PowerMode_St_struct(PowerMode_St_struct&& other_) OMG_NOEXCEPT  :m_PowerMode_St_ (std::move(other_.m_PowerMode_St_))
    ,
    m_PowerGoOff_St_ (std::move(other_.m_PowerGoOff_St_))
    ,
    m_PowerOffAvl_St_ (std::move(other_.m_PowerOffAvl_St_))
    {
    } 

    PowerMode_St_struct& PowerMode_St_struct::operator=(PowerMode_St_struct&&  other_) OMG_NOEXCEPT {
        PowerMode_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PowerMode_St_struct::swap(PowerMode_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_PowerMode_St_, other_.m_PowerMode_St_);
        swap(m_PowerGoOff_St_, other_.m_PowerGoOff_St_);
        swap(m_PowerOffAvl_St_, other_.m_PowerOffAvl_St_);
    }  

    bool PowerMode_St_struct::operator == (const PowerMode_St_struct& other_) const {
        if (m_PowerMode_St_ != other_.m_PowerMode_St_) {
            return false;
        }
        if (m_PowerGoOff_St_ != other_.m_PowerGoOff_St_) {
            return false;
        }
        if (m_PowerOffAvl_St_ != other_.m_PowerOffAvl_St_) {
            return false;
        }
        return true;
    }
    bool PowerMode_St_struct::operator != (const PowerMode_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PowerMode_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "PowerMode_St: " << (int)sample.PowerMode_St() <<", ";
        o << "PowerGoOff_St: " << (int)sample.PowerGoOff_St() <<", ";
        o << "PowerOffAvl_St: " << (int)sample.PowerOffAvl_St()  ;
        o <<"]";
        return o;
    }

    // ---- CarMode_Ctrl_struct: 

    CarMode_Ctrl_struct::CarMode_Ctrl_struct() :
        m_CarMode_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    CarMode_Ctrl_struct::CarMode_Ctrl_struct (
        uint8_t CarMode_Req,
        const std::string& CtrlSource)
        :
            m_CarMode_Req_( CarMode_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CarMode_Ctrl_struct::CarMode_Ctrl_struct(CarMode_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_CarMode_Req_ (std::move(other_.m_CarMode_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    CarMode_Ctrl_struct& CarMode_Ctrl_struct::operator=(CarMode_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        CarMode_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CarMode_Ctrl_struct::swap(CarMode_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_CarMode_Req_, other_.m_CarMode_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool CarMode_Ctrl_struct::operator == (const CarMode_Ctrl_struct& other_) const {
        if (m_CarMode_Req_ != other_.m_CarMode_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool CarMode_Ctrl_struct::operator != (const CarMode_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CarMode_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "CarMode_Req: " << (int)sample.CarMode_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- CarMode_Ctrl_SOA_struct: 

    CarMode_Ctrl_SOA_struct::CarMode_Ctrl_SOA_struct() :
        m_CarMode_Ctrl_SOA_u8_ (0)  {
    }   

    CarMode_Ctrl_SOA_struct::CarMode_Ctrl_SOA_struct (
        uint8_t CarMode_Ctrl_SOA_u8)
        :
            m_CarMode_Ctrl_SOA_u8_( CarMode_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CarMode_Ctrl_SOA_struct::CarMode_Ctrl_SOA_struct(CarMode_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_CarMode_Ctrl_SOA_u8_ (std::move(other_.m_CarMode_Ctrl_SOA_u8_))
    {
    } 

    CarMode_Ctrl_SOA_struct& CarMode_Ctrl_SOA_struct::operator=(CarMode_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        CarMode_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CarMode_Ctrl_SOA_struct::swap(CarMode_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_CarMode_Ctrl_SOA_u8_, other_.m_CarMode_Ctrl_SOA_u8_);
    }  

    bool CarMode_Ctrl_SOA_struct::operator == (const CarMode_Ctrl_SOA_struct& other_) const {
        if (m_CarMode_Ctrl_SOA_u8_ != other_.m_CarMode_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool CarMode_Ctrl_SOA_struct::operator != (const CarMode_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CarMode_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "CarMode_Ctrl_SOA_u8: " << (int)sample.CarMode_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- CarMode_St_struct: 

    CarMode_St_struct::CarMode_St_struct() :
        m_CarMode_St_ (0)  {
    }   

    CarMode_St_struct::CarMode_St_struct (
        uint8_t CarMode_St)
        :
            m_CarMode_St_( CarMode_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CarMode_St_struct::CarMode_St_struct(CarMode_St_struct&& other_) OMG_NOEXCEPT  :m_CarMode_St_ (std::move(other_.m_CarMode_St_))
    {
    } 

    CarMode_St_struct& CarMode_St_struct::operator=(CarMode_St_struct&&  other_) OMG_NOEXCEPT {
        CarMode_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CarMode_St_struct::swap(CarMode_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_CarMode_St_, other_.m_CarMode_St_);
    }  

    bool CarMode_St_struct::operator == (const CarMode_St_struct& other_) const {
        if (m_CarMode_St_ != other_.m_CarMode_St_) {
            return false;
        }
        return true;
    }
    bool CarMode_St_struct::operator != (const CarMode_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CarMode_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "CarMode_St: " << (int)sample.CarMode_St()  ;
        o <<"]";
        return o;
    }

    // ---- DrivingMode_Ctrl_struct: 

    DrivingMode_Ctrl_struct::DrivingMode_Ctrl_struct() :
        m_EPSModeChange_Req_ (0) ,
        m_TargVehicleMode_Req_ (0) ,
        m_PTModeChange_Req_ (0) ,
        m_LowConsumMode_Req_ (0) ,
        m_ValetMode_Req_ (0) ,
        m_OnePedalMode_Req_ (0) ,
        m_CoastRegenStrg_Req_ (0) ,
        m_SpdLimit_Req_ (0) ,
        m_TrailMode_Req_ (0) ,
        m_Salemode_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    DrivingMode_Ctrl_struct::DrivingMode_Ctrl_struct (
        uint8_t EPSModeChange_Req,
        uint8_t TargVehicleMode_Req,
        uint8_t PTModeChange_Req,
        uint8_t LowConsumMode_Req,
        uint8_t ValetMode_Req,
        uint8_t OnePedalMode_Req,
        uint8_t CoastRegenStrg_Req,
        uint8_t SpdLimit_Req,
        uint8_t TrailMode_Req,
        uint8_t Salemode_Req,
        const std::string& CtrlSource)
        :
            m_EPSModeChange_Req_( EPSModeChange_Req ),
            m_TargVehicleMode_Req_( TargVehicleMode_Req ),
            m_PTModeChange_Req_( PTModeChange_Req ),
            m_LowConsumMode_Req_( LowConsumMode_Req ),
            m_ValetMode_Req_( ValetMode_Req ),
            m_OnePedalMode_Req_( OnePedalMode_Req ),
            m_CoastRegenStrg_Req_( CoastRegenStrg_Req ),
            m_SpdLimit_Req_( SpdLimit_Req ),
            m_TrailMode_Req_( TrailMode_Req ),
            m_Salemode_Req_( Salemode_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrivingMode_Ctrl_struct::DrivingMode_Ctrl_struct(DrivingMode_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_EPSModeChange_Req_ (std::move(other_.m_EPSModeChange_Req_))
    ,
    m_TargVehicleMode_Req_ (std::move(other_.m_TargVehicleMode_Req_))
    ,
    m_PTModeChange_Req_ (std::move(other_.m_PTModeChange_Req_))
    ,
    m_LowConsumMode_Req_ (std::move(other_.m_LowConsumMode_Req_))
    ,
    m_ValetMode_Req_ (std::move(other_.m_ValetMode_Req_))
    ,
    m_OnePedalMode_Req_ (std::move(other_.m_OnePedalMode_Req_))
    ,
    m_CoastRegenStrg_Req_ (std::move(other_.m_CoastRegenStrg_Req_))
    ,
    m_SpdLimit_Req_ (std::move(other_.m_SpdLimit_Req_))
    ,
    m_TrailMode_Req_ (std::move(other_.m_TrailMode_Req_))
    ,
    m_Salemode_Req_ (std::move(other_.m_Salemode_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    DrivingMode_Ctrl_struct& DrivingMode_Ctrl_struct::operator=(DrivingMode_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        DrivingMode_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrivingMode_Ctrl_struct::swap(DrivingMode_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_EPSModeChange_Req_, other_.m_EPSModeChange_Req_);
        swap(m_TargVehicleMode_Req_, other_.m_TargVehicleMode_Req_);
        swap(m_PTModeChange_Req_, other_.m_PTModeChange_Req_);
        swap(m_LowConsumMode_Req_, other_.m_LowConsumMode_Req_);
        swap(m_ValetMode_Req_, other_.m_ValetMode_Req_);
        swap(m_OnePedalMode_Req_, other_.m_OnePedalMode_Req_);
        swap(m_CoastRegenStrg_Req_, other_.m_CoastRegenStrg_Req_);
        swap(m_SpdLimit_Req_, other_.m_SpdLimit_Req_);
        swap(m_TrailMode_Req_, other_.m_TrailMode_Req_);
        swap(m_Salemode_Req_, other_.m_Salemode_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool DrivingMode_Ctrl_struct::operator == (const DrivingMode_Ctrl_struct& other_) const {
        if (m_EPSModeChange_Req_ != other_.m_EPSModeChange_Req_) {
            return false;
        }
        if (m_TargVehicleMode_Req_ != other_.m_TargVehicleMode_Req_) {
            return false;
        }
        if (m_PTModeChange_Req_ != other_.m_PTModeChange_Req_) {
            return false;
        }
        if (m_LowConsumMode_Req_ != other_.m_LowConsumMode_Req_) {
            return false;
        }
        if (m_ValetMode_Req_ != other_.m_ValetMode_Req_) {
            return false;
        }
        if (m_OnePedalMode_Req_ != other_.m_OnePedalMode_Req_) {
            return false;
        }
        if (m_CoastRegenStrg_Req_ != other_.m_CoastRegenStrg_Req_) {
            return false;
        }
        if (m_SpdLimit_Req_ != other_.m_SpdLimit_Req_) {
            return false;
        }
        if (m_TrailMode_Req_ != other_.m_TrailMode_Req_) {
            return false;
        }
        if (m_Salemode_Req_ != other_.m_Salemode_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool DrivingMode_Ctrl_struct::operator != (const DrivingMode_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrivingMode_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "EPSModeChange_Req: " << (int)sample.EPSModeChange_Req() <<", ";
        o << "TargVehicleMode_Req: " << (int)sample.TargVehicleMode_Req() <<", ";
        o << "PTModeChange_Req: " << (int)sample.PTModeChange_Req() <<", ";
        o << "LowConsumMode_Req: " << (int)sample.LowConsumMode_Req() <<", ";
        o << "ValetMode_Req: " << (int)sample.ValetMode_Req() <<", ";
        o << "OnePedalMode_Req: " << (int)sample.OnePedalMode_Req() <<", ";
        o << "CoastRegenStrg_Req: " << (int)sample.CoastRegenStrg_Req() <<", ";
        o << "SpdLimit_Req: " << (int)sample.SpdLimit_Req() <<", ";
        o << "TrailMode_Req: " << (int)sample.TrailMode_Req() <<", ";
        o << "Salemode_Req: " << (int)sample.Salemode_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- DrivingMode_Ctrl_SOA_struct: 

    DrivingMode_Ctrl_SOA_struct::DrivingMode_Ctrl_SOA_struct() :
        m_DrivingMode_Ctrl_SOA_u8_ (0)  {
    }   

    DrivingMode_Ctrl_SOA_struct::DrivingMode_Ctrl_SOA_struct (
        uint8_t DrivingMode_Ctrl_SOA_u8)
        :
            m_DrivingMode_Ctrl_SOA_u8_( DrivingMode_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DrivingMode_Ctrl_SOA_struct::DrivingMode_Ctrl_SOA_struct(DrivingMode_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_DrivingMode_Ctrl_SOA_u8_ (std::move(other_.m_DrivingMode_Ctrl_SOA_u8_))
    {
    } 

    DrivingMode_Ctrl_SOA_struct& DrivingMode_Ctrl_SOA_struct::operator=(DrivingMode_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        DrivingMode_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DrivingMode_Ctrl_SOA_struct::swap(DrivingMode_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_DrivingMode_Ctrl_SOA_u8_, other_.m_DrivingMode_Ctrl_SOA_u8_);
    }  

    bool DrivingMode_Ctrl_SOA_struct::operator == (const DrivingMode_Ctrl_SOA_struct& other_) const {
        if (m_DrivingMode_Ctrl_SOA_u8_ != other_.m_DrivingMode_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool DrivingMode_Ctrl_SOA_struct::operator != (const DrivingMode_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DrivingMode_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "DrivingMode_Ctrl_SOA_u8: " << (int)sample.DrivingMode_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- DringMode_St_Struct: 

    DringMode_St_Struct::DringMode_St_Struct() :
        m_DMSEPSModeInfo_St_ (0) ,
        m_DMSVehMode_St_ (0) ,
        m_DMSModeChgEn_St_ (0) ,
        m_DMSPTModeInfo_St_ (0) ,
        m_DMSValetMode_St_ (0) ,
        m_OnePedalMode_St_ (0) ,
        m_OPMAvaliability_St_ (0) ,
        m_RegenSetPct_Rsp_ (0) ,
        m_RegenAvail_St_ (0) ,
        m_RegenForDisp_UI_ (0) ,
        m_DrvVehModAvaliability_St_ (0) ,
        m_TrailMode_St_ (0) ,
        m_TrailAvaliability_St_ (0) ,
        m_TrailForDisp_UI_ (0) ,
        m_SaleMode_St_ (0)  {
    }   

    DringMode_St_Struct::DringMode_St_Struct (
        uint8_t DMSEPSModeInfo_St,
        uint8_t DMSVehMode_St,
        uint8_t DMSModeChgEn_St,
        uint8_t DMSPTModeInfo_St,
        uint8_t DMSValetMode_St,
        uint8_t OnePedalMode_St,
        uint8_t OPMAvaliability_St,
        uint8_t RegenSetPct_Rsp,
        uint8_t RegenAvail_St,
        uint8_t RegenForDisp_UI,
        uint8_t DrvVehModAvaliability_St,
        uint8_t TrailMode_St,
        uint8_t TrailAvaliability_St,
        uint8_t TrailForDisp_UI,
        uint8_t SaleMode_St)
        :
            m_DMSEPSModeInfo_St_( DMSEPSModeInfo_St ),
            m_DMSVehMode_St_( DMSVehMode_St ),
            m_DMSModeChgEn_St_( DMSModeChgEn_St ),
            m_DMSPTModeInfo_St_( DMSPTModeInfo_St ),
            m_DMSValetMode_St_( DMSValetMode_St ),
            m_OnePedalMode_St_( OnePedalMode_St ),
            m_OPMAvaliability_St_( OPMAvaliability_St ),
            m_RegenSetPct_Rsp_( RegenSetPct_Rsp ),
            m_RegenAvail_St_( RegenAvail_St ),
            m_RegenForDisp_UI_( RegenForDisp_UI ),
            m_DrvVehModAvaliability_St_( DrvVehModAvaliability_St ),
            m_TrailMode_St_( TrailMode_St ),
            m_TrailAvaliability_St_( TrailAvaliability_St ),
            m_TrailForDisp_UI_( TrailForDisp_UI ),
            m_SaleMode_St_( SaleMode_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    DringMode_St_Struct::DringMode_St_Struct(DringMode_St_Struct&& other_) OMG_NOEXCEPT  :m_DMSEPSModeInfo_St_ (std::move(other_.m_DMSEPSModeInfo_St_))
    ,
    m_DMSVehMode_St_ (std::move(other_.m_DMSVehMode_St_))
    ,
    m_DMSModeChgEn_St_ (std::move(other_.m_DMSModeChgEn_St_))
    ,
    m_DMSPTModeInfo_St_ (std::move(other_.m_DMSPTModeInfo_St_))
    ,
    m_DMSValetMode_St_ (std::move(other_.m_DMSValetMode_St_))
    ,
    m_OnePedalMode_St_ (std::move(other_.m_OnePedalMode_St_))
    ,
    m_OPMAvaliability_St_ (std::move(other_.m_OPMAvaliability_St_))
    ,
    m_RegenSetPct_Rsp_ (std::move(other_.m_RegenSetPct_Rsp_))
    ,
    m_RegenAvail_St_ (std::move(other_.m_RegenAvail_St_))
    ,
    m_RegenForDisp_UI_ (std::move(other_.m_RegenForDisp_UI_))
    ,
    m_DrvVehModAvaliability_St_ (std::move(other_.m_DrvVehModAvaliability_St_))
    ,
    m_TrailMode_St_ (std::move(other_.m_TrailMode_St_))
    ,
    m_TrailAvaliability_St_ (std::move(other_.m_TrailAvaliability_St_))
    ,
    m_TrailForDisp_UI_ (std::move(other_.m_TrailForDisp_UI_))
    ,
    m_SaleMode_St_ (std::move(other_.m_SaleMode_St_))
    {
    } 

    DringMode_St_Struct& DringMode_St_Struct::operator=(DringMode_St_Struct&&  other_) OMG_NOEXCEPT {
        DringMode_St_Struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void DringMode_St_Struct::swap(DringMode_St_Struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_DMSEPSModeInfo_St_, other_.m_DMSEPSModeInfo_St_);
        swap(m_DMSVehMode_St_, other_.m_DMSVehMode_St_);
        swap(m_DMSModeChgEn_St_, other_.m_DMSModeChgEn_St_);
        swap(m_DMSPTModeInfo_St_, other_.m_DMSPTModeInfo_St_);
        swap(m_DMSValetMode_St_, other_.m_DMSValetMode_St_);
        swap(m_OnePedalMode_St_, other_.m_OnePedalMode_St_);
        swap(m_OPMAvaliability_St_, other_.m_OPMAvaliability_St_);
        swap(m_RegenSetPct_Rsp_, other_.m_RegenSetPct_Rsp_);
        swap(m_RegenAvail_St_, other_.m_RegenAvail_St_);
        swap(m_RegenForDisp_UI_, other_.m_RegenForDisp_UI_);
        swap(m_DrvVehModAvaliability_St_, other_.m_DrvVehModAvaliability_St_);
        swap(m_TrailMode_St_, other_.m_TrailMode_St_);
        swap(m_TrailAvaliability_St_, other_.m_TrailAvaliability_St_);
        swap(m_TrailForDisp_UI_, other_.m_TrailForDisp_UI_);
        swap(m_SaleMode_St_, other_.m_SaleMode_St_);
    }  

    bool DringMode_St_Struct::operator == (const DringMode_St_Struct& other_) const {
        if (m_DMSEPSModeInfo_St_ != other_.m_DMSEPSModeInfo_St_) {
            return false;
        }
        if (m_DMSVehMode_St_ != other_.m_DMSVehMode_St_) {
            return false;
        }
        if (m_DMSModeChgEn_St_ != other_.m_DMSModeChgEn_St_) {
            return false;
        }
        if (m_DMSPTModeInfo_St_ != other_.m_DMSPTModeInfo_St_) {
            return false;
        }
        if (m_DMSValetMode_St_ != other_.m_DMSValetMode_St_) {
            return false;
        }
        if (m_OnePedalMode_St_ != other_.m_OnePedalMode_St_) {
            return false;
        }
        if (m_OPMAvaliability_St_ != other_.m_OPMAvaliability_St_) {
            return false;
        }
        if (m_RegenSetPct_Rsp_ != other_.m_RegenSetPct_Rsp_) {
            return false;
        }
        if (m_RegenAvail_St_ != other_.m_RegenAvail_St_) {
            return false;
        }
        if (m_RegenForDisp_UI_ != other_.m_RegenForDisp_UI_) {
            return false;
        }
        if (m_DrvVehModAvaliability_St_ != other_.m_DrvVehModAvaliability_St_) {
            return false;
        }
        if (m_TrailMode_St_ != other_.m_TrailMode_St_) {
            return false;
        }
        if (m_TrailAvaliability_St_ != other_.m_TrailAvaliability_St_) {
            return false;
        }
        if (m_TrailForDisp_UI_ != other_.m_TrailForDisp_UI_) {
            return false;
        }
        if (m_SaleMode_St_ != other_.m_SaleMode_St_) {
            return false;
        }
        return true;
    }
    bool DringMode_St_Struct::operator != (const DringMode_St_Struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const DringMode_St_Struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "DMSEPSModeInfo_St: " << (int)sample.DMSEPSModeInfo_St() <<", ";
        o << "DMSVehMode_St: " << (int)sample.DMSVehMode_St() <<", ";
        o << "DMSModeChgEn_St: " << (int)sample.DMSModeChgEn_St() <<", ";
        o << "DMSPTModeInfo_St: " << (int)sample.DMSPTModeInfo_St() <<", ";
        o << "DMSValetMode_St: " << (int)sample.DMSValetMode_St() <<", ";
        o << "OnePedalMode_St: " << (int)sample.OnePedalMode_St() <<", ";
        o << "OPMAvaliability_St: " << (int)sample.OPMAvaliability_St() <<", ";
        o << "RegenSetPct_Rsp: " << (int)sample.RegenSetPct_Rsp() <<", ";
        o << "RegenAvail_St: " << (int)sample.RegenAvail_St() <<", ";
        o << "RegenForDisp_UI: " << (int)sample.RegenForDisp_UI() <<", ";
        o << "DrvVehModAvaliability_St: " << (int)sample.DrvVehModAvaliability_St() <<", ";
        o << "TrailMode_St: " << (int)sample.TrailMode_St() <<", ";
        o << "TrailAvaliability_St: " << (int)sample.TrailAvaliability_St() <<", ";
        o << "TrailForDisp_UI: " << (int)sample.TrailForDisp_UI() <<", ";
        o << "SaleMode_St: " << (int)sample.SaleMode_St()  ;
        o <<"]";
        return o;
    }

    // ---- VehicleMode_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VehicleMode_Srv_Req_Union::VehicleMode_Srv_Req_Union(VehicleMode_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                PowerMode_Ctrl( std::move(other_.PowerMode_Ctrl()));
            } break;
            case 1:
            {  
                CarMode_Ctrl( std::move(other_.CarMode_Ctrl()));
            } break;
            case 2:
            {  
                DrivingMode_Ctrl( std::move(other_.DrivingMode_Ctrl()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    VehicleMode_Srv_Req_Union& VehicleMode_Srv_Req_Union::operator=(VehicleMode_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        VehicleMode_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    VehicleMode_Srv_Req_Union::Union_::Union_()  {
    }

    VehicleMode_Srv_Req_Union::Union_::Union_(
        const PTDomain::PowerMode_Ctrl_struct& PowerMode_Ctrl,
        const PTDomain::CarMode_Ctrl_struct& CarMode_Ctrl,
        const PTDomain::DrivingMode_Ctrl_struct& DrivingMode_Ctrl)
        :
            m_PowerMode_Ctrl_( PowerMode_Ctrl ),
            m_CarMode_Ctrl_( CarMode_Ctrl ),
            m_DrivingMode_Ctrl_( DrivingMode_Ctrl ) {
    }

    VehicleMode_Srv_Req_Union::VehicleMode_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void VehicleMode_Srv_Req_Union::swap(VehicleMode_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_PowerMode_Ctrl_, other_.m_u_.m_PowerMode_Ctrl_);
            } break;
            case 1:
            {  
                swap(m_u_.m_CarMode_Ctrl_, other_.m_u_.m_CarMode_Ctrl_);
            } break;
            case 2:
            {  
                swap(m_u_.m_DrivingMode_Ctrl_, other_.m_u_.m_DrivingMode_Ctrl_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_PowerMode_Ctrl_, other_.m_u_.m_PowerMode_Ctrl_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_CarMode_Ctrl_, other_.m_u_.m_CarMode_Ctrl_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_DrivingMode_Ctrl_, other_.m_u_.m_DrivingMode_Ctrl_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool VehicleMode_Srv_Req_Union::operator == (const VehicleMode_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_PowerMode_Ctrl_ != other_.m_u_.m_PowerMode_Ctrl_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_CarMode_Ctrl_ != other_.m_u_.m_CarMode_Ctrl_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_DrivingMode_Ctrl_ != other_.m_u_.m_DrivingMode_Ctrl_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool VehicleMode_Srv_Req_Union::operator != (const VehicleMode_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VehicleMode_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "PowerMode_Ctrl: " << sample.PowerMode_Ctrl()<<", ";
            } break ;
            case 1:
            {  
                o << "CarMode_Ctrl: " << sample.CarMode_Ctrl()<<", ";
            } break ;
            case 2:
            {  
                o << "DrivingMode_Ctrl: " << sample.DrivingMode_Ctrl() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t VehicleMode_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- VehicleMode_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    VehicleMode_Srv_Resp_Union::VehicleMode_Srv_Resp_Union(VehicleMode_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                PowerMode_Ctrl_SOA( std::move(other_.PowerMode_Ctrl_SOA()));
            } break;
            case 1:
            {  
                CarMode_Ctrl_SOA( std::move(other_.CarMode_Ctrl_SOA()));
            } break;
            case 2:
            {  
                DrivingMode_Ctrl_SOA( std::move(other_.DrivingMode_Ctrl_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    VehicleMode_Srv_Resp_Union& VehicleMode_Srv_Resp_Union::operator=(VehicleMode_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        VehicleMode_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    VehicleMode_Srv_Resp_Union::Union_::Union_()  {
    }

    VehicleMode_Srv_Resp_Union::Union_::Union_(
        const PTDomain::PowerMode_Ctrl_SOA_struct& PowerMode_Ctrl_SOA,
        const PTDomain::CarMode_Ctrl_SOA_struct& CarMode_Ctrl_SOA,
        const PTDomain::DrivingMode_Ctrl_SOA_struct& DrivingMode_Ctrl_SOA)
        :
            m_PowerMode_Ctrl_SOA_( PowerMode_Ctrl_SOA ),
            m_CarMode_Ctrl_SOA_( CarMode_Ctrl_SOA ),
            m_DrivingMode_Ctrl_SOA_( DrivingMode_Ctrl_SOA ) {
    }

    VehicleMode_Srv_Resp_Union::VehicleMode_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void VehicleMode_Srv_Resp_Union::swap(VehicleMode_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_PowerMode_Ctrl_SOA_, other_.m_u_.m_PowerMode_Ctrl_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_CarMode_Ctrl_SOA_, other_.m_u_.m_CarMode_Ctrl_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_DrivingMode_Ctrl_SOA_, other_.m_u_.m_DrivingMode_Ctrl_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_PowerMode_Ctrl_SOA_, other_.m_u_.m_PowerMode_Ctrl_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_CarMode_Ctrl_SOA_, other_.m_u_.m_CarMode_Ctrl_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_DrivingMode_Ctrl_SOA_, other_.m_u_.m_DrivingMode_Ctrl_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool VehicleMode_Srv_Resp_Union::operator == (const VehicleMode_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_PowerMode_Ctrl_SOA_ != other_.m_u_.m_PowerMode_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_CarMode_Ctrl_SOA_ != other_.m_u_.m_CarMode_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_DrivingMode_Ctrl_SOA_ != other_.m_u_.m_DrivingMode_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool VehicleMode_Srv_Resp_Union::operator != (const VehicleMode_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const VehicleMode_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "PowerMode_Ctrl_SOA: " << sample.PowerMode_Ctrl_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "CarMode_Ctrl_SOA: " << sample.CarMode_Ctrl_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "DrivingMode_Ctrl_SOA: " << sample.DrivingMode_Ctrl_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t VehicleMode_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

    // ---- CHS_Ctrl_struct: 

    CHS_Ctrl_struct::CHS_Ctrl_struct() :
        m_HDCSw_Req_ (0) ,
        m_EHBMBrkModeSet_Req_ (0) ,
        m_CSTSw_Req_ (0) ,
        m_TCSSw_Req_ (0) ,
        m_AVHSw_Req_ (0) ,
        m_ESCSw_Req_ (0) ,
        m_ParkingSwitch_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    CHS_Ctrl_struct::CHS_Ctrl_struct (
        uint8_t HDCSw_Req,
        uint8_t EHBMBrkModeSet_Req,
        uint8_t CSTSw_Req,
        uint8_t TCSSw_Req,
        uint8_t AVHSw_Req,
        uint8_t ESCSw_Req,
        uint8_t ParkingSwitch_Req,
        const std::string& CtrlSource)
        :
            m_HDCSw_Req_( HDCSw_Req ),
            m_EHBMBrkModeSet_Req_( EHBMBrkModeSet_Req ),
            m_CSTSw_Req_( CSTSw_Req ),
            m_TCSSw_Req_( TCSSw_Req ),
            m_AVHSw_Req_( AVHSw_Req ),
            m_ESCSw_Req_( ESCSw_Req ),
            m_ParkingSwitch_Req_( ParkingSwitch_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CHS_Ctrl_struct::CHS_Ctrl_struct(CHS_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_HDCSw_Req_ (std::move(other_.m_HDCSw_Req_))
    ,
    m_EHBMBrkModeSet_Req_ (std::move(other_.m_EHBMBrkModeSet_Req_))
    ,
    m_CSTSw_Req_ (std::move(other_.m_CSTSw_Req_))
    ,
    m_TCSSw_Req_ (std::move(other_.m_TCSSw_Req_))
    ,
    m_AVHSw_Req_ (std::move(other_.m_AVHSw_Req_))
    ,
    m_ESCSw_Req_ (std::move(other_.m_ESCSw_Req_))
    ,
    m_ParkingSwitch_Req_ (std::move(other_.m_ParkingSwitch_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    CHS_Ctrl_struct& CHS_Ctrl_struct::operator=(CHS_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        CHS_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CHS_Ctrl_struct::swap(CHS_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_HDCSw_Req_, other_.m_HDCSw_Req_);
        swap(m_EHBMBrkModeSet_Req_, other_.m_EHBMBrkModeSet_Req_);
        swap(m_CSTSw_Req_, other_.m_CSTSw_Req_);
        swap(m_TCSSw_Req_, other_.m_TCSSw_Req_);
        swap(m_AVHSw_Req_, other_.m_AVHSw_Req_);
        swap(m_ESCSw_Req_, other_.m_ESCSw_Req_);
        swap(m_ParkingSwitch_Req_, other_.m_ParkingSwitch_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool CHS_Ctrl_struct::operator == (const CHS_Ctrl_struct& other_) const {
        if (m_HDCSw_Req_ != other_.m_HDCSw_Req_) {
            return false;
        }
        if (m_EHBMBrkModeSet_Req_ != other_.m_EHBMBrkModeSet_Req_) {
            return false;
        }
        if (m_CSTSw_Req_ != other_.m_CSTSw_Req_) {
            return false;
        }
        if (m_TCSSw_Req_ != other_.m_TCSSw_Req_) {
            return false;
        }
        if (m_AVHSw_Req_ != other_.m_AVHSw_Req_) {
            return false;
        }
        if (m_ESCSw_Req_ != other_.m_ESCSw_Req_) {
            return false;
        }
        if (m_ParkingSwitch_Req_ != other_.m_ParkingSwitch_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool CHS_Ctrl_struct::operator != (const CHS_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CHS_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "HDCSw_Req: " << (int)sample.HDCSw_Req() <<", ";
        o << "EHBMBrkModeSet_Req: " << (int)sample.EHBMBrkModeSet_Req() <<", ";
        o << "CSTSw_Req: " << (int)sample.CSTSw_Req() <<", ";
        o << "TCSSw_Req: " << (int)sample.TCSSw_Req() <<", ";
        o << "AVHSw_Req: " << (int)sample.AVHSw_Req() <<", ";
        o << "ESCSw_Req: " << (int)sample.ESCSw_Req() <<", ";
        o << "ParkingSwitch_Req: " << (int)sample.ParkingSwitch_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- CHS_St_struct: 

    CHS_St_struct::CHS_St_struct() :
        m_HDCAvail_St_ (0) ,
        m_HDC_St_ (0) ,
        m_BrakeModeEnable_St_ (0) ,
        m_BrakeMode_St_ (0) ,
        m_BoostDegrade_St_ (0) ,
        m_CST_Rsp_ (0) ,
        m_TCSSwAvail_St_ (0) ,
        m_PataLamp_St_ (0) ,
        m_AVHAvail_St_ (0) ,
        m_AVH_St_ (0) ,
        m_ESCSwAvail_St_ (0) ,
        m_ESClamp_St_ (0) ,
        m_EPB_St_ (0) ,
        m_BU_EPB_St_ (0) ,
        m_EPBSwAvail_St_ (0)  {
    }   

    CHS_St_struct::CHS_St_struct (
        uint8_t HDCAvail_St,
        uint8_t HDC_St,
        uint8_t BrakeModeEnable_St,
        uint8_t BrakeMode_St,
        uint8_t BoostDegrade_St,
        uint8_t CST_Rsp,
        uint8_t TCSSwAvail_St,
        uint8_t PataLamp_St,
        uint8_t AVHAvail_St,
        uint8_t AVH_St,
        uint8_t ESCSwAvail_St,
        uint8_t ESClamp_St,
        uint8_t EPB_St,
        uint8_t BU_EPB_St,
        uint8_t EPBSwAvail_St)
        :
            m_HDCAvail_St_( HDCAvail_St ),
            m_HDC_St_( HDC_St ),
            m_BrakeModeEnable_St_( BrakeModeEnable_St ),
            m_BrakeMode_St_( BrakeMode_St ),
            m_BoostDegrade_St_( BoostDegrade_St ),
            m_CST_Rsp_( CST_Rsp ),
            m_TCSSwAvail_St_( TCSSwAvail_St ),
            m_PataLamp_St_( PataLamp_St ),
            m_AVHAvail_St_( AVHAvail_St ),
            m_AVH_St_( AVH_St ),
            m_ESCSwAvail_St_( ESCSwAvail_St ),
            m_ESClamp_St_( ESClamp_St ),
            m_EPB_St_( EPB_St ),
            m_BU_EPB_St_( BU_EPB_St ),
            m_EPBSwAvail_St_( EPBSwAvail_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CHS_St_struct::CHS_St_struct(CHS_St_struct&& other_) OMG_NOEXCEPT  :m_HDCAvail_St_ (std::move(other_.m_HDCAvail_St_))
    ,
    m_HDC_St_ (std::move(other_.m_HDC_St_))
    ,
    m_BrakeModeEnable_St_ (std::move(other_.m_BrakeModeEnable_St_))
    ,
    m_BrakeMode_St_ (std::move(other_.m_BrakeMode_St_))
    ,
    m_BoostDegrade_St_ (std::move(other_.m_BoostDegrade_St_))
    ,
    m_CST_Rsp_ (std::move(other_.m_CST_Rsp_))
    ,
    m_TCSSwAvail_St_ (std::move(other_.m_TCSSwAvail_St_))
    ,
    m_PataLamp_St_ (std::move(other_.m_PataLamp_St_))
    ,
    m_AVHAvail_St_ (std::move(other_.m_AVHAvail_St_))
    ,
    m_AVH_St_ (std::move(other_.m_AVH_St_))
    ,
    m_ESCSwAvail_St_ (std::move(other_.m_ESCSwAvail_St_))
    ,
    m_ESClamp_St_ (std::move(other_.m_ESClamp_St_))
    ,
    m_EPB_St_ (std::move(other_.m_EPB_St_))
    ,
    m_BU_EPB_St_ (std::move(other_.m_BU_EPB_St_))
    ,
    m_EPBSwAvail_St_ (std::move(other_.m_EPBSwAvail_St_))
    {
    } 

    CHS_St_struct& CHS_St_struct::operator=(CHS_St_struct&&  other_) OMG_NOEXCEPT {
        CHS_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CHS_St_struct::swap(CHS_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_HDCAvail_St_, other_.m_HDCAvail_St_);
        swap(m_HDC_St_, other_.m_HDC_St_);
        swap(m_BrakeModeEnable_St_, other_.m_BrakeModeEnable_St_);
        swap(m_BrakeMode_St_, other_.m_BrakeMode_St_);
        swap(m_BoostDegrade_St_, other_.m_BoostDegrade_St_);
        swap(m_CST_Rsp_, other_.m_CST_Rsp_);
        swap(m_TCSSwAvail_St_, other_.m_TCSSwAvail_St_);
        swap(m_PataLamp_St_, other_.m_PataLamp_St_);
        swap(m_AVHAvail_St_, other_.m_AVHAvail_St_);
        swap(m_AVH_St_, other_.m_AVH_St_);
        swap(m_ESCSwAvail_St_, other_.m_ESCSwAvail_St_);
        swap(m_ESClamp_St_, other_.m_ESClamp_St_);
        swap(m_EPB_St_, other_.m_EPB_St_);
        swap(m_BU_EPB_St_, other_.m_BU_EPB_St_);
        swap(m_EPBSwAvail_St_, other_.m_EPBSwAvail_St_);
    }  

    bool CHS_St_struct::operator == (const CHS_St_struct& other_) const {
        if (m_HDCAvail_St_ != other_.m_HDCAvail_St_) {
            return false;
        }
        if (m_HDC_St_ != other_.m_HDC_St_) {
            return false;
        }
        if (m_BrakeModeEnable_St_ != other_.m_BrakeModeEnable_St_) {
            return false;
        }
        if (m_BrakeMode_St_ != other_.m_BrakeMode_St_) {
            return false;
        }
        if (m_BoostDegrade_St_ != other_.m_BoostDegrade_St_) {
            return false;
        }
        if (m_CST_Rsp_ != other_.m_CST_Rsp_) {
            return false;
        }
        if (m_TCSSwAvail_St_ != other_.m_TCSSwAvail_St_) {
            return false;
        }
        if (m_PataLamp_St_ != other_.m_PataLamp_St_) {
            return false;
        }
        if (m_AVHAvail_St_ != other_.m_AVHAvail_St_) {
            return false;
        }
        if (m_AVH_St_ != other_.m_AVH_St_) {
            return false;
        }
        if (m_ESCSwAvail_St_ != other_.m_ESCSwAvail_St_) {
            return false;
        }
        if (m_ESClamp_St_ != other_.m_ESClamp_St_) {
            return false;
        }
        if (m_EPB_St_ != other_.m_EPB_St_) {
            return false;
        }
        if (m_BU_EPB_St_ != other_.m_BU_EPB_St_) {
            return false;
        }
        if (m_EPBSwAvail_St_ != other_.m_EPBSwAvail_St_) {
            return false;
        }
        return true;
    }
    bool CHS_St_struct::operator != (const CHS_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CHS_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "HDCAvail_St: " << (int)sample.HDCAvail_St() <<", ";
        o << "HDC_St: " << (int)sample.HDC_St() <<", ";
        o << "BrakeModeEnable_St: " << (int)sample.BrakeModeEnable_St() <<", ";
        o << "BrakeMode_St: " << (int)sample.BrakeMode_St() <<", ";
        o << "BoostDegrade_St: " << (int)sample.BoostDegrade_St() <<", ";
        o << "CST_Rsp: " << (int)sample.CST_Rsp() <<", ";
        o << "TCSSwAvail_St: " << (int)sample.TCSSwAvail_St() <<", ";
        o << "PataLamp_St: " << (int)sample.PataLamp_St() <<", ";
        o << "AVHAvail_St: " << (int)sample.AVHAvail_St() <<", ";
        o << "AVH_St: " << (int)sample.AVH_St() <<", ";
        o << "ESCSwAvail_St: " << (int)sample.ESCSwAvail_St() <<", ";
        o << "ESClamp_St: " << (int)sample.ESClamp_St() <<", ";
        o << "EPB_St: " << (int)sample.EPB_St() <<", ";
        o << "BU_EPB_St: " << (int)sample.BU_EPB_St() <<", ";
        o << "EPBSwAvail_St: " << (int)sample.EPBSwAvail_St()  ;
        o <<"]";
        return o;
    }

    // ---- CHS_Ctrl_SOA_struct: 

    CHS_Ctrl_SOA_struct::CHS_Ctrl_SOA_struct() :
        m_CHS_Ctrl_SOA_u8_ (0)  {
    }   

    CHS_Ctrl_SOA_struct::CHS_Ctrl_SOA_struct (
        uint8_t CHS_Ctrl_SOA_u8)
        :
            m_CHS_Ctrl_SOA_u8_( CHS_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CHS_Ctrl_SOA_struct::CHS_Ctrl_SOA_struct(CHS_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_CHS_Ctrl_SOA_u8_ (std::move(other_.m_CHS_Ctrl_SOA_u8_))
    {
    } 

    CHS_Ctrl_SOA_struct& CHS_Ctrl_SOA_struct::operator=(CHS_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        CHS_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CHS_Ctrl_SOA_struct::swap(CHS_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_CHS_Ctrl_SOA_u8_, other_.m_CHS_Ctrl_SOA_u8_);
    }  

    bool CHS_Ctrl_SOA_struct::operator == (const CHS_Ctrl_SOA_struct& other_) const {
        if (m_CHS_Ctrl_SOA_u8_ != other_.m_CHS_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool CHS_Ctrl_SOA_struct::operator != (const CHS_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CHS_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "CHS_Ctrl_SOA_u8: " << (int)sample.CHS_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

} // namespace PTDomain  

namespace EnergyDomain {

    // ---- AC_Ctrl_struct: 

    AC_Ctrl_struct::AC_Ctrl_struct() :
        m_ACCycleMode_Req_ (0) ,
        m_FACAirFlowLevel_Req_ (0) ,
        m_FACMode_Req_ (0) ,
        m_FACSwitch_Req_ (0) ,
        m_FrontDeFrostFog_Req_ (0) ,
        m_FLeftTempSet_Req_ (0) ,
        m_FRightTempSet_Req_ (0) ,
        m_FTempAreaSynd_Req_ (0) ,
        m_FCoolOrHeatOrVent_Req_ (0) ,
        m_ACOperationMode_Cmd_ (0) ,
        m_FAutoAC_Req_ (0) ,
        m_AirFragranceSwitchEnable_ (0) ,
        m_FragranceConcentration_Req_ (0) ,
        m_AirFragranceChannel1_ (0) ,
        m_AirFragranceChannel2_ (0) ,
        m_AirFragranceChannel3_ (0) ,
        m_IONSet_Cmd_ (0) ,
        m_PM25Set_Cmd_ (0) ,
        m_AQSSet_Cmd_ (0) ,
        m_FLeftAirOutletMode_Cmd_ (0) ,
        m_FRightAirOutletMode_Cmd_ (0) ,
        m_FLOutletSwitch_Cmd_ (0) ,
        m_LCOutletSwitch_Cmd_ (0) ,
        m_RCOutletSwitch_Cmd_ (0) ,
        m_FROutletSwitch_Cmd_ (0) ,
        m_FLOutletLeftRightAngle_ (0) ,
        m_FLOutletUpDownAngle_ (0) ,
        m_LCOutletUpDownAngle_ (0) ,
        m_LCOutletLeftRightAngle_ (0) ,
        m_RCOutletUpDownAngle_ (0) ,
        m_RCOutletLeftRightAngle_ (0) ,
        m_FROutletUpDownAngle_ (0) ,
        m_FROutletLeftRightAngle_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    AC_Ctrl_struct::AC_Ctrl_struct (
        uint8_t ACCycleMode_Req,
        uint8_t FACAirFlowLevel_Req,
        uint8_t FACMode_Req,
        uint8_t FACSwitch_Req,
        uint8_t FrontDeFrostFog_Req,
        uint8_t FLeftTempSet_Req,
        uint8_t FRightTempSet_Req,
        uint8_t FTempAreaSynd_Req,
        uint8_t FCoolOrHeatOrVent_Req,
        uint8_t ACOperationMode_Cmd,
        uint8_t FAutoAC_Req,
        uint8_t AirFragranceSwitchEnable,
        uint8_t FragranceConcentration_Req,
        uint8_t AirFragranceChannel1,
        uint8_t AirFragranceChannel2,
        uint8_t AirFragranceChannel3,
        uint8_t IONSet_Cmd,
        uint8_t PM25Set_Cmd,
        uint8_t AQSSet_Cmd,
        uint8_t FLeftAirOutletMode_Cmd,
        uint8_t FRightAirOutletMode_Cmd,
        uint8_t FLOutletSwitch_Cmd,
        uint8_t LCOutletSwitch_Cmd,
        uint8_t RCOutletSwitch_Cmd,
        uint8_t FROutletSwitch_Cmd,
        uint8_t FLOutletLeftRightAngle,
        uint8_t FLOutletUpDownAngle,
        uint8_t LCOutletUpDownAngle,
        uint8_t LCOutletLeftRightAngle,
        uint8_t RCOutletUpDownAngle,
        uint8_t RCOutletLeftRightAngle,
        uint8_t FROutletUpDownAngle,
        uint8_t FROutletLeftRightAngle,
        const std::string& CtrlSource)
        :
            m_ACCycleMode_Req_( ACCycleMode_Req ),
            m_FACAirFlowLevel_Req_( FACAirFlowLevel_Req ),
            m_FACMode_Req_( FACMode_Req ),
            m_FACSwitch_Req_( FACSwitch_Req ),
            m_FrontDeFrostFog_Req_( FrontDeFrostFog_Req ),
            m_FLeftTempSet_Req_( FLeftTempSet_Req ),
            m_FRightTempSet_Req_( FRightTempSet_Req ),
            m_FTempAreaSynd_Req_( FTempAreaSynd_Req ),
            m_FCoolOrHeatOrVent_Req_( FCoolOrHeatOrVent_Req ),
            m_ACOperationMode_Cmd_( ACOperationMode_Cmd ),
            m_FAutoAC_Req_( FAutoAC_Req ),
            m_AirFragranceSwitchEnable_( AirFragranceSwitchEnable ),
            m_FragranceConcentration_Req_( FragranceConcentration_Req ),
            m_AirFragranceChannel1_( AirFragranceChannel1 ),
            m_AirFragranceChannel2_( AirFragranceChannel2 ),
            m_AirFragranceChannel3_( AirFragranceChannel3 ),
            m_IONSet_Cmd_( IONSet_Cmd ),
            m_PM25Set_Cmd_( PM25Set_Cmd ),
            m_AQSSet_Cmd_( AQSSet_Cmd ),
            m_FLeftAirOutletMode_Cmd_( FLeftAirOutletMode_Cmd ),
            m_FRightAirOutletMode_Cmd_( FRightAirOutletMode_Cmd ),
            m_FLOutletSwitch_Cmd_( FLOutletSwitch_Cmd ),
            m_LCOutletSwitch_Cmd_( LCOutletSwitch_Cmd ),
            m_RCOutletSwitch_Cmd_( RCOutletSwitch_Cmd ),
            m_FROutletSwitch_Cmd_( FROutletSwitch_Cmd ),
            m_FLOutletLeftRightAngle_( FLOutletLeftRightAngle ),
            m_FLOutletUpDownAngle_( FLOutletUpDownAngle ),
            m_LCOutletUpDownAngle_( LCOutletUpDownAngle ),
            m_LCOutletLeftRightAngle_( LCOutletLeftRightAngle ),
            m_RCOutletUpDownAngle_( RCOutletUpDownAngle ),
            m_RCOutletLeftRightAngle_( RCOutletLeftRightAngle ),
            m_FROutletUpDownAngle_( FROutletUpDownAngle ),
            m_FROutletLeftRightAngle_( FROutletLeftRightAngle ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AC_Ctrl_struct::AC_Ctrl_struct(AC_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_ACCycleMode_Req_ (std::move(other_.m_ACCycleMode_Req_))
    ,
    m_FACAirFlowLevel_Req_ (std::move(other_.m_FACAirFlowLevel_Req_))
    ,
    m_FACMode_Req_ (std::move(other_.m_FACMode_Req_))
    ,
    m_FACSwitch_Req_ (std::move(other_.m_FACSwitch_Req_))
    ,
    m_FrontDeFrostFog_Req_ (std::move(other_.m_FrontDeFrostFog_Req_))
    ,
    m_FLeftTempSet_Req_ (std::move(other_.m_FLeftTempSet_Req_))
    ,
    m_FRightTempSet_Req_ (std::move(other_.m_FRightTempSet_Req_))
    ,
    m_FTempAreaSynd_Req_ (std::move(other_.m_FTempAreaSynd_Req_))
    ,
    m_FCoolOrHeatOrVent_Req_ (std::move(other_.m_FCoolOrHeatOrVent_Req_))
    ,
    m_ACOperationMode_Cmd_ (std::move(other_.m_ACOperationMode_Cmd_))
    ,
    m_FAutoAC_Req_ (std::move(other_.m_FAutoAC_Req_))
    ,
    m_AirFragranceSwitchEnable_ (std::move(other_.m_AirFragranceSwitchEnable_))
    ,
    m_FragranceConcentration_Req_ (std::move(other_.m_FragranceConcentration_Req_))
    ,
    m_AirFragranceChannel1_ (std::move(other_.m_AirFragranceChannel1_))
    ,
    m_AirFragranceChannel2_ (std::move(other_.m_AirFragranceChannel2_))
    ,
    m_AirFragranceChannel3_ (std::move(other_.m_AirFragranceChannel3_))
    ,
    m_IONSet_Cmd_ (std::move(other_.m_IONSet_Cmd_))
    ,
    m_PM25Set_Cmd_ (std::move(other_.m_PM25Set_Cmd_))
    ,
    m_AQSSet_Cmd_ (std::move(other_.m_AQSSet_Cmd_))
    ,
    m_FLeftAirOutletMode_Cmd_ (std::move(other_.m_FLeftAirOutletMode_Cmd_))
    ,
    m_FRightAirOutletMode_Cmd_ (std::move(other_.m_FRightAirOutletMode_Cmd_))
    ,
    m_FLOutletSwitch_Cmd_ (std::move(other_.m_FLOutletSwitch_Cmd_))
    ,
    m_LCOutletSwitch_Cmd_ (std::move(other_.m_LCOutletSwitch_Cmd_))
    ,
    m_RCOutletSwitch_Cmd_ (std::move(other_.m_RCOutletSwitch_Cmd_))
    ,
    m_FROutletSwitch_Cmd_ (std::move(other_.m_FROutletSwitch_Cmd_))
    ,
    m_FLOutletLeftRightAngle_ (std::move(other_.m_FLOutletLeftRightAngle_))
    ,
    m_FLOutletUpDownAngle_ (std::move(other_.m_FLOutletUpDownAngle_))
    ,
    m_LCOutletUpDownAngle_ (std::move(other_.m_LCOutletUpDownAngle_))
    ,
    m_LCOutletLeftRightAngle_ (std::move(other_.m_LCOutletLeftRightAngle_))
    ,
    m_RCOutletUpDownAngle_ (std::move(other_.m_RCOutletUpDownAngle_))
    ,
    m_RCOutletLeftRightAngle_ (std::move(other_.m_RCOutletLeftRightAngle_))
    ,
    m_FROutletUpDownAngle_ (std::move(other_.m_FROutletUpDownAngle_))
    ,
    m_FROutletLeftRightAngle_ (std::move(other_.m_FROutletLeftRightAngle_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    AC_Ctrl_struct& AC_Ctrl_struct::operator=(AC_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        AC_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void AC_Ctrl_struct::swap(AC_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ACCycleMode_Req_, other_.m_ACCycleMode_Req_);
        swap(m_FACAirFlowLevel_Req_, other_.m_FACAirFlowLevel_Req_);
        swap(m_FACMode_Req_, other_.m_FACMode_Req_);
        swap(m_FACSwitch_Req_, other_.m_FACSwitch_Req_);
        swap(m_FrontDeFrostFog_Req_, other_.m_FrontDeFrostFog_Req_);
        swap(m_FLeftTempSet_Req_, other_.m_FLeftTempSet_Req_);
        swap(m_FRightTempSet_Req_, other_.m_FRightTempSet_Req_);
        swap(m_FTempAreaSynd_Req_, other_.m_FTempAreaSynd_Req_);
        swap(m_FCoolOrHeatOrVent_Req_, other_.m_FCoolOrHeatOrVent_Req_);
        swap(m_ACOperationMode_Cmd_, other_.m_ACOperationMode_Cmd_);
        swap(m_FAutoAC_Req_, other_.m_FAutoAC_Req_);
        swap(m_AirFragranceSwitchEnable_, other_.m_AirFragranceSwitchEnable_);
        swap(m_FragranceConcentration_Req_, other_.m_FragranceConcentration_Req_);
        swap(m_AirFragranceChannel1_, other_.m_AirFragranceChannel1_);
        swap(m_AirFragranceChannel2_, other_.m_AirFragranceChannel2_);
        swap(m_AirFragranceChannel3_, other_.m_AirFragranceChannel3_);
        swap(m_IONSet_Cmd_, other_.m_IONSet_Cmd_);
        swap(m_PM25Set_Cmd_, other_.m_PM25Set_Cmd_);
        swap(m_AQSSet_Cmd_, other_.m_AQSSet_Cmd_);
        swap(m_FLeftAirOutletMode_Cmd_, other_.m_FLeftAirOutletMode_Cmd_);
        swap(m_FRightAirOutletMode_Cmd_, other_.m_FRightAirOutletMode_Cmd_);
        swap(m_FLOutletSwitch_Cmd_, other_.m_FLOutletSwitch_Cmd_);
        swap(m_LCOutletSwitch_Cmd_, other_.m_LCOutletSwitch_Cmd_);
        swap(m_RCOutletSwitch_Cmd_, other_.m_RCOutletSwitch_Cmd_);
        swap(m_FROutletSwitch_Cmd_, other_.m_FROutletSwitch_Cmd_);
        swap(m_FLOutletLeftRightAngle_, other_.m_FLOutletLeftRightAngle_);
        swap(m_FLOutletUpDownAngle_, other_.m_FLOutletUpDownAngle_);
        swap(m_LCOutletUpDownAngle_, other_.m_LCOutletUpDownAngle_);
        swap(m_LCOutletLeftRightAngle_, other_.m_LCOutletLeftRightAngle_);
        swap(m_RCOutletUpDownAngle_, other_.m_RCOutletUpDownAngle_);
        swap(m_RCOutletLeftRightAngle_, other_.m_RCOutletLeftRightAngle_);
        swap(m_FROutletUpDownAngle_, other_.m_FROutletUpDownAngle_);
        swap(m_FROutletLeftRightAngle_, other_.m_FROutletLeftRightAngle_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool AC_Ctrl_struct::operator == (const AC_Ctrl_struct& other_) const {
        if (m_ACCycleMode_Req_ != other_.m_ACCycleMode_Req_) {
            return false;
        }
        if (m_FACAirFlowLevel_Req_ != other_.m_FACAirFlowLevel_Req_) {
            return false;
        }
        if (m_FACMode_Req_ != other_.m_FACMode_Req_) {
            return false;
        }
        if (m_FACSwitch_Req_ != other_.m_FACSwitch_Req_) {
            return false;
        }
        if (m_FrontDeFrostFog_Req_ != other_.m_FrontDeFrostFog_Req_) {
            return false;
        }
        if (m_FLeftTempSet_Req_ != other_.m_FLeftTempSet_Req_) {
            return false;
        }
        if (m_FRightTempSet_Req_ != other_.m_FRightTempSet_Req_) {
            return false;
        }
        if (m_FTempAreaSynd_Req_ != other_.m_FTempAreaSynd_Req_) {
            return false;
        }
        if (m_FCoolOrHeatOrVent_Req_ != other_.m_FCoolOrHeatOrVent_Req_) {
            return false;
        }
        if (m_ACOperationMode_Cmd_ != other_.m_ACOperationMode_Cmd_) {
            return false;
        }
        if (m_FAutoAC_Req_ != other_.m_FAutoAC_Req_) {
            return false;
        }
        if (m_AirFragranceSwitchEnable_ != other_.m_AirFragranceSwitchEnable_) {
            return false;
        }
        if (m_FragranceConcentration_Req_ != other_.m_FragranceConcentration_Req_) {
            return false;
        }
        if (m_AirFragranceChannel1_ != other_.m_AirFragranceChannel1_) {
            return false;
        }
        if (m_AirFragranceChannel2_ != other_.m_AirFragranceChannel2_) {
            return false;
        }
        if (m_AirFragranceChannel3_ != other_.m_AirFragranceChannel3_) {
            return false;
        }
        if (m_IONSet_Cmd_ != other_.m_IONSet_Cmd_) {
            return false;
        }
        if (m_PM25Set_Cmd_ != other_.m_PM25Set_Cmd_) {
            return false;
        }
        if (m_AQSSet_Cmd_ != other_.m_AQSSet_Cmd_) {
            return false;
        }
        if (m_FLeftAirOutletMode_Cmd_ != other_.m_FLeftAirOutletMode_Cmd_) {
            return false;
        }
        if (m_FRightAirOutletMode_Cmd_ != other_.m_FRightAirOutletMode_Cmd_) {
            return false;
        }
        if (m_FLOutletSwitch_Cmd_ != other_.m_FLOutletSwitch_Cmd_) {
            return false;
        }
        if (m_LCOutletSwitch_Cmd_ != other_.m_LCOutletSwitch_Cmd_) {
            return false;
        }
        if (m_RCOutletSwitch_Cmd_ != other_.m_RCOutletSwitch_Cmd_) {
            return false;
        }
        if (m_FROutletSwitch_Cmd_ != other_.m_FROutletSwitch_Cmd_) {
            return false;
        }
        if (m_FLOutletLeftRightAngle_ != other_.m_FLOutletLeftRightAngle_) {
            return false;
        }
        if (m_FLOutletUpDownAngle_ != other_.m_FLOutletUpDownAngle_) {
            return false;
        }
        if (m_LCOutletUpDownAngle_ != other_.m_LCOutletUpDownAngle_) {
            return false;
        }
        if (m_LCOutletLeftRightAngle_ != other_.m_LCOutletLeftRightAngle_) {
            return false;
        }
        if (m_RCOutletUpDownAngle_ != other_.m_RCOutletUpDownAngle_) {
            return false;
        }
        if (m_RCOutletLeftRightAngle_ != other_.m_RCOutletLeftRightAngle_) {
            return false;
        }
        if (m_FROutletUpDownAngle_ != other_.m_FROutletUpDownAngle_) {
            return false;
        }
        if (m_FROutletLeftRightAngle_ != other_.m_FROutletLeftRightAngle_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool AC_Ctrl_struct::operator != (const AC_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AC_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ACCycleMode_Req: " << (int)sample.ACCycleMode_Req() <<", ";
        o << "FACAirFlowLevel_Req: " << (int)sample.FACAirFlowLevel_Req() <<", ";
        o << "FACMode_Req: " << (int)sample.FACMode_Req() <<", ";
        o << "FACSwitch_Req: " << (int)sample.FACSwitch_Req() <<", ";
        o << "FrontDeFrostFog_Req: " << (int)sample.FrontDeFrostFog_Req() <<", ";
        o << "FLeftTempSet_Req: " << (int)sample.FLeftTempSet_Req() <<", ";
        o << "FRightTempSet_Req: " << (int)sample.FRightTempSet_Req() <<", ";
        o << "FTempAreaSynd_Req: " << (int)sample.FTempAreaSynd_Req() <<", ";
        o << "FCoolOrHeatOrVent_Req: " << (int)sample.FCoolOrHeatOrVent_Req() <<", ";
        o << "ACOperationMode_Cmd: " << (int)sample.ACOperationMode_Cmd() <<", ";
        o << "FAutoAC_Req: " << (int)sample.FAutoAC_Req() <<", ";
        o << "AirFragranceSwitchEnable: " << (int)sample.AirFragranceSwitchEnable() <<", ";
        o << "FragranceConcentration_Req: " << (int)sample.FragranceConcentration_Req() <<", ";
        o << "AirFragranceChannel1: " << (int)sample.AirFragranceChannel1() <<", ";
        o << "AirFragranceChannel2: " << (int)sample.AirFragranceChannel2() <<", ";
        o << "AirFragranceChannel3: " << (int)sample.AirFragranceChannel3() <<", ";
        o << "IONSet_Cmd: " << (int)sample.IONSet_Cmd() <<", ";
        o << "PM25Set_Cmd: " << (int)sample.PM25Set_Cmd() <<", ";
        o << "AQSSet_Cmd: " << (int)sample.AQSSet_Cmd() <<", ";
        o << "FLeftAirOutletMode_Cmd: " << (int)sample.FLeftAirOutletMode_Cmd() <<", ";
        o << "FRightAirOutletMode_Cmd: " << (int)sample.FRightAirOutletMode_Cmd() <<", ";
        o << "FLOutletSwitch_Cmd: " << (int)sample.FLOutletSwitch_Cmd() <<", ";
        o << "LCOutletSwitch_Cmd: " << (int)sample.LCOutletSwitch_Cmd() <<", ";
        o << "RCOutletSwitch_Cmd: " << (int)sample.RCOutletSwitch_Cmd() <<", ";
        o << "FROutletSwitch_Cmd: " << (int)sample.FROutletSwitch_Cmd() <<", ";
        o << "FLOutletLeftRightAngle: " << (int)sample.FLOutletLeftRightAngle() <<", ";
        o << "FLOutletUpDownAngle: " << (int)sample.FLOutletUpDownAngle() <<", ";
        o << "LCOutletUpDownAngle: " << (int)sample.LCOutletUpDownAngle() <<", ";
        o << "LCOutletLeftRightAngle: " << (int)sample.LCOutletLeftRightAngle() <<", ";
        o << "RCOutletUpDownAngle: " << (int)sample.RCOutletUpDownAngle() <<", ";
        o << "RCOutletLeftRightAngle: " << (int)sample.RCOutletLeftRightAngle() <<", ";
        o << "FROutletUpDownAngle: " << (int)sample.FROutletUpDownAngle() <<", ";
        o << "FROutletLeftRightAngle: " << (int)sample.FROutletLeftRightAngle() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- AC_St_struct: 

    AC_St_struct::AC_St_struct() :
        m_ACCycleMode_St_ (0) ,
        m_FACAirFlowLevel_St_ (0) ,
        m_FACMode_St_ (0) ,
        m_FACSwitch_Rsp_ (0) ,
        m_FDeiceDefrost_Rsp_ (0) ,
        m_FLeftTempSet_St_ (0) ,
        m_FRightTempSet_St_ (0) ,
        m_FTempAreaSync_St_ (0) ,
        m_FAcCoolOrHeatOrVent_St_ (0) ,
        m_ACOperateMode_St_ (0) ,
        m_FACAuto_Rsp_ (0) ,
        m_FACAirFlowLevelAuto_St_ (0) ,
        m_FACAirFlowModeAuto_St_ (0) ,
        m_FACCoolOrHeatOrVentAuto_St_ (0) ,
        m_EnvirTemp_Val_ (0) ,
        m_FragSwitchEN_Rsp_ (0) ,
        m_FragConcLevel_Rsp_ (0) ,
        m_FragChannel1Switch_St_ (0) ,
        m_FragChannel2Switch_St_ (0) ,
        m_FragChannel3Switch_St_ (0) ,
        m_FragChannelType_ (0) ,
        m_FragChannelIndex_ (0) ,
        m_FragChannel1Life_ (0) ,
        m_FragChannel2Life_ (0) ,
        m_FragChannel3Life_ (0) ,
        m_IONSet_St_ (0) ,
        m_PM25Set_St_ (0) ,
        m_PM25Trigger_St_ (0) ,
        m_PM25CarConc_ (0) ,
        m_AQSSet_St_ (0) ,
        m_AQSTrigger_St_ (0) ,
        m_AQSAirQuality_Val_ (0) ,
        m_InFilterLifeRemind_ (0) ,
        m_OutsideFilterLifeRemind_ (0) ,
        m_FLeftAirOutletMode_St_ (0) ,
        m_FRightAirOutletMode_St_ (0) ,
        m_OLMFLAirOutletSwitch_Rsp_ (0) ,
        m_OLMLCAirOutletSwitch_Rsp_ (0) ,
        m_OLMRCAirOutletSwitch_Rsp_ (0) ,
        m_OLMFRAirOutletSwitch_Rsp_ (0) ,
        m_OLMFLMotorErrSt_ (0) ,
        m_OLMLCMotorErrSt_ (0) ,
        m_OLMRCMotorErrSt_ (0) ,
        m_OLMFRMotorErrSt_ (0) ,
        m_OLMFLAirOutletLeftRightAngle_Rsp_ (0) ,
        m_OLMFLAirOutletUpDownAngle_Rsp_ (0) ,
        m_OLMLCAirOutletUpDownAngle_Rsp_ (0) ,
        m_OLMLCAirOutletLeftRightAngle_Rsp_ (0) ,
        m_OLMRCAirOutletLeftRightAngle_Rsp_ (0) ,
        m_OLMRCAirOutletUpDownAngle_Rsp_ (0) ,
        m_OLMFRAirOutletUpDownAngle_Rsp_ (0) ,
        m_OLMFRAirOutletLeftRightAngle_Rsp_ (0)  {
    }   

    AC_St_struct::AC_St_struct (
        uint8_t ACCycleMode_St,
        uint8_t FACAirFlowLevel_St,
        uint8_t FACMode_St,
        uint8_t FACSwitch_Rsp,
        uint8_t FDeiceDefrost_Rsp,
        uint8_t FLeftTempSet_St,
        uint8_t FRightTempSet_St,
        uint8_t FTempAreaSync_St,
        uint8_t FAcCoolOrHeatOrVent_St,
        uint8_t ACOperateMode_St,
        uint8_t FACAuto_Rsp,
        uint8_t FACAirFlowLevelAuto_St,
        uint8_t FACAirFlowModeAuto_St,
        uint8_t FACCoolOrHeatOrVentAuto_St,
        uint8_t EnvirTemp_Val,
        uint8_t FragSwitchEN_Rsp,
        uint8_t FragConcLevel_Rsp,
        uint8_t FragChannel1Switch_St,
        uint8_t FragChannel2Switch_St,
        uint8_t FragChannel3Switch_St,
        uint8_t FragChannelType,
        uint8_t FragChannelIndex,
        uint16_t FragChannel1Life,
        uint16_t FragChannel2Life,
        uint16_t FragChannel3Life,
        uint8_t IONSet_St,
        uint8_t PM25Set_St,
        uint8_t PM25Trigger_St,
        uint16_t PM25CarConc,
        uint8_t AQSSet_St,
        uint8_t AQSTrigger_St,
        uint8_t AQSAirQuality_Val,
        uint8_t InFilterLifeRemind,
        uint8_t OutsideFilterLifeRemind,
        uint8_t FLeftAirOutletMode_St,
        uint8_t FRightAirOutletMode_St,
        uint8_t OLMFLAirOutletSwitch_Rsp,
        uint8_t OLMLCAirOutletSwitch_Rsp,
        uint8_t OLMRCAirOutletSwitch_Rsp,
        uint8_t OLMFRAirOutletSwitch_Rsp,
        uint8_t OLMFLMotorErrSt,
        uint8_t OLMLCMotorErrSt,
        uint8_t OLMRCMotorErrSt,
        uint8_t OLMFRMotorErrSt,
        uint8_t OLMFLAirOutletLeftRightAngle_Rsp,
        uint8_t OLMFLAirOutletUpDownAngle_Rsp,
        uint8_t OLMLCAirOutletUpDownAngle_Rsp,
        uint8_t OLMLCAirOutletLeftRightAngle_Rsp,
        uint8_t OLMRCAirOutletLeftRightAngle_Rsp,
        uint8_t OLMRCAirOutletUpDownAngle_Rsp,
        uint8_t OLMFRAirOutletUpDownAngle_Rsp,
        uint8_t OLMFRAirOutletLeftRightAngle_Rsp)
        :
            m_ACCycleMode_St_( ACCycleMode_St ),
            m_FACAirFlowLevel_St_( FACAirFlowLevel_St ),
            m_FACMode_St_( FACMode_St ),
            m_FACSwitch_Rsp_( FACSwitch_Rsp ),
            m_FDeiceDefrost_Rsp_( FDeiceDefrost_Rsp ),
            m_FLeftTempSet_St_( FLeftTempSet_St ),
            m_FRightTempSet_St_( FRightTempSet_St ),
            m_FTempAreaSync_St_( FTempAreaSync_St ),
            m_FAcCoolOrHeatOrVent_St_( FAcCoolOrHeatOrVent_St ),
            m_ACOperateMode_St_( ACOperateMode_St ),
            m_FACAuto_Rsp_( FACAuto_Rsp ),
            m_FACAirFlowLevelAuto_St_( FACAirFlowLevelAuto_St ),
            m_FACAirFlowModeAuto_St_( FACAirFlowModeAuto_St ),
            m_FACCoolOrHeatOrVentAuto_St_( FACCoolOrHeatOrVentAuto_St ),
            m_EnvirTemp_Val_( EnvirTemp_Val ),
            m_FragSwitchEN_Rsp_( FragSwitchEN_Rsp ),
            m_FragConcLevel_Rsp_( FragConcLevel_Rsp ),
            m_FragChannel1Switch_St_( FragChannel1Switch_St ),
            m_FragChannel2Switch_St_( FragChannel2Switch_St ),
            m_FragChannel3Switch_St_( FragChannel3Switch_St ),
            m_FragChannelType_( FragChannelType ),
            m_FragChannelIndex_( FragChannelIndex ),
            m_FragChannel1Life_( FragChannel1Life ),
            m_FragChannel2Life_( FragChannel2Life ),
            m_FragChannel3Life_( FragChannel3Life ),
            m_IONSet_St_( IONSet_St ),
            m_PM25Set_St_( PM25Set_St ),
            m_PM25Trigger_St_( PM25Trigger_St ),
            m_PM25CarConc_( PM25CarConc ),
            m_AQSSet_St_( AQSSet_St ),
            m_AQSTrigger_St_( AQSTrigger_St ),
            m_AQSAirQuality_Val_( AQSAirQuality_Val ),
            m_InFilterLifeRemind_( InFilterLifeRemind ),
            m_OutsideFilterLifeRemind_( OutsideFilterLifeRemind ),
            m_FLeftAirOutletMode_St_( FLeftAirOutletMode_St ),
            m_FRightAirOutletMode_St_( FRightAirOutletMode_St ),
            m_OLMFLAirOutletSwitch_Rsp_( OLMFLAirOutletSwitch_Rsp ),
            m_OLMLCAirOutletSwitch_Rsp_( OLMLCAirOutletSwitch_Rsp ),
            m_OLMRCAirOutletSwitch_Rsp_( OLMRCAirOutletSwitch_Rsp ),
            m_OLMFRAirOutletSwitch_Rsp_( OLMFRAirOutletSwitch_Rsp ),
            m_OLMFLMotorErrSt_( OLMFLMotorErrSt ),
            m_OLMLCMotorErrSt_( OLMLCMotorErrSt ),
            m_OLMRCMotorErrSt_( OLMRCMotorErrSt ),
            m_OLMFRMotorErrSt_( OLMFRMotorErrSt ),
            m_OLMFLAirOutletLeftRightAngle_Rsp_( OLMFLAirOutletLeftRightAngle_Rsp ),
            m_OLMFLAirOutletUpDownAngle_Rsp_( OLMFLAirOutletUpDownAngle_Rsp ),
            m_OLMLCAirOutletUpDownAngle_Rsp_( OLMLCAirOutletUpDownAngle_Rsp ),
            m_OLMLCAirOutletLeftRightAngle_Rsp_( OLMLCAirOutletLeftRightAngle_Rsp ),
            m_OLMRCAirOutletLeftRightAngle_Rsp_( OLMRCAirOutletLeftRightAngle_Rsp ),
            m_OLMRCAirOutletUpDownAngle_Rsp_( OLMRCAirOutletUpDownAngle_Rsp ),
            m_OLMFRAirOutletUpDownAngle_Rsp_( OLMFRAirOutletUpDownAngle_Rsp ),
            m_OLMFRAirOutletLeftRightAngle_Rsp_( OLMFRAirOutletLeftRightAngle_Rsp ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AC_St_struct::AC_St_struct(AC_St_struct&& other_) OMG_NOEXCEPT  :m_ACCycleMode_St_ (std::move(other_.m_ACCycleMode_St_))
    ,
    m_FACAirFlowLevel_St_ (std::move(other_.m_FACAirFlowLevel_St_))
    ,
    m_FACMode_St_ (std::move(other_.m_FACMode_St_))
    ,
    m_FACSwitch_Rsp_ (std::move(other_.m_FACSwitch_Rsp_))
    ,
    m_FDeiceDefrost_Rsp_ (std::move(other_.m_FDeiceDefrost_Rsp_))
    ,
    m_FLeftTempSet_St_ (std::move(other_.m_FLeftTempSet_St_))
    ,
    m_FRightTempSet_St_ (std::move(other_.m_FRightTempSet_St_))
    ,
    m_FTempAreaSync_St_ (std::move(other_.m_FTempAreaSync_St_))
    ,
    m_FAcCoolOrHeatOrVent_St_ (std::move(other_.m_FAcCoolOrHeatOrVent_St_))
    ,
    m_ACOperateMode_St_ (std::move(other_.m_ACOperateMode_St_))
    ,
    m_FACAuto_Rsp_ (std::move(other_.m_FACAuto_Rsp_))
    ,
    m_FACAirFlowLevelAuto_St_ (std::move(other_.m_FACAirFlowLevelAuto_St_))
    ,
    m_FACAirFlowModeAuto_St_ (std::move(other_.m_FACAirFlowModeAuto_St_))
    ,
    m_FACCoolOrHeatOrVentAuto_St_ (std::move(other_.m_FACCoolOrHeatOrVentAuto_St_))
    ,
    m_EnvirTemp_Val_ (std::move(other_.m_EnvirTemp_Val_))
    ,
    m_FragSwitchEN_Rsp_ (std::move(other_.m_FragSwitchEN_Rsp_))
    ,
    m_FragConcLevel_Rsp_ (std::move(other_.m_FragConcLevel_Rsp_))
    ,
    m_FragChannel1Switch_St_ (std::move(other_.m_FragChannel1Switch_St_))
    ,
    m_FragChannel2Switch_St_ (std::move(other_.m_FragChannel2Switch_St_))
    ,
    m_FragChannel3Switch_St_ (std::move(other_.m_FragChannel3Switch_St_))
    ,
    m_FragChannelType_ (std::move(other_.m_FragChannelType_))
    ,
    m_FragChannelIndex_ (std::move(other_.m_FragChannelIndex_))
    ,
    m_FragChannel1Life_ (std::move(other_.m_FragChannel1Life_))
    ,
    m_FragChannel2Life_ (std::move(other_.m_FragChannel2Life_))
    ,
    m_FragChannel3Life_ (std::move(other_.m_FragChannel3Life_))
    ,
    m_IONSet_St_ (std::move(other_.m_IONSet_St_))
    ,
    m_PM25Set_St_ (std::move(other_.m_PM25Set_St_))
    ,
    m_PM25Trigger_St_ (std::move(other_.m_PM25Trigger_St_))
    ,
    m_PM25CarConc_ (std::move(other_.m_PM25CarConc_))
    ,
    m_AQSSet_St_ (std::move(other_.m_AQSSet_St_))
    ,
    m_AQSTrigger_St_ (std::move(other_.m_AQSTrigger_St_))
    ,
    m_AQSAirQuality_Val_ (std::move(other_.m_AQSAirQuality_Val_))
    ,
    m_InFilterLifeRemind_ (std::move(other_.m_InFilterLifeRemind_))
    ,
    m_OutsideFilterLifeRemind_ (std::move(other_.m_OutsideFilterLifeRemind_))
    ,
    m_FLeftAirOutletMode_St_ (std::move(other_.m_FLeftAirOutletMode_St_))
    ,
    m_FRightAirOutletMode_St_ (std::move(other_.m_FRightAirOutletMode_St_))
    ,
    m_OLMFLAirOutletSwitch_Rsp_ (std::move(other_.m_OLMFLAirOutletSwitch_Rsp_))
    ,
    m_OLMLCAirOutletSwitch_Rsp_ (std::move(other_.m_OLMLCAirOutletSwitch_Rsp_))
    ,
    m_OLMRCAirOutletSwitch_Rsp_ (std::move(other_.m_OLMRCAirOutletSwitch_Rsp_))
    ,
    m_OLMFRAirOutletSwitch_Rsp_ (std::move(other_.m_OLMFRAirOutletSwitch_Rsp_))
    ,
    m_OLMFLMotorErrSt_ (std::move(other_.m_OLMFLMotorErrSt_))
    ,
    m_OLMLCMotorErrSt_ (std::move(other_.m_OLMLCMotorErrSt_))
    ,
    m_OLMRCMotorErrSt_ (std::move(other_.m_OLMRCMotorErrSt_))
    ,
    m_OLMFRMotorErrSt_ (std::move(other_.m_OLMFRMotorErrSt_))
    ,
    m_OLMFLAirOutletLeftRightAngle_Rsp_ (std::move(other_.m_OLMFLAirOutletLeftRightAngle_Rsp_))
    ,
    m_OLMFLAirOutletUpDownAngle_Rsp_ (std::move(other_.m_OLMFLAirOutletUpDownAngle_Rsp_))
    ,
    m_OLMLCAirOutletUpDownAngle_Rsp_ (std::move(other_.m_OLMLCAirOutletUpDownAngle_Rsp_))
    ,
    m_OLMLCAirOutletLeftRightAngle_Rsp_ (std::move(other_.m_OLMLCAirOutletLeftRightAngle_Rsp_))
    ,
    m_OLMRCAirOutletLeftRightAngle_Rsp_ (std::move(other_.m_OLMRCAirOutletLeftRightAngle_Rsp_))
    ,
    m_OLMRCAirOutletUpDownAngle_Rsp_ (std::move(other_.m_OLMRCAirOutletUpDownAngle_Rsp_))
    ,
    m_OLMFRAirOutletUpDownAngle_Rsp_ (std::move(other_.m_OLMFRAirOutletUpDownAngle_Rsp_))
    ,
    m_OLMFRAirOutletLeftRightAngle_Rsp_ (std::move(other_.m_OLMFRAirOutletLeftRightAngle_Rsp_))
    {
    } 

    AC_St_struct& AC_St_struct::operator=(AC_St_struct&&  other_) OMG_NOEXCEPT {
        AC_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void AC_St_struct::swap(AC_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_ACCycleMode_St_, other_.m_ACCycleMode_St_);
        swap(m_FACAirFlowLevel_St_, other_.m_FACAirFlowLevel_St_);
        swap(m_FACMode_St_, other_.m_FACMode_St_);
        swap(m_FACSwitch_Rsp_, other_.m_FACSwitch_Rsp_);
        swap(m_FDeiceDefrost_Rsp_, other_.m_FDeiceDefrost_Rsp_);
        swap(m_FLeftTempSet_St_, other_.m_FLeftTempSet_St_);
        swap(m_FRightTempSet_St_, other_.m_FRightTempSet_St_);
        swap(m_FTempAreaSync_St_, other_.m_FTempAreaSync_St_);
        swap(m_FAcCoolOrHeatOrVent_St_, other_.m_FAcCoolOrHeatOrVent_St_);
        swap(m_ACOperateMode_St_, other_.m_ACOperateMode_St_);
        swap(m_FACAuto_Rsp_, other_.m_FACAuto_Rsp_);
        swap(m_FACAirFlowLevelAuto_St_, other_.m_FACAirFlowLevelAuto_St_);
        swap(m_FACAirFlowModeAuto_St_, other_.m_FACAirFlowModeAuto_St_);
        swap(m_FACCoolOrHeatOrVentAuto_St_, other_.m_FACCoolOrHeatOrVentAuto_St_);
        swap(m_EnvirTemp_Val_, other_.m_EnvirTemp_Val_);
        swap(m_FragSwitchEN_Rsp_, other_.m_FragSwitchEN_Rsp_);
        swap(m_FragConcLevel_Rsp_, other_.m_FragConcLevel_Rsp_);
        swap(m_FragChannel1Switch_St_, other_.m_FragChannel1Switch_St_);
        swap(m_FragChannel2Switch_St_, other_.m_FragChannel2Switch_St_);
        swap(m_FragChannel3Switch_St_, other_.m_FragChannel3Switch_St_);
        swap(m_FragChannelType_, other_.m_FragChannelType_);
        swap(m_FragChannelIndex_, other_.m_FragChannelIndex_);
        swap(m_FragChannel1Life_, other_.m_FragChannel1Life_);
        swap(m_FragChannel2Life_, other_.m_FragChannel2Life_);
        swap(m_FragChannel3Life_, other_.m_FragChannel3Life_);
        swap(m_IONSet_St_, other_.m_IONSet_St_);
        swap(m_PM25Set_St_, other_.m_PM25Set_St_);
        swap(m_PM25Trigger_St_, other_.m_PM25Trigger_St_);
        swap(m_PM25CarConc_, other_.m_PM25CarConc_);
        swap(m_AQSSet_St_, other_.m_AQSSet_St_);
        swap(m_AQSTrigger_St_, other_.m_AQSTrigger_St_);
        swap(m_AQSAirQuality_Val_, other_.m_AQSAirQuality_Val_);
        swap(m_InFilterLifeRemind_, other_.m_InFilterLifeRemind_);
        swap(m_OutsideFilterLifeRemind_, other_.m_OutsideFilterLifeRemind_);
        swap(m_FLeftAirOutletMode_St_, other_.m_FLeftAirOutletMode_St_);
        swap(m_FRightAirOutletMode_St_, other_.m_FRightAirOutletMode_St_);
        swap(m_OLMFLAirOutletSwitch_Rsp_, other_.m_OLMFLAirOutletSwitch_Rsp_);
        swap(m_OLMLCAirOutletSwitch_Rsp_, other_.m_OLMLCAirOutletSwitch_Rsp_);
        swap(m_OLMRCAirOutletSwitch_Rsp_, other_.m_OLMRCAirOutletSwitch_Rsp_);
        swap(m_OLMFRAirOutletSwitch_Rsp_, other_.m_OLMFRAirOutletSwitch_Rsp_);
        swap(m_OLMFLMotorErrSt_, other_.m_OLMFLMotorErrSt_);
        swap(m_OLMLCMotorErrSt_, other_.m_OLMLCMotorErrSt_);
        swap(m_OLMRCMotorErrSt_, other_.m_OLMRCMotorErrSt_);
        swap(m_OLMFRMotorErrSt_, other_.m_OLMFRMotorErrSt_);
        swap(m_OLMFLAirOutletLeftRightAngle_Rsp_, other_.m_OLMFLAirOutletLeftRightAngle_Rsp_);
        swap(m_OLMFLAirOutletUpDownAngle_Rsp_, other_.m_OLMFLAirOutletUpDownAngle_Rsp_);
        swap(m_OLMLCAirOutletUpDownAngle_Rsp_, other_.m_OLMLCAirOutletUpDownAngle_Rsp_);
        swap(m_OLMLCAirOutletLeftRightAngle_Rsp_, other_.m_OLMLCAirOutletLeftRightAngle_Rsp_);
        swap(m_OLMRCAirOutletLeftRightAngle_Rsp_, other_.m_OLMRCAirOutletLeftRightAngle_Rsp_);
        swap(m_OLMRCAirOutletUpDownAngle_Rsp_, other_.m_OLMRCAirOutletUpDownAngle_Rsp_);
        swap(m_OLMFRAirOutletUpDownAngle_Rsp_, other_.m_OLMFRAirOutletUpDownAngle_Rsp_);
        swap(m_OLMFRAirOutletLeftRightAngle_Rsp_, other_.m_OLMFRAirOutletLeftRightAngle_Rsp_);
    }  

    bool AC_St_struct::operator == (const AC_St_struct& other_) const {
        if (m_ACCycleMode_St_ != other_.m_ACCycleMode_St_) {
            return false;
        }
        if (m_FACAirFlowLevel_St_ != other_.m_FACAirFlowLevel_St_) {
            return false;
        }
        if (m_FACMode_St_ != other_.m_FACMode_St_) {
            return false;
        }
        if (m_FACSwitch_Rsp_ != other_.m_FACSwitch_Rsp_) {
            return false;
        }
        if (m_FDeiceDefrost_Rsp_ != other_.m_FDeiceDefrost_Rsp_) {
            return false;
        }
        if (m_FLeftTempSet_St_ != other_.m_FLeftTempSet_St_) {
            return false;
        }
        if (m_FRightTempSet_St_ != other_.m_FRightTempSet_St_) {
            return false;
        }
        if (m_FTempAreaSync_St_ != other_.m_FTempAreaSync_St_) {
            return false;
        }
        if (m_FAcCoolOrHeatOrVent_St_ != other_.m_FAcCoolOrHeatOrVent_St_) {
            return false;
        }
        if (m_ACOperateMode_St_ != other_.m_ACOperateMode_St_) {
            return false;
        }
        if (m_FACAuto_Rsp_ != other_.m_FACAuto_Rsp_) {
            return false;
        }
        if (m_FACAirFlowLevelAuto_St_ != other_.m_FACAirFlowLevelAuto_St_) {
            return false;
        }
        if (m_FACAirFlowModeAuto_St_ != other_.m_FACAirFlowModeAuto_St_) {
            return false;
        }
        if (m_FACCoolOrHeatOrVentAuto_St_ != other_.m_FACCoolOrHeatOrVentAuto_St_) {
            return false;
        }
        if (m_EnvirTemp_Val_ != other_.m_EnvirTemp_Val_) {
            return false;
        }
        if (m_FragSwitchEN_Rsp_ != other_.m_FragSwitchEN_Rsp_) {
            return false;
        }
        if (m_FragConcLevel_Rsp_ != other_.m_FragConcLevel_Rsp_) {
            return false;
        }
        if (m_FragChannel1Switch_St_ != other_.m_FragChannel1Switch_St_) {
            return false;
        }
        if (m_FragChannel2Switch_St_ != other_.m_FragChannel2Switch_St_) {
            return false;
        }
        if (m_FragChannel3Switch_St_ != other_.m_FragChannel3Switch_St_) {
            return false;
        }
        if (m_FragChannelType_ != other_.m_FragChannelType_) {
            return false;
        }
        if (m_FragChannelIndex_ != other_.m_FragChannelIndex_) {
            return false;
        }
        if (m_FragChannel1Life_ != other_.m_FragChannel1Life_) {
            return false;
        }
        if (m_FragChannel2Life_ != other_.m_FragChannel2Life_) {
            return false;
        }
        if (m_FragChannel3Life_ != other_.m_FragChannel3Life_) {
            return false;
        }
        if (m_IONSet_St_ != other_.m_IONSet_St_) {
            return false;
        }
        if (m_PM25Set_St_ != other_.m_PM25Set_St_) {
            return false;
        }
        if (m_PM25Trigger_St_ != other_.m_PM25Trigger_St_) {
            return false;
        }
        if (m_PM25CarConc_ != other_.m_PM25CarConc_) {
            return false;
        }
        if (m_AQSSet_St_ != other_.m_AQSSet_St_) {
            return false;
        }
        if (m_AQSTrigger_St_ != other_.m_AQSTrigger_St_) {
            return false;
        }
        if (m_AQSAirQuality_Val_ != other_.m_AQSAirQuality_Val_) {
            return false;
        }
        if (m_InFilterLifeRemind_ != other_.m_InFilterLifeRemind_) {
            return false;
        }
        if (m_OutsideFilterLifeRemind_ != other_.m_OutsideFilterLifeRemind_) {
            return false;
        }
        if (m_FLeftAirOutletMode_St_ != other_.m_FLeftAirOutletMode_St_) {
            return false;
        }
        if (m_FRightAirOutletMode_St_ != other_.m_FRightAirOutletMode_St_) {
            return false;
        }
        if (m_OLMFLAirOutletSwitch_Rsp_ != other_.m_OLMFLAirOutletSwitch_Rsp_) {
            return false;
        }
        if (m_OLMLCAirOutletSwitch_Rsp_ != other_.m_OLMLCAirOutletSwitch_Rsp_) {
            return false;
        }
        if (m_OLMRCAirOutletSwitch_Rsp_ != other_.m_OLMRCAirOutletSwitch_Rsp_) {
            return false;
        }
        if (m_OLMFRAirOutletSwitch_Rsp_ != other_.m_OLMFRAirOutletSwitch_Rsp_) {
            return false;
        }
        if (m_OLMFLMotorErrSt_ != other_.m_OLMFLMotorErrSt_) {
            return false;
        }
        if (m_OLMLCMotorErrSt_ != other_.m_OLMLCMotorErrSt_) {
            return false;
        }
        if (m_OLMRCMotorErrSt_ != other_.m_OLMRCMotorErrSt_) {
            return false;
        }
        if (m_OLMFRMotorErrSt_ != other_.m_OLMFRMotorErrSt_) {
            return false;
        }
        if (m_OLMFLAirOutletLeftRightAngle_Rsp_ != other_.m_OLMFLAirOutletLeftRightAngle_Rsp_) {
            return false;
        }
        if (m_OLMFLAirOutletUpDownAngle_Rsp_ != other_.m_OLMFLAirOutletUpDownAngle_Rsp_) {
            return false;
        }
        if (m_OLMLCAirOutletUpDownAngle_Rsp_ != other_.m_OLMLCAirOutletUpDownAngle_Rsp_) {
            return false;
        }
        if (m_OLMLCAirOutletLeftRightAngle_Rsp_ != other_.m_OLMLCAirOutletLeftRightAngle_Rsp_) {
            return false;
        }
        if (m_OLMRCAirOutletLeftRightAngle_Rsp_ != other_.m_OLMRCAirOutletLeftRightAngle_Rsp_) {
            return false;
        }
        if (m_OLMRCAirOutletUpDownAngle_Rsp_ != other_.m_OLMRCAirOutletUpDownAngle_Rsp_) {
            return false;
        }
        if (m_OLMFRAirOutletUpDownAngle_Rsp_ != other_.m_OLMFRAirOutletUpDownAngle_Rsp_) {
            return false;
        }
        if (m_OLMFRAirOutletLeftRightAngle_Rsp_ != other_.m_OLMFRAirOutletLeftRightAngle_Rsp_) {
            return false;
        }
        return true;
    }
    bool AC_St_struct::operator != (const AC_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AC_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "ACCycleMode_St: " << (int)sample.ACCycleMode_St() <<", ";
        o << "FACAirFlowLevel_St: " << (int)sample.FACAirFlowLevel_St() <<", ";
        o << "FACMode_St: " << (int)sample.FACMode_St() <<", ";
        o << "FACSwitch_Rsp: " << (int)sample.FACSwitch_Rsp() <<", ";
        o << "FDeiceDefrost_Rsp: " << (int)sample.FDeiceDefrost_Rsp() <<", ";
        o << "FLeftTempSet_St: " << (int)sample.FLeftTempSet_St() <<", ";
        o << "FRightTempSet_St: " << (int)sample.FRightTempSet_St() <<", ";
        o << "FTempAreaSync_St: " << (int)sample.FTempAreaSync_St() <<", ";
        o << "FAcCoolOrHeatOrVent_St: " << (int)sample.FAcCoolOrHeatOrVent_St() <<", ";
        o << "ACOperateMode_St: " << (int)sample.ACOperateMode_St() <<", ";
        o << "FACAuto_Rsp: " << (int)sample.FACAuto_Rsp() <<", ";
        o << "FACAirFlowLevelAuto_St: " << (int)sample.FACAirFlowLevelAuto_St() <<", ";
        o << "FACAirFlowModeAuto_St: " << (int)sample.FACAirFlowModeAuto_St() <<", ";
        o << "FACCoolOrHeatOrVentAuto_St: " << (int)sample.FACCoolOrHeatOrVentAuto_St() <<", ";
        o << "EnvirTemp_Val: " << (int)sample.EnvirTemp_Val() <<", ";
        o << "FragSwitchEN_Rsp: " << (int)sample.FragSwitchEN_Rsp() <<", ";
        o << "FragConcLevel_Rsp: " << (int)sample.FragConcLevel_Rsp() <<", ";
        o << "FragChannel1Switch_St: " << (int)sample.FragChannel1Switch_St() <<", ";
        o << "FragChannel2Switch_St: " << (int)sample.FragChannel2Switch_St() <<", ";
        o << "FragChannel3Switch_St: " << (int)sample.FragChannel3Switch_St() <<", ";
        o << "FragChannelType: " << (int)sample.FragChannelType() <<", ";
        o << "FragChannelIndex: " << (int)sample.FragChannelIndex() <<", ";
        o << "FragChannel1Life: " << sample.FragChannel1Life()<<", ";
        o << "FragChannel2Life: " << sample.FragChannel2Life()<<", ";
        o << "FragChannel3Life: " << sample.FragChannel3Life()<<", ";
        o << "IONSet_St: " << (int)sample.IONSet_St() <<", ";
        o << "PM25Set_St: " << (int)sample.PM25Set_St() <<", ";
        o << "PM25Trigger_St: " << (int)sample.PM25Trigger_St() <<", ";
        o << "PM25CarConc: " << sample.PM25CarConc()<<", ";
        o << "AQSSet_St: " << (int)sample.AQSSet_St() <<", ";
        o << "AQSTrigger_St: " << (int)sample.AQSTrigger_St() <<", ";
        o << "AQSAirQuality_Val: " << (int)sample.AQSAirQuality_Val() <<", ";
        o << "InFilterLifeRemind: " << (int)sample.InFilterLifeRemind() <<", ";
        o << "OutsideFilterLifeRemind: " << (int)sample.OutsideFilterLifeRemind() <<", ";
        o << "FLeftAirOutletMode_St: " << (int)sample.FLeftAirOutletMode_St() <<", ";
        o << "FRightAirOutletMode_St: " << (int)sample.FRightAirOutletMode_St() <<", ";
        o << "OLMFLAirOutletSwitch_Rsp: " << (int)sample.OLMFLAirOutletSwitch_Rsp() <<", ";
        o << "OLMLCAirOutletSwitch_Rsp: " << (int)sample.OLMLCAirOutletSwitch_Rsp() <<", ";
        o << "OLMRCAirOutletSwitch_Rsp: " << (int)sample.OLMRCAirOutletSwitch_Rsp() <<", ";
        o << "OLMFRAirOutletSwitch_Rsp: " << (int)sample.OLMFRAirOutletSwitch_Rsp() <<", ";
        o << "OLMFLMotorErrSt: " << (int)sample.OLMFLMotorErrSt() <<", ";
        o << "OLMLCMotorErrSt: " << (int)sample.OLMLCMotorErrSt() <<", ";
        o << "OLMRCMotorErrSt: " << (int)sample.OLMRCMotorErrSt() <<", ";
        o << "OLMFRMotorErrSt: " << (int)sample.OLMFRMotorErrSt() <<", ";
        o << "OLMFLAirOutletLeftRightAngle_Rsp: " << (int)sample.OLMFLAirOutletLeftRightAngle_Rsp() <<", ";
        o << "OLMFLAirOutletUpDownAngle_Rsp: " << (int)sample.OLMFLAirOutletUpDownAngle_Rsp() <<", ";
        o << "OLMLCAirOutletUpDownAngle_Rsp: " << (int)sample.OLMLCAirOutletUpDownAngle_Rsp() <<", ";
        o << "OLMLCAirOutletLeftRightAngle_Rsp: " << (int)sample.OLMLCAirOutletLeftRightAngle_Rsp() <<", ";
        o << "OLMRCAirOutletLeftRightAngle_Rsp: " << (int)sample.OLMRCAirOutletLeftRightAngle_Rsp() <<", ";
        o << "OLMRCAirOutletUpDownAngle_Rsp: " << (int)sample.OLMRCAirOutletUpDownAngle_Rsp() <<", ";
        o << "OLMFRAirOutletUpDownAngle_Rsp: " << (int)sample.OLMFRAirOutletUpDownAngle_Rsp() <<", ";
        o << "OLMFRAirOutletLeftRightAngle_Rsp: " << (int)sample.OLMFRAirOutletLeftRightAngle_Rsp()  ;
        o <<"]";
        return o;
    }

    // ---- Thermal_St_struct: 

    Thermal_St_struct::Thermal_St_struct() :
        m_HeatLiquidtLackWarn_St_ (0) ,
        m_ThermalLiquidLackWarn_St_ (0) ,
        m_RefrigerantCheckRemind_ (0) ,
        m_FACLimit_St_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    Thermal_St_struct::Thermal_St_struct (
        uint8_t HeatLiquidtLackWarn_St,
        uint8_t ThermalLiquidLackWarn_St,
        uint8_t RefrigerantCheckRemind,
        uint8_t FACLimit_St,
        const std::string& CtrlSource)
        :
            m_HeatLiquidtLackWarn_St_( HeatLiquidtLackWarn_St ),
            m_ThermalLiquidLackWarn_St_( ThermalLiquidLackWarn_St ),
            m_RefrigerantCheckRemind_( RefrigerantCheckRemind ),
            m_FACLimit_St_( FACLimit_St ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    Thermal_St_struct::Thermal_St_struct(Thermal_St_struct&& other_) OMG_NOEXCEPT  :m_HeatLiquidtLackWarn_St_ (std::move(other_.m_HeatLiquidtLackWarn_St_))
    ,
    m_ThermalLiquidLackWarn_St_ (std::move(other_.m_ThermalLiquidLackWarn_St_))
    ,
    m_RefrigerantCheckRemind_ (std::move(other_.m_RefrigerantCheckRemind_))
    ,
    m_FACLimit_St_ (std::move(other_.m_FACLimit_St_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    Thermal_St_struct& Thermal_St_struct::operator=(Thermal_St_struct&&  other_) OMG_NOEXCEPT {
        Thermal_St_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void Thermal_St_struct::swap(Thermal_St_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_HeatLiquidtLackWarn_St_, other_.m_HeatLiquidtLackWarn_St_);
        swap(m_ThermalLiquidLackWarn_St_, other_.m_ThermalLiquidLackWarn_St_);
        swap(m_RefrigerantCheckRemind_, other_.m_RefrigerantCheckRemind_);
        swap(m_FACLimit_St_, other_.m_FACLimit_St_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool Thermal_St_struct::operator == (const Thermal_St_struct& other_) const {
        if (m_HeatLiquidtLackWarn_St_ != other_.m_HeatLiquidtLackWarn_St_) {
            return false;
        }
        if (m_ThermalLiquidLackWarn_St_ != other_.m_ThermalLiquidLackWarn_St_) {
            return false;
        }
        if (m_RefrigerantCheckRemind_ != other_.m_RefrigerantCheckRemind_) {
            return false;
        }
        if (m_FACLimit_St_ != other_.m_FACLimit_St_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool Thermal_St_struct::operator != (const Thermal_St_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const Thermal_St_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "HeatLiquidtLackWarn_St: " << (int)sample.HeatLiquidtLackWarn_St() <<", ";
        o << "ThermalLiquidLackWarn_St: " << (int)sample.ThermalLiquidLackWarn_St() <<", ";
        o << "RefrigerantCheckRemind: " << (int)sample.RefrigerantCheckRemind() <<", ";
        o << "FACLimit_St: " << (int)sample.FACLimit_St() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- AC_Ctrl_SOA_struct: 

    AC_Ctrl_SOA_struct::AC_Ctrl_SOA_struct() :
        m_AC_Ctrl_SOA_u8_ (0)  {
    }   

    AC_Ctrl_SOA_struct::AC_Ctrl_SOA_struct (
        uint8_t AC_Ctrl_SOA_u8)
        :
            m_AC_Ctrl_SOA_u8_( AC_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    AC_Ctrl_SOA_struct::AC_Ctrl_SOA_struct(AC_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_AC_Ctrl_SOA_u8_ (std::move(other_.m_AC_Ctrl_SOA_u8_))
    {
    } 

    AC_Ctrl_SOA_struct& AC_Ctrl_SOA_struct::operator=(AC_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        AC_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void AC_Ctrl_SOA_struct::swap(AC_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_AC_Ctrl_SOA_u8_, other_.m_AC_Ctrl_SOA_u8_);
    }  

    bool AC_Ctrl_SOA_struct::operator == (const AC_Ctrl_SOA_struct& other_) const {
        if (m_AC_Ctrl_SOA_u8_ != other_.m_AC_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool AC_Ctrl_SOA_struct::operator != (const AC_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const AC_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "AC_Ctrl_SOA_u8: " << (int)sample.AC_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

} // namespace EnergyDomain  

namespace Temporary {

    // ---- GeneralVehSt_Struct: 

    GeneralVehSt_Struct::GeneralVehSt_Struct() :
        m_SOCDisplay_Val_ (0) ,
        m_DCCharge_St_ (0) ,
        m_ACCharge_St_ (0) ,
        m_FLSeatOcp_St_ (0) ,
        m_ActlGear_St_ (0) ,
        m_ActlGearVaild_St_ (0) ,
        m_Ready_St_ (0) ,
        m_DrvrSeatBeltValid_St_ (0) ,
        m_DrvrSeatBelt_St_ (0) ,
        m_VehSpdValid_St_ (0) ,
        m_VehSpd_Val_ (0) ,
        m_EPB_St_ (0)  {
    }   

    GeneralVehSt_Struct::GeneralVehSt_Struct (
        uint16_t SOCDisplay_Val,
        uint8_t DCCharge_St,
        uint8_t ACCharge_St,
        uint8_t FLSeatOcp_St,
        uint8_t ActlGear_St,
        uint8_t ActlGearVaild_St,
        uint8_t Ready_St,
        uint8_t DrvrSeatBeltValid_St,
        uint8_t DrvrSeatBelt_St,
        uint8_t VehSpdValid_St,
        uint16_t VehSpd_Val,
        uint8_t EPB_St)
        :
            m_SOCDisplay_Val_( SOCDisplay_Val ),
            m_DCCharge_St_( DCCharge_St ),
            m_ACCharge_St_( ACCharge_St ),
            m_FLSeatOcp_St_( FLSeatOcp_St ),
            m_ActlGear_St_( ActlGear_St ),
            m_ActlGearVaild_St_( ActlGearVaild_St ),
            m_Ready_St_( Ready_St ),
            m_DrvrSeatBeltValid_St_( DrvrSeatBeltValid_St ),
            m_DrvrSeatBelt_St_( DrvrSeatBelt_St ),
            m_VehSpdValid_St_( VehSpdValid_St ),
            m_VehSpd_Val_( VehSpd_Val ),
            m_EPB_St_( EPB_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    GeneralVehSt_Struct::GeneralVehSt_Struct(GeneralVehSt_Struct&& other_) OMG_NOEXCEPT  :m_SOCDisplay_Val_ (std::move(other_.m_SOCDisplay_Val_))
    ,
    m_DCCharge_St_ (std::move(other_.m_DCCharge_St_))
    ,
    m_ACCharge_St_ (std::move(other_.m_ACCharge_St_))
    ,
    m_FLSeatOcp_St_ (std::move(other_.m_FLSeatOcp_St_))
    ,
    m_ActlGear_St_ (std::move(other_.m_ActlGear_St_))
    ,
    m_ActlGearVaild_St_ (std::move(other_.m_ActlGearVaild_St_))
    ,
    m_Ready_St_ (std::move(other_.m_Ready_St_))
    ,
    m_DrvrSeatBeltValid_St_ (std::move(other_.m_DrvrSeatBeltValid_St_))
    ,
    m_DrvrSeatBelt_St_ (std::move(other_.m_DrvrSeatBelt_St_))
    ,
    m_VehSpdValid_St_ (std::move(other_.m_VehSpdValid_St_))
    ,
    m_VehSpd_Val_ (std::move(other_.m_VehSpd_Val_))
    ,
    m_EPB_St_ (std::move(other_.m_EPB_St_))
    {
    } 

    GeneralVehSt_Struct& GeneralVehSt_Struct::operator=(GeneralVehSt_Struct&&  other_) OMG_NOEXCEPT {
        GeneralVehSt_Struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void GeneralVehSt_Struct::swap(GeneralVehSt_Struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SOCDisplay_Val_, other_.m_SOCDisplay_Val_);
        swap(m_DCCharge_St_, other_.m_DCCharge_St_);
        swap(m_ACCharge_St_, other_.m_ACCharge_St_);
        swap(m_FLSeatOcp_St_, other_.m_FLSeatOcp_St_);
        swap(m_ActlGear_St_, other_.m_ActlGear_St_);
        swap(m_ActlGearVaild_St_, other_.m_ActlGearVaild_St_);
        swap(m_Ready_St_, other_.m_Ready_St_);
        swap(m_DrvrSeatBeltValid_St_, other_.m_DrvrSeatBeltValid_St_);
        swap(m_DrvrSeatBelt_St_, other_.m_DrvrSeatBelt_St_);
        swap(m_VehSpdValid_St_, other_.m_VehSpdValid_St_);
        swap(m_VehSpd_Val_, other_.m_VehSpd_Val_);
        swap(m_EPB_St_, other_.m_EPB_St_);
    }  

    bool GeneralVehSt_Struct::operator == (const GeneralVehSt_Struct& other_) const {
        if (m_SOCDisplay_Val_ != other_.m_SOCDisplay_Val_) {
            return false;
        }
        if (m_DCCharge_St_ != other_.m_DCCharge_St_) {
            return false;
        }
        if (m_ACCharge_St_ != other_.m_ACCharge_St_) {
            return false;
        }
        if (m_FLSeatOcp_St_ != other_.m_FLSeatOcp_St_) {
            return false;
        }
        if (m_ActlGear_St_ != other_.m_ActlGear_St_) {
            return false;
        }
        if (m_ActlGearVaild_St_ != other_.m_ActlGearVaild_St_) {
            return false;
        }
        if (m_Ready_St_ != other_.m_Ready_St_) {
            return false;
        }
        if (m_DrvrSeatBeltValid_St_ != other_.m_DrvrSeatBeltValid_St_) {
            return false;
        }
        if (m_DrvrSeatBelt_St_ != other_.m_DrvrSeatBelt_St_) {
            return false;
        }
        if (m_VehSpdValid_St_ != other_.m_VehSpdValid_St_) {
            return false;
        }
        if (m_VehSpd_Val_ != other_.m_VehSpd_Val_) {
            return false;
        }
        if (m_EPB_St_ != other_.m_EPB_St_) {
            return false;
        }
        return true;
    }
    bool GeneralVehSt_Struct::operator != (const GeneralVehSt_Struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const GeneralVehSt_Struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SOCDisplay_Val: " << sample.SOCDisplay_Val()<<", ";
        o << "DCCharge_St: " << (int)sample.DCCharge_St() <<", ";
        o << "ACCharge_St: " << (int)sample.ACCharge_St() <<", ";
        o << "FLSeatOcp_St: " << (int)sample.FLSeatOcp_St() <<", ";
        o << "ActlGear_St: " << (int)sample.ActlGear_St() <<", ";
        o << "ActlGearVaild_St: " << (int)sample.ActlGearVaild_St() <<", ";
        o << "Ready_St: " << (int)sample.Ready_St() <<", ";
        o << "DrvrSeatBeltValid_St: " << (int)sample.DrvrSeatBeltValid_St() <<", ";
        o << "DrvrSeatBelt_St: " << (int)sample.DrvrSeatBelt_St() <<", ";
        o << "VehSpdValid_St: " << (int)sample.VehSpdValid_St() <<", ";
        o << "VehSpd_Val: " << sample.VehSpd_Val()<<", ";
        o << "EPB_St: " << (int)sample.EPB_St()  ;
        o <<"]";
        return o;
    }

    // ---- PTHMI_struct: 

    PTHMI_struct::PTHMI_struct() :
        m_OBCACChrgCnctor_St_ (0) ,
        m_OBCACSocketLock_St_ (0) ,
        m_AbnormalShiftInfo_ (0) ,
        m_DriveConflictRemindInfo_ (0) ,
        m_Shift_Err_ (0) ,
        m_HVOffConfirm_Req_ (0) ,
        m_LimpHomeRmnd_St_ (0) ,
        m_LowVoltSys_Err_ (0) ,
        m_LowVoltSysWarnStop_St_ (0) ,
        m_Motorovertemp_St_ (0) ,
        m_PTFaultLgtClr_St_ (0) ,
        m_PTHMI_Req_ (0u) ,
        m_PTThmlLiquidLackWarn_St_ (0) ,
        m_PullOver_St_ (0) ,
        m_RegenAvail_St_ (0) ,
        m_ServiceReminder_St_ (0) ,
        m_StdSenarioMileage_Val_ (0) ,
        m_ThmlRunawayWarn_St_ (0) ,
        m_TractionModeAvail_St_ (0) ,
        m_TractionModeRemaind_St_ (0) ,
        m_TractionModeSet_Rsp_ (0) ,
        m_ACCharge_St_ (0) ,
        m_CellOverTemp_St_ (0) ,
        m_ChrgDischrgCnct_St_ (0) ,
        m_DCCharge_St_ (0) ,
        m_FastChrgCnctor_St_ (0)  {
    }   

    PTHMI_struct::PTHMI_struct (
        uint8_t OBCACChrgCnctor_St,
        uint8_t OBCACSocketLock_St,
        uint8_t AbnormalShiftInfo,
        uint8_t DriveConflictRemindInfo,
        uint8_t Shift_Err,
        uint8_t HVOffConfirm_Req,
        uint8_t LimpHomeRmnd_St,
        uint8_t LowVoltSys_Err,
        uint8_t LowVoltSysWarnStop_St,
        uint8_t Motorovertemp_St,
        uint8_t PTFaultLgtClr_St,
        uint32_t PTHMI_Req,
        uint8_t PTThmlLiquidLackWarn_St,
        uint8_t PullOver_St,
        uint8_t RegenAvail_St,
        uint8_t ServiceReminder_St,
        uint16_t StdSenarioMileage_Val,
        uint8_t ThmlRunawayWarn_St,
        uint8_t TractionModeAvail_St,
        uint8_t TractionModeRemaind_St,
        uint8_t TractionModeSet_Rsp,
        uint8_t ACCharge_St,
        uint8_t CellOverTemp_St,
        uint8_t ChrgDischrgCnct_St,
        uint8_t DCCharge_St,
        uint8_t FastChrgCnctor_St)
        :
            m_OBCACChrgCnctor_St_( OBCACChrgCnctor_St ),
            m_OBCACSocketLock_St_( OBCACSocketLock_St ),
            m_AbnormalShiftInfo_( AbnormalShiftInfo ),
            m_DriveConflictRemindInfo_( DriveConflictRemindInfo ),
            m_Shift_Err_( Shift_Err ),
            m_HVOffConfirm_Req_( HVOffConfirm_Req ),
            m_LimpHomeRmnd_St_( LimpHomeRmnd_St ),
            m_LowVoltSys_Err_( LowVoltSys_Err ),
            m_LowVoltSysWarnStop_St_( LowVoltSysWarnStop_St ),
            m_Motorovertemp_St_( Motorovertemp_St ),
            m_PTFaultLgtClr_St_( PTFaultLgtClr_St ),
            m_PTHMI_Req_( PTHMI_Req ),
            m_PTThmlLiquidLackWarn_St_( PTThmlLiquidLackWarn_St ),
            m_PullOver_St_( PullOver_St ),
            m_RegenAvail_St_( RegenAvail_St ),
            m_ServiceReminder_St_( ServiceReminder_St ),
            m_StdSenarioMileage_Val_( StdSenarioMileage_Val ),
            m_ThmlRunawayWarn_St_( ThmlRunawayWarn_St ),
            m_TractionModeAvail_St_( TractionModeAvail_St ),
            m_TractionModeRemaind_St_( TractionModeRemaind_St ),
            m_TractionModeSet_Rsp_( TractionModeSet_Rsp ),
            m_ACCharge_St_( ACCharge_St ),
            m_CellOverTemp_St_( CellOverTemp_St ),
            m_ChrgDischrgCnct_St_( ChrgDischrgCnct_St ),
            m_DCCharge_St_( DCCharge_St ),
            m_FastChrgCnctor_St_( FastChrgCnctor_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    PTHMI_struct::PTHMI_struct(PTHMI_struct&& other_) OMG_NOEXCEPT  :m_OBCACChrgCnctor_St_ (std::move(other_.m_OBCACChrgCnctor_St_))
    ,
    m_OBCACSocketLock_St_ (std::move(other_.m_OBCACSocketLock_St_))
    ,
    m_AbnormalShiftInfo_ (std::move(other_.m_AbnormalShiftInfo_))
    ,
    m_DriveConflictRemindInfo_ (std::move(other_.m_DriveConflictRemindInfo_))
    ,
    m_Shift_Err_ (std::move(other_.m_Shift_Err_))
    ,
    m_HVOffConfirm_Req_ (std::move(other_.m_HVOffConfirm_Req_))
    ,
    m_LimpHomeRmnd_St_ (std::move(other_.m_LimpHomeRmnd_St_))
    ,
    m_LowVoltSys_Err_ (std::move(other_.m_LowVoltSys_Err_))
    ,
    m_LowVoltSysWarnStop_St_ (std::move(other_.m_LowVoltSysWarnStop_St_))
    ,
    m_Motorovertemp_St_ (std::move(other_.m_Motorovertemp_St_))
    ,
    m_PTFaultLgtClr_St_ (std::move(other_.m_PTFaultLgtClr_St_))
    ,
    m_PTHMI_Req_ (std::move(other_.m_PTHMI_Req_))
    ,
    m_PTThmlLiquidLackWarn_St_ (std::move(other_.m_PTThmlLiquidLackWarn_St_))
    ,
    m_PullOver_St_ (std::move(other_.m_PullOver_St_))
    ,
    m_RegenAvail_St_ (std::move(other_.m_RegenAvail_St_))
    ,
    m_ServiceReminder_St_ (std::move(other_.m_ServiceReminder_St_))
    ,
    m_StdSenarioMileage_Val_ (std::move(other_.m_StdSenarioMileage_Val_))
    ,
    m_ThmlRunawayWarn_St_ (std::move(other_.m_ThmlRunawayWarn_St_))
    ,
    m_TractionModeAvail_St_ (std::move(other_.m_TractionModeAvail_St_))
    ,
    m_TractionModeRemaind_St_ (std::move(other_.m_TractionModeRemaind_St_))
    ,
    m_TractionModeSet_Rsp_ (std::move(other_.m_TractionModeSet_Rsp_))
    ,
    m_ACCharge_St_ (std::move(other_.m_ACCharge_St_))
    ,
    m_CellOverTemp_St_ (std::move(other_.m_CellOverTemp_St_))
    ,
    m_ChrgDischrgCnct_St_ (std::move(other_.m_ChrgDischrgCnct_St_))
    ,
    m_DCCharge_St_ (std::move(other_.m_DCCharge_St_))
    ,
    m_FastChrgCnctor_St_ (std::move(other_.m_FastChrgCnctor_St_))
    {
    } 

    PTHMI_struct& PTHMI_struct::operator=(PTHMI_struct&&  other_) OMG_NOEXCEPT {
        PTHMI_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void PTHMI_struct::swap(PTHMI_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_OBCACChrgCnctor_St_, other_.m_OBCACChrgCnctor_St_);
        swap(m_OBCACSocketLock_St_, other_.m_OBCACSocketLock_St_);
        swap(m_AbnormalShiftInfo_, other_.m_AbnormalShiftInfo_);
        swap(m_DriveConflictRemindInfo_, other_.m_DriveConflictRemindInfo_);
        swap(m_Shift_Err_, other_.m_Shift_Err_);
        swap(m_HVOffConfirm_Req_, other_.m_HVOffConfirm_Req_);
        swap(m_LimpHomeRmnd_St_, other_.m_LimpHomeRmnd_St_);
        swap(m_LowVoltSys_Err_, other_.m_LowVoltSys_Err_);
        swap(m_LowVoltSysWarnStop_St_, other_.m_LowVoltSysWarnStop_St_);
        swap(m_Motorovertemp_St_, other_.m_Motorovertemp_St_);
        swap(m_PTFaultLgtClr_St_, other_.m_PTFaultLgtClr_St_);
        swap(m_PTHMI_Req_, other_.m_PTHMI_Req_);
        swap(m_PTThmlLiquidLackWarn_St_, other_.m_PTThmlLiquidLackWarn_St_);
        swap(m_PullOver_St_, other_.m_PullOver_St_);
        swap(m_RegenAvail_St_, other_.m_RegenAvail_St_);
        swap(m_ServiceReminder_St_, other_.m_ServiceReminder_St_);
        swap(m_StdSenarioMileage_Val_, other_.m_StdSenarioMileage_Val_);
        swap(m_ThmlRunawayWarn_St_, other_.m_ThmlRunawayWarn_St_);
        swap(m_TractionModeAvail_St_, other_.m_TractionModeAvail_St_);
        swap(m_TractionModeRemaind_St_, other_.m_TractionModeRemaind_St_);
        swap(m_TractionModeSet_Rsp_, other_.m_TractionModeSet_Rsp_);
        swap(m_ACCharge_St_, other_.m_ACCharge_St_);
        swap(m_CellOverTemp_St_, other_.m_CellOverTemp_St_);
        swap(m_ChrgDischrgCnct_St_, other_.m_ChrgDischrgCnct_St_);
        swap(m_DCCharge_St_, other_.m_DCCharge_St_);
        swap(m_FastChrgCnctor_St_, other_.m_FastChrgCnctor_St_);
    }  

    bool PTHMI_struct::operator == (const PTHMI_struct& other_) const {
        if (m_OBCACChrgCnctor_St_ != other_.m_OBCACChrgCnctor_St_) {
            return false;
        }
        if (m_OBCACSocketLock_St_ != other_.m_OBCACSocketLock_St_) {
            return false;
        }
        if (m_AbnormalShiftInfo_ != other_.m_AbnormalShiftInfo_) {
            return false;
        }
        if (m_DriveConflictRemindInfo_ != other_.m_DriveConflictRemindInfo_) {
            return false;
        }
        if (m_Shift_Err_ != other_.m_Shift_Err_) {
            return false;
        }
        if (m_HVOffConfirm_Req_ != other_.m_HVOffConfirm_Req_) {
            return false;
        }
        if (m_LimpHomeRmnd_St_ != other_.m_LimpHomeRmnd_St_) {
            return false;
        }
        if (m_LowVoltSys_Err_ != other_.m_LowVoltSys_Err_) {
            return false;
        }
        if (m_LowVoltSysWarnStop_St_ != other_.m_LowVoltSysWarnStop_St_) {
            return false;
        }
        if (m_Motorovertemp_St_ != other_.m_Motorovertemp_St_) {
            return false;
        }
        if (m_PTFaultLgtClr_St_ != other_.m_PTFaultLgtClr_St_) {
            return false;
        }
        if (m_PTHMI_Req_ != other_.m_PTHMI_Req_) {
            return false;
        }
        if (m_PTThmlLiquidLackWarn_St_ != other_.m_PTThmlLiquidLackWarn_St_) {
            return false;
        }
        if (m_PullOver_St_ != other_.m_PullOver_St_) {
            return false;
        }
        if (m_RegenAvail_St_ != other_.m_RegenAvail_St_) {
            return false;
        }
        if (m_ServiceReminder_St_ != other_.m_ServiceReminder_St_) {
            return false;
        }
        if (m_StdSenarioMileage_Val_ != other_.m_StdSenarioMileage_Val_) {
            return false;
        }
        if (m_ThmlRunawayWarn_St_ != other_.m_ThmlRunawayWarn_St_) {
            return false;
        }
        if (m_TractionModeAvail_St_ != other_.m_TractionModeAvail_St_) {
            return false;
        }
        if (m_TractionModeRemaind_St_ != other_.m_TractionModeRemaind_St_) {
            return false;
        }
        if (m_TractionModeSet_Rsp_ != other_.m_TractionModeSet_Rsp_) {
            return false;
        }
        if (m_ACCharge_St_ != other_.m_ACCharge_St_) {
            return false;
        }
        if (m_CellOverTemp_St_ != other_.m_CellOverTemp_St_) {
            return false;
        }
        if (m_ChrgDischrgCnct_St_ != other_.m_ChrgDischrgCnct_St_) {
            return false;
        }
        if (m_DCCharge_St_ != other_.m_DCCharge_St_) {
            return false;
        }
        if (m_FastChrgCnctor_St_ != other_.m_FastChrgCnctor_St_) {
            return false;
        }
        return true;
    }
    bool PTHMI_struct::operator != (const PTHMI_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const PTHMI_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "OBCACChrgCnctor_St: " << (int)sample.OBCACChrgCnctor_St() <<", ";
        o << "OBCACSocketLock_St: " << (int)sample.OBCACSocketLock_St() <<", ";
        o << "AbnormalShiftInfo: " << (int)sample.AbnormalShiftInfo() <<", ";
        o << "DriveConflictRemindInfo: " << (int)sample.DriveConflictRemindInfo() <<", ";
        o << "Shift_Err: " << (int)sample.Shift_Err() <<", ";
        o << "HVOffConfirm_Req: " << (int)sample.HVOffConfirm_Req() <<", ";
        o << "LimpHomeRmnd_St: " << (int)sample.LimpHomeRmnd_St() <<", ";
        o << "LowVoltSys_Err: " << (int)sample.LowVoltSys_Err() <<", ";
        o << "LowVoltSysWarnStop_St: " << (int)sample.LowVoltSysWarnStop_St() <<", ";
        o << "Motorovertemp_St: " << (int)sample.Motorovertemp_St() <<", ";
        o << "PTFaultLgtClr_St: " << (int)sample.PTFaultLgtClr_St() <<", ";
        o << "PTHMI_Req: " << sample.PTHMI_Req()<<", ";
        o << "PTThmlLiquidLackWarn_St: " << (int)sample.PTThmlLiquidLackWarn_St() <<", ";
        o << "PullOver_St: " << (int)sample.PullOver_St() <<", ";
        o << "RegenAvail_St: " << (int)sample.RegenAvail_St() <<", ";
        o << "ServiceReminder_St: " << (int)sample.ServiceReminder_St() <<", ";
        o << "StdSenarioMileage_Val: " << sample.StdSenarioMileage_Val()<<", ";
        o << "ThmlRunawayWarn_St: " << (int)sample.ThmlRunawayWarn_St() <<", ";
        o << "TractionModeAvail_St: " << (int)sample.TractionModeAvail_St() <<", ";
        o << "TractionModeRemaind_St: " << (int)sample.TractionModeRemaind_St() <<", ";
        o << "TractionModeSet_Rsp: " << (int)sample.TractionModeSet_Rsp() <<", ";
        o << "ACCharge_St: " << (int)sample.ACCharge_St() <<", ";
        o << "CellOverTemp_St: " << (int)sample.CellOverTemp_St() <<", ";
        o << "ChrgDischrgCnct_St: " << (int)sample.ChrgDischrgCnct_St() <<", ";
        o << "DCCharge_St: " << (int)sample.DCCharge_St() <<", ";
        o << "FastChrgCnctor_St: " << (int)sample.FastChrgCnctor_St()  ;
        o <<"]";
        return o;
    }

    // ---- CHSHMI_struct: 

    CHSHMI_struct::CHSHMI_struct() :
        m_AirbagWarnLamp_St_ (0) ,
        m_EPSSystem_Err_ (0) ,
        m_ABSIntv_St_ (0) ,
        m_ABS_Err_ (0) ,
        m_EBDIntv_St_ (0) ,
        m_EBD_Err_ (0) ,
        m_BrakeFluidLvl_St_ (0) ,
        m_BrakePedal_St_ (0) ,
        m_InputRodStroke_St_ (0) ,
        m_InputRodStroke_Val_ (0) ,
        m_EPBFunctionLamp_St_ (0) ,
        m_EPBFailLamp_St_ (0) ,
        m_CapacityLimitWarn_UI_ (0) ,
        m_OperationReminder_UI_ (0) ,
        m_BU_CapacityLimitWarn_UI_ (0) ,
        m_BU_OperationReminder_UI_ (0) ,
        m_BU_EPBFunctionLamp_St_ (0) ,
        m_BU_EPBFailLamp_St_ (0) ,
        m_BU_EPBHardSwitch_St_ (0)  {
    }   

    CHSHMI_struct::CHSHMI_struct (
        uint8_t AirbagWarnLamp_St,
        uint8_t EPSSystem_Err,
        uint8_t ABSIntv_St,
        uint8_t ABS_Err,
        uint8_t EBDIntv_St,
        uint8_t EBD_Err,
        uint8_t BrakeFluidLvl_St,
        uint8_t BrakePedal_St,
        uint8_t InputRodStroke_St,
        uint16_t InputRodStroke_Val,
        uint8_t EPBFunctionLamp_St,
        uint8_t EPBFailLamp_St,
        uint8_t CapacityLimitWarn_UI,
        uint8_t OperationReminder_UI,
        uint8_t BU_CapacityLimitWarn_UI,
        uint8_t BU_OperationReminder_UI,
        uint8_t BU_EPBFunctionLamp_St,
        uint8_t BU_EPBFailLamp_St,
        uint8_t BU_EPBHardSwitch_St)
        :
            m_AirbagWarnLamp_St_( AirbagWarnLamp_St ),
            m_EPSSystem_Err_( EPSSystem_Err ),
            m_ABSIntv_St_( ABSIntv_St ),
            m_ABS_Err_( ABS_Err ),
            m_EBDIntv_St_( EBDIntv_St ),
            m_EBD_Err_( EBD_Err ),
            m_BrakeFluidLvl_St_( BrakeFluidLvl_St ),
            m_BrakePedal_St_( BrakePedal_St ),
            m_InputRodStroke_St_( InputRodStroke_St ),
            m_InputRodStroke_Val_( InputRodStroke_Val ),
            m_EPBFunctionLamp_St_( EPBFunctionLamp_St ),
            m_EPBFailLamp_St_( EPBFailLamp_St ),
            m_CapacityLimitWarn_UI_( CapacityLimitWarn_UI ),
            m_OperationReminder_UI_( OperationReminder_UI ),
            m_BU_CapacityLimitWarn_UI_( BU_CapacityLimitWarn_UI ),
            m_BU_OperationReminder_UI_( BU_OperationReminder_UI ),
            m_BU_EPBFunctionLamp_St_( BU_EPBFunctionLamp_St ),
            m_BU_EPBFailLamp_St_( BU_EPBFailLamp_St ),
            m_BU_EPBHardSwitch_St_( BU_EPBHardSwitch_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    CHSHMI_struct::CHSHMI_struct(CHSHMI_struct&& other_) OMG_NOEXCEPT  :m_AirbagWarnLamp_St_ (std::move(other_.m_AirbagWarnLamp_St_))
    ,
    m_EPSSystem_Err_ (std::move(other_.m_EPSSystem_Err_))
    ,
    m_ABSIntv_St_ (std::move(other_.m_ABSIntv_St_))
    ,
    m_ABS_Err_ (std::move(other_.m_ABS_Err_))
    ,
    m_EBDIntv_St_ (std::move(other_.m_EBDIntv_St_))
    ,
    m_EBD_Err_ (std::move(other_.m_EBD_Err_))
    ,
    m_BrakeFluidLvl_St_ (std::move(other_.m_BrakeFluidLvl_St_))
    ,
    m_BrakePedal_St_ (std::move(other_.m_BrakePedal_St_))
    ,
    m_InputRodStroke_St_ (std::move(other_.m_InputRodStroke_St_))
    ,
    m_InputRodStroke_Val_ (std::move(other_.m_InputRodStroke_Val_))
    ,
    m_EPBFunctionLamp_St_ (std::move(other_.m_EPBFunctionLamp_St_))
    ,
    m_EPBFailLamp_St_ (std::move(other_.m_EPBFailLamp_St_))
    ,
    m_CapacityLimitWarn_UI_ (std::move(other_.m_CapacityLimitWarn_UI_))
    ,
    m_OperationReminder_UI_ (std::move(other_.m_OperationReminder_UI_))
    ,
    m_BU_CapacityLimitWarn_UI_ (std::move(other_.m_BU_CapacityLimitWarn_UI_))
    ,
    m_BU_OperationReminder_UI_ (std::move(other_.m_BU_OperationReminder_UI_))
    ,
    m_BU_EPBFunctionLamp_St_ (std::move(other_.m_BU_EPBFunctionLamp_St_))
    ,
    m_BU_EPBFailLamp_St_ (std::move(other_.m_BU_EPBFailLamp_St_))
    ,
    m_BU_EPBHardSwitch_St_ (std::move(other_.m_BU_EPBHardSwitch_St_))
    {
    } 

    CHSHMI_struct& CHSHMI_struct::operator=(CHSHMI_struct&&  other_) OMG_NOEXCEPT {
        CHSHMI_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void CHSHMI_struct::swap(CHSHMI_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_AirbagWarnLamp_St_, other_.m_AirbagWarnLamp_St_);
        swap(m_EPSSystem_Err_, other_.m_EPSSystem_Err_);
        swap(m_ABSIntv_St_, other_.m_ABSIntv_St_);
        swap(m_ABS_Err_, other_.m_ABS_Err_);
        swap(m_EBDIntv_St_, other_.m_EBDIntv_St_);
        swap(m_EBD_Err_, other_.m_EBD_Err_);
        swap(m_BrakeFluidLvl_St_, other_.m_BrakeFluidLvl_St_);
        swap(m_BrakePedal_St_, other_.m_BrakePedal_St_);
        swap(m_InputRodStroke_St_, other_.m_InputRodStroke_St_);
        swap(m_InputRodStroke_Val_, other_.m_InputRodStroke_Val_);
        swap(m_EPBFunctionLamp_St_, other_.m_EPBFunctionLamp_St_);
        swap(m_EPBFailLamp_St_, other_.m_EPBFailLamp_St_);
        swap(m_CapacityLimitWarn_UI_, other_.m_CapacityLimitWarn_UI_);
        swap(m_OperationReminder_UI_, other_.m_OperationReminder_UI_);
        swap(m_BU_CapacityLimitWarn_UI_, other_.m_BU_CapacityLimitWarn_UI_);
        swap(m_BU_OperationReminder_UI_, other_.m_BU_OperationReminder_UI_);
        swap(m_BU_EPBFunctionLamp_St_, other_.m_BU_EPBFunctionLamp_St_);
        swap(m_BU_EPBFailLamp_St_, other_.m_BU_EPBFailLamp_St_);
        swap(m_BU_EPBHardSwitch_St_, other_.m_BU_EPBHardSwitch_St_);
    }  

    bool CHSHMI_struct::operator == (const CHSHMI_struct& other_) const {
        if (m_AirbagWarnLamp_St_ != other_.m_AirbagWarnLamp_St_) {
            return false;
        }
        if (m_EPSSystem_Err_ != other_.m_EPSSystem_Err_) {
            return false;
        }
        if (m_ABSIntv_St_ != other_.m_ABSIntv_St_) {
            return false;
        }
        if (m_ABS_Err_ != other_.m_ABS_Err_) {
            return false;
        }
        if (m_EBDIntv_St_ != other_.m_EBDIntv_St_) {
            return false;
        }
        if (m_EBD_Err_ != other_.m_EBD_Err_) {
            return false;
        }
        if (m_BrakeFluidLvl_St_ != other_.m_BrakeFluidLvl_St_) {
            return false;
        }
        if (m_BrakePedal_St_ != other_.m_BrakePedal_St_) {
            return false;
        }
        if (m_InputRodStroke_St_ != other_.m_InputRodStroke_St_) {
            return false;
        }
        if (m_InputRodStroke_Val_ != other_.m_InputRodStroke_Val_) {
            return false;
        }
        if (m_EPBFunctionLamp_St_ != other_.m_EPBFunctionLamp_St_) {
            return false;
        }
        if (m_EPBFailLamp_St_ != other_.m_EPBFailLamp_St_) {
            return false;
        }
        if (m_CapacityLimitWarn_UI_ != other_.m_CapacityLimitWarn_UI_) {
            return false;
        }
        if (m_OperationReminder_UI_ != other_.m_OperationReminder_UI_) {
            return false;
        }
        if (m_BU_CapacityLimitWarn_UI_ != other_.m_BU_CapacityLimitWarn_UI_) {
            return false;
        }
        if (m_BU_OperationReminder_UI_ != other_.m_BU_OperationReminder_UI_) {
            return false;
        }
        if (m_BU_EPBFunctionLamp_St_ != other_.m_BU_EPBFunctionLamp_St_) {
            return false;
        }
        if (m_BU_EPBFailLamp_St_ != other_.m_BU_EPBFailLamp_St_) {
            return false;
        }
        if (m_BU_EPBHardSwitch_St_ != other_.m_BU_EPBHardSwitch_St_) {
            return false;
        }
        return true;
    }
    bool CHSHMI_struct::operator != (const CHSHMI_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const CHSHMI_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "AirbagWarnLamp_St: " << (int)sample.AirbagWarnLamp_St() <<", ";
        o << "EPSSystem_Err: " << (int)sample.EPSSystem_Err() <<", ";
        o << "ABSIntv_St: " << (int)sample.ABSIntv_St() <<", ";
        o << "ABS_Err: " << (int)sample.ABS_Err() <<", ";
        o << "EBDIntv_St: " << (int)sample.EBDIntv_St() <<", ";
        o << "EBD_Err: " << (int)sample.EBD_Err() <<", ";
        o << "BrakeFluidLvl_St: " << (int)sample.BrakeFluidLvl_St() <<", ";
        o << "BrakePedal_St: " << (int)sample.BrakePedal_St() <<", ";
        o << "InputRodStroke_St: " << (int)sample.InputRodStroke_St() <<", ";
        o << "InputRodStroke_Val: " << sample.InputRodStroke_Val()<<", ";
        o << "EPBFunctionLamp_St: " << (int)sample.EPBFunctionLamp_St() <<", ";
        o << "EPBFailLamp_St: " << (int)sample.EPBFailLamp_St() <<", ";
        o << "CapacityLimitWarn_UI: " << (int)sample.CapacityLimitWarn_UI() <<", ";
        o << "OperationReminder_UI: " << (int)sample.OperationReminder_UI() <<", ";
        o << "BU_CapacityLimitWarn_UI: " << (int)sample.BU_CapacityLimitWarn_UI() <<", ";
        o << "BU_OperationReminder_UI: " << (int)sample.BU_OperationReminder_UI() <<", ";
        o << "BU_EPBFunctionLamp_St: " << (int)sample.BU_EPBFunctionLamp_St() <<", ";
        o << "BU_EPBFailLamp_St: " << (int)sample.BU_EPBFailLamp_St() <<", ";
        o << "BU_EPBHardSwitch_St: " << (int)sample.BU_EPBHardSwitch_St()  ;
        o <<"]";
        return o;
    }

    // ---- WiperWash_Ctrl_Struct: 

    WiperWash_Ctrl_Struct::WiperWash_Ctrl_Struct() :
        m_Fwiper_Req_ (0) ,
        m_FMistWash_Req_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    WiperWash_Ctrl_Struct::WiperWash_Ctrl_Struct (
        uint8_t Fwiper_Req,
        uint8_t FMistWash_Req,
        const std::string& CtrlSource)
        :
            m_Fwiper_Req_( Fwiper_Req ),
            m_FMistWash_Req_( FMistWash_Req ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    WiperWash_Ctrl_Struct::WiperWash_Ctrl_Struct(WiperWash_Ctrl_Struct&& other_) OMG_NOEXCEPT  :m_Fwiper_Req_ (std::move(other_.m_Fwiper_Req_))
    ,
    m_FMistWash_Req_ (std::move(other_.m_FMistWash_Req_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    WiperWash_Ctrl_Struct& WiperWash_Ctrl_Struct::operator=(WiperWash_Ctrl_Struct&&  other_) OMG_NOEXCEPT {
        WiperWash_Ctrl_Struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void WiperWash_Ctrl_Struct::swap(WiperWash_Ctrl_Struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_Fwiper_Req_, other_.m_Fwiper_Req_);
        swap(m_FMistWash_Req_, other_.m_FMistWash_Req_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool WiperWash_Ctrl_Struct::operator == (const WiperWash_Ctrl_Struct& other_) const {
        if (m_Fwiper_Req_ != other_.m_Fwiper_Req_) {
            return false;
        }
        if (m_FMistWash_Req_ != other_.m_FMistWash_Req_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool WiperWash_Ctrl_Struct::operator != (const WiperWash_Ctrl_Struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const WiperWash_Ctrl_Struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "Fwiper_Req: " << (int)sample.Fwiper_Req() <<", ";
        o << "FMistWash_Req: " << (int)sample.FMistWash_Req() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- SN_info_string: 

    SN_info_string::SN_info_string() :
        m_SN_info_String_ ("")  {
    }   

    SN_info_string::SN_info_string (
        const std::string& SN_info_String)
        :
            m_SN_info_String_( SN_info_String ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    SN_info_string::SN_info_string(SN_info_string&& other_) OMG_NOEXCEPT  :m_SN_info_String_ (std::move(other_.m_SN_info_String_))
    {
    } 

    SN_info_string& SN_info_string::operator=(SN_info_string&&  other_) OMG_NOEXCEPT {
        SN_info_string tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void SN_info_string::swap(SN_info_string& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SN_info_String_, other_.m_SN_info_String_);
    }  

    bool SN_info_string::operator == (const SN_info_string& other_) const {
        if (m_SN_info_String_ != other_.m_SN_info_String_) {
            return false;
        }
        return true;
    }
    bool SN_info_string::operator != (const SN_info_string& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const SN_info_string& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SN_info_String: " << sample.SN_info_String() ;
        o <<"]";
        return o;
    }

} // namespace Temporary  

namespace bottomtotop {

    // ---- NMService_Set_struct: 

    NMService_Set_struct::NMService_Set_struct() :
        m_SceneID_ (0) ,
        m_SceneStateReq_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    NMService_Set_struct::NMService_Set_struct (
        uint16_t SceneID,
        uint8_t SceneStateReq,
        const std::string& CtrlSource)
        :
            m_SceneID_( SceneID ),
            m_SceneStateReq_( SceneStateReq ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NMService_Set_struct::NMService_Set_struct(NMService_Set_struct&& other_) OMG_NOEXCEPT  :m_SceneID_ (std::move(other_.m_SceneID_))
    ,
    m_SceneStateReq_ (std::move(other_.m_SceneStateReq_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    NMService_Set_struct& NMService_Set_struct::operator=(NMService_Set_struct&&  other_) OMG_NOEXCEPT {
        NMService_Set_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NMService_Set_struct::swap(NMService_Set_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SceneID_, other_.m_SceneID_);
        swap(m_SceneStateReq_, other_.m_SceneStateReq_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool NMService_Set_struct::operator == (const NMService_Set_struct& other_) const {
        if (m_SceneID_ != other_.m_SceneID_) {
            return false;
        }
        if (m_SceneStateReq_ != other_.m_SceneStateReq_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool NMService_Set_struct::operator != (const NMService_Set_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NMService_Set_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SceneID: " << sample.SceneID()<<", ";
        o << "SceneStateReq: " << (int)sample.SceneStateReq() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- NMService_Set_SOA_struct: 

    NMService_Set_SOA_struct::NMService_Set_SOA_struct() :
        m_NMService_Set_SOA_u8_ (0)  {
    }   

    NMService_Set_SOA_struct::NMService_Set_SOA_struct (
        uint8_t NMService_Set_SOA_u8)
        :
            m_NMService_Set_SOA_u8_( NMService_Set_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NMService_Set_SOA_struct::NMService_Set_SOA_struct(NMService_Set_SOA_struct&& other_) OMG_NOEXCEPT  :m_NMService_Set_SOA_u8_ (std::move(other_.m_NMService_Set_SOA_u8_))
    {
    } 

    NMService_Set_SOA_struct& NMService_Set_SOA_struct::operator=(NMService_Set_SOA_struct&&  other_) OMG_NOEXCEPT {
        NMService_Set_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NMService_Set_SOA_struct::swap(NMService_Set_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NMService_Set_SOA_u8_, other_.m_NMService_Set_SOA_u8_);
    }  

    bool NMService_Set_SOA_struct::operator == (const NMService_Set_SOA_struct& other_) const {
        if (m_NMService_Set_SOA_u8_ != other_.m_NMService_Set_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool NMService_Set_SOA_struct::operator != (const NMService_Set_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NMService_Set_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NMService_Set_SOA_u8: " << (int)sample.NMService_Set_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- NmXService_Ctrl_struct: 

    NmXService_Ctrl_struct::NmXService_Ctrl_struct() :
        m_NMStateReq_ (0) ,
        m_ECUName_ ("")  {
    }   

    NmXService_Ctrl_struct::NmXService_Ctrl_struct (
        uint8_t NMStateReq,
        const std::string& ECUName)
        :
            m_NMStateReq_( NMStateReq ),
            m_ECUName_( ECUName ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NmXService_Ctrl_struct::NmXService_Ctrl_struct(NmXService_Ctrl_struct&& other_) OMG_NOEXCEPT  :m_NMStateReq_ (std::move(other_.m_NMStateReq_))
    ,
    m_ECUName_ (std::move(other_.m_ECUName_))
    {
    } 

    NmXService_Ctrl_struct& NmXService_Ctrl_struct::operator=(NmXService_Ctrl_struct&&  other_) OMG_NOEXCEPT {
        NmXService_Ctrl_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NmXService_Ctrl_struct::swap(NmXService_Ctrl_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NMStateReq_, other_.m_NMStateReq_);
        swap(m_ECUName_, other_.m_ECUName_);
    }  

    bool NmXService_Ctrl_struct::operator == (const NmXService_Ctrl_struct& other_) const {
        if (m_NMStateReq_ != other_.m_NMStateReq_) {
            return false;
        }
        if (m_ECUName_ != other_.m_ECUName_) {
            return false;
        }
        return true;
    }
    bool NmXService_Ctrl_struct::operator != (const NmXService_Ctrl_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NmXService_Ctrl_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NMStateReq: " << (int)sample.NMStateReq() <<", ";
        o << "ECUName: " << sample.ECUName() ;
        o <<"]";
        return o;
    }

    // ---- NmXService_Ctrl_Array: 

    NmXService_Ctrl_Array::NmXService_Ctrl_Array()  {
    }   

    NmXService_Ctrl_Array::NmXService_Ctrl_Array (
        const ::rti::core::bounded_sequence< bottomtotop::NmXService_Ctrl_struct, 50L >& NmXService_Ctrl)
        :
            m_NmXService_Ctrl_( NmXService_Ctrl ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NmXService_Ctrl_Array::NmXService_Ctrl_Array(NmXService_Ctrl_Array&& other_) OMG_NOEXCEPT  :m_NmXService_Ctrl_ (std::move(other_.m_NmXService_Ctrl_))
    {
    } 

    NmXService_Ctrl_Array& NmXService_Ctrl_Array::operator=(NmXService_Ctrl_Array&&  other_) OMG_NOEXCEPT {
        NmXService_Ctrl_Array tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NmXService_Ctrl_Array::swap(NmXService_Ctrl_Array& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NmXService_Ctrl_, other_.m_NmXService_Ctrl_);
    }  

    bool NmXService_Ctrl_Array::operator == (const NmXService_Ctrl_Array& other_) const {
        if (m_NmXService_Ctrl_ != other_.m_NmXService_Ctrl_) {
            return false;
        }
        return true;
    }
    bool NmXService_Ctrl_Array::operator != (const NmXService_Ctrl_Array& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NmXService_Ctrl_Array& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NmXService_Ctrl: " << sample.NmXService_Ctrl() ;
        o <<"]";
        return o;
    }

    // ---- NmXService_Ctrl_SOA_struct: 

    NmXService_Ctrl_SOA_struct::NmXService_Ctrl_SOA_struct() :
        m_NmXService_Ctrl_SOA_u8_ (0)  {
    }   

    NmXService_Ctrl_SOA_struct::NmXService_Ctrl_SOA_struct (
        uint8_t NmXService_Ctrl_SOA_u8)
        :
            m_NmXService_Ctrl_SOA_u8_( NmXService_Ctrl_SOA_u8 ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NmXService_Ctrl_SOA_struct::NmXService_Ctrl_SOA_struct(NmXService_Ctrl_SOA_struct&& other_) OMG_NOEXCEPT  :m_NmXService_Ctrl_SOA_u8_ (std::move(other_.m_NmXService_Ctrl_SOA_u8_))
    {
    } 

    NmXService_Ctrl_SOA_struct& NmXService_Ctrl_SOA_struct::operator=(NmXService_Ctrl_SOA_struct&&  other_) OMG_NOEXCEPT {
        NmXService_Ctrl_SOA_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NmXService_Ctrl_SOA_struct::swap(NmXService_Ctrl_SOA_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NmXService_Ctrl_SOA_u8_, other_.m_NmXService_Ctrl_SOA_u8_);
    }  

    bool NmXService_Ctrl_SOA_struct::operator == (const NmXService_Ctrl_SOA_struct& other_) const {
        if (m_NmXService_Ctrl_SOA_u8_ != other_.m_NmXService_Ctrl_SOA_u8_) {
            return false;
        }
        return true;
    }
    bool NmXService_Ctrl_SOA_struct::operator != (const NmXService_Ctrl_SOA_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NmXService_Ctrl_SOA_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NmXService_Ctrl_SOA_u8: " << (int)sample.NmXService_Ctrl_SOA_u8()  ;
        o <<"]";
        return o;
    }

    // ---- NmService_Get_struct: 

    NmService_Get_struct::NmService_Get_struct() :
        m_NMTypeReq_ (0) ,
        m_CtrlSource_ ("")  {
    }   

    NmService_Get_struct::NmService_Get_struct (
        uint8_t NMTypeReq,
        const std::string& CtrlSource)
        :
            m_NMTypeReq_( NMTypeReq ),
            m_CtrlSource_( CtrlSource ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NmService_Get_struct::NmService_Get_struct(NmService_Get_struct&& other_) OMG_NOEXCEPT  :m_NMTypeReq_ (std::move(other_.m_NMTypeReq_))
    ,
    m_CtrlSource_ (std::move(other_.m_CtrlSource_))
    {
    } 

    NmService_Get_struct& NmService_Get_struct::operator=(NmService_Get_struct&&  other_) OMG_NOEXCEPT {
        NmService_Get_struct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NmService_Get_struct::swap(NmService_Get_struct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NMTypeReq_, other_.m_NMTypeReq_);
        swap(m_CtrlSource_, other_.m_CtrlSource_);
    }  

    bool NmService_Get_struct::operator == (const NmService_Get_struct& other_) const {
        if (m_NMTypeReq_ != other_.m_NMTypeReq_) {
            return false;
        }
        if (m_CtrlSource_ != other_.m_CtrlSource_) {
            return false;
        }
        return true;
    }
    bool NmService_Get_struct::operator != (const NmService_Get_struct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NmService_Get_struct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NMTypeReq: " << (int)sample.NMTypeReq() <<", ";
        o << "CtrlSource: " << sample.CtrlSource() ;
        o <<"]";
        return o;
    }

    // ---- NMService_St_substruct: 

    NMService_St_substruct::NMService_St_substruct() :
        m_SceneID_ (0) ,
        m_SceneState_ (0)  {
    }   

    NMService_St_substruct::NMService_St_substruct (
        uint16_t SceneID,
        uint8_t SceneState)
        :
            m_SceneID_( SceneID ),
            m_SceneState_( SceneState ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NMService_St_substruct::NMService_St_substruct(NMService_St_substruct&& other_) OMG_NOEXCEPT  :m_SceneID_ (std::move(other_.m_SceneID_))
    ,
    m_SceneState_ (std::move(other_.m_SceneState_))
    {
    } 

    NMService_St_substruct& NMService_St_substruct::operator=(NMService_St_substruct&&  other_) OMG_NOEXCEPT {
        NMService_St_substruct tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NMService_St_substruct::swap(NMService_St_substruct& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_SceneID_, other_.m_SceneID_);
        swap(m_SceneState_, other_.m_SceneState_);
    }  

    bool NMService_St_substruct::operator == (const NMService_St_substruct& other_) const {
        if (m_SceneID_ != other_.m_SceneID_) {
            return false;
        }
        if (m_SceneState_ != other_.m_SceneState_) {
            return false;
        }
        return true;
    }
    bool NMService_St_substruct::operator != (const NMService_St_substruct& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NMService_St_substruct& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "SceneID: " << sample.SceneID()<<", ";
        o << "SceneState: " << (int)sample.SceneState()  ;
        o <<"]";
        return o;
    }

    // ---- NMService_St_array: 

    NMService_St_array::NMService_St_array()  {
    }   

    NMService_St_array::NMService_St_array (
        const ::rti::core::bounded_sequence< bottomtotop::NMService_St_substruct, 255L >& NMService_St)
        :
            m_NMService_St_( NMService_St ) {
    }

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NMService_St_array::NMService_St_array(NMService_St_array&& other_) OMG_NOEXCEPT  :m_NMService_St_ (std::move(other_.m_NMService_St_))
    {
    } 

    NMService_St_array& NMService_St_array::operator=(NMService_St_array&&  other_) OMG_NOEXCEPT {
        NMService_St_array tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif   

    void NMService_St_array::swap(NMService_St_array& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap(m_NMService_St_, other_.m_NMService_St_);
    }  

    bool NMService_St_array::operator == (const NMService_St_array& other_) const {
        if (m_NMService_St_ != other_.m_NMService_St_) {
            return false;
        }
        return true;
    }
    bool NMService_St_array::operator != (const NMService_St_array& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NMService_St_array& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "NMService_St: " << sample.NMService_St() ;
        o <<"]";
        return o;
    }

    // ---- NMService_Srv_Req_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NMService_Srv_Req_Union::NMService_Srv_Req_Union(NMService_Srv_Req_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                NMService_Set( std::move(other_.NMService_Set()));
            } break;
            case 1:
            {  
                NmXService_Ctrl( std::move(other_.NmXService_Ctrl()));
            } break;
            case 2:
            {  
                NmService_Get( std::move(other_.NmService_Get()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    NMService_Srv_Req_Union& NMService_Srv_Req_Union::operator=(NMService_Srv_Req_Union&&  other_) OMG_NOEXCEPT {
        NMService_Srv_Req_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    NMService_Srv_Req_Union::Union_::Union_()  {
    }

    NMService_Srv_Req_Union::Union_::Union_(
        const bottomtotop::NMService_Set_struct& NMService_Set,
        const bottomtotop::NmXService_Ctrl_Array& NmXService_Ctrl,
        const bottomtotop::NmService_Get_struct& NmService_Get)
        :
            m_NMService_Set_( NMService_Set ),
            m_NmXService_Ctrl_( NmXService_Ctrl ),
            m_NmService_Get_( NmService_Get ) {
    }

    NMService_Srv_Req_Union::NMService_Srv_Req_Union() :m_d_(default_discriminator())
    {
    }

    void NMService_Srv_Req_Union::swap(NMService_Srv_Req_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_NMService_Set_, other_.m_u_.m_NMService_Set_);
            } break;
            case 1:
            {  
                swap(m_u_.m_NmXService_Ctrl_, other_.m_u_.m_NmXService_Ctrl_);
            } break;
            case 2:
            {  
                swap(m_u_.m_NmService_Get_, other_.m_u_.m_NmService_Get_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_NMService_Set_, other_.m_u_.m_NMService_Set_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_NmXService_Ctrl_, other_.m_u_.m_NmXService_Ctrl_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_NmService_Get_, other_.m_u_.m_NmService_Get_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool NMService_Srv_Req_Union::operator == (const NMService_Srv_Req_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_NMService_Set_ != other_.m_u_.m_NMService_Set_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_NmXService_Ctrl_ != other_.m_u_.m_NmXService_Ctrl_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_NmService_Get_ != other_.m_u_.m_NmService_Get_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool NMService_Srv_Req_Union::operator != (const NMService_Srv_Req_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NMService_Srv_Req_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "NMService_Set: " << sample.NMService_Set()<<", ";
            } break ;
            case 1:
            {  
                o << "NmXService_Ctrl: " << sample.NmXService_Ctrl()<<", ";
            } break ;
            case 2:
            {  
                o << "NmService_Get: " << sample.NmService_Get() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t NMService_Srv_Req_Union::default_discriminator() {
        return 0;
    }  

    // ---- NMService_Srv_Resp_Union: 

    #ifdef RTI_CXX11_RVALUE_REFERENCES
    #ifdef RTI_CXX11_NO_IMPLICIT_MOVE_OPERATIONS
    NMService_Srv_Resp_Union::NMService_Srv_Resp_Union(NMService_Srv_Resp_Union&& other_) OMG_NOEXCEPT 
    {
        _d(std::move(other_._d()));
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                NMService_Set_SOA( std::move(other_.NMService_Set_SOA()));
            } break;
            case 1:
            {  
                NmXService_Ctrl_SOA( std::move(other_.NmXService_Ctrl_SOA()));
            } break;
            case 2:
            {  
                NmService_Get_SOA( std::move(other_.NmService_Get_SOA()));
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
    }

    NMService_Srv_Resp_Union& NMService_Srv_Resp_Union::operator=(NMService_Srv_Resp_Union&&  other_) OMG_NOEXCEPT {
        NMService_Srv_Resp_Union tmp(std::move(other_));
        swap(tmp); 
        return *this;
    }
    #endif
    #endif 

    NMService_Srv_Resp_Union::Union_::Union_()  {
    }

    NMService_Srv_Resp_Union::Union_::Union_(
        const bottomtotop::NMService_Set_SOA_struct& NMService_Set_SOA,
        const bottomtotop::NmXService_Ctrl_SOA_struct& NmXService_Ctrl_SOA,
        const bottomtotop::NMService_St_array& NmService_Get_SOA)
        :
            m_NMService_Set_SOA_( NMService_Set_SOA ),
            m_NmXService_Ctrl_SOA_( NmXService_Ctrl_SOA ),
            m_NmService_Get_SOA_( NmService_Get_SOA ) {
    }

    NMService_Srv_Resp_Union::NMService_Srv_Resp_Union() :m_d_(default_discriminator())
    {
    }

    void NMService_Srv_Resp_Union::swap(NMService_Srv_Resp_Union& other_)  OMG_NOEXCEPT 
    {
        using std::swap;
        swap (m_d_,other_.m_d_);
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                swap(m_u_.m_NMService_Set_SOA_, other_.m_u_.m_NMService_Set_SOA_);
            } break;
            case 1:
            {  
                swap(m_u_.m_NmXService_Ctrl_SOA_, other_.m_u_.m_NmXService_Ctrl_SOA_);
            } break;
            case 2:
            {  
                swap(m_u_.m_NmService_Get_SOA_, other_.m_u_.m_NmService_Get_SOA_);
            } break;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        if (_d() != other_._d()){
            switch(::rti::topic::cdr::integer_case(other_._d())){
                case 0:
                {  
                    swap(m_u_.m_NMService_Set_SOA_, other_.m_u_.m_NMService_Set_SOA_);
                } break;
                case 1:
                {  
                    swap(m_u_.m_NmXService_Ctrl_SOA_, other_.m_u_.m_NmXService_Ctrl_SOA_);
                } break;
                case 2:
                {  
                    swap(m_u_.m_NmService_Get_SOA_, other_.m_u_.m_NmService_Get_SOA_);
                } break;

                default: 
                {
                    /* 
                    * Prevents compiler warnings when discriminator is an enum
                    * and unionType does not specify all enumeration members.
                    */ 
                }
            }
        }
    }  

    bool NMService_Srv_Resp_Union::operator == (const NMService_Srv_Resp_Union& other_) const {
        if (_d() != other_._d()){
            return false;
        }
        switch(::rti::topic::cdr::integer_case(_d())){
            case 0:
            {  
                if ( m_u_.m_NMService_Set_SOA_ != other_.m_u_.m_NMService_Set_SOA_) {
                    return false;
                }
            } break ;
            case 1:
            {  
                if ( m_u_.m_NmXService_Ctrl_SOA_ != other_.m_u_.m_NmXService_Ctrl_SOA_) {
                    return false;
                }
            } break ;
            case 2:
            {  
                if ( m_u_.m_NmService_Get_SOA_ != other_.m_u_.m_NmService_Get_SOA_) {
                    return false;
                }
            } break ;
            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        return true;
    }
    bool NMService_Srv_Resp_Union::operator != (const NMService_Srv_Resp_Union& other_) const {
        return !this->operator ==(other_);
    }

    std::ostream& operator << (std::ostream& o,const NMService_Srv_Resp_Union& sample)
    {
        ::rti::util::StreamFlagSaver flag_saver (o);
        o <<"[";
        o << "_d: " << (int)sample._d()  <<", ";
        switch(::rti::topic::cdr::integer_case(sample._d())){
            case 0:
            {  
                o << "NMService_Set_SOA: " << sample.NMService_Set_SOA()<<", ";
            } break ;
            case 1:
            {  
                o << "NmXService_Ctrl_SOA: " << sample.NmXService_Ctrl_SOA()<<", ";
            } break ;
            case 2:
            {  
                o << "NmService_Get_SOA: " << sample.NmService_Get_SOA() ;        } break ;

            default: 
            {
                /* 
                * Prevents compiler warnings when discriminator is an enum
                * and unionType does not specify all enumeration members.
                */ 
            }
        }
        o <<"]";
        return o;
    }

    uint8_t NMService_Srv_Resp_Union::default_discriminator() {
        return 0;
    }  

} // namespace bottomtotop  

// --- Type traits: -------------------------------------------------

namespace rti { 
    namespace topic {

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdArm_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdArm_Set_struct_g_tc_members[5]=
                {

                    {
                        (char *)"VehicleUnlock_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ReturnPUnlock_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AwayVclLck_Set",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CloseVclUnlck_Set",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        5, /* Number of members */
                        BdArm_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_Set_struct*/

                if (is_initialized) {
                    return &BdArm_Set_struct_g_tc;
                }

                BdArm_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdArm_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Set_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Set_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&BdArm_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdArm_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Set_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Set_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Set_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Set_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Set_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Set_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Set_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdArm_Set_struct_g_tc_members[4]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdArm_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_Set_struct *sample;

                static RTIXCdrMemberAccessInfo BdArm_Set_struct_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VehicleUnlock_Set() - (char *)sample);

                BdArm_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ReturnPUnlock_Set() - (char *)sample);

                BdArm_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AwayVclLck_Set() - (char *)sample);

                BdArm_Set_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CloseVclUnlck_Set() - (char *)sample);

                BdArm_Set_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdArm_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_Set_struct >;

                BdArm_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdArm_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdArm_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdArm_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BdArm_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_Get_struct*/

                if (is_initialized) {
                    return &BdArm_Get_struct_g_tc;
                }

                BdArm_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdArm_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BdArm_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdArm_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdArm_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdArm_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_Get_struct *sample;

                static RTIXCdrMemberAccessInfo BdArm_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                BdArm_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdArm_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_Get_struct >;

                BdArm_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdArm_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdArm_Rsp_struct_g_tc_members[4]=
                {

                    {
                        (char *)"VehicleUnlock_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ReturnPUnlock_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AwayVclLck_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CloseVclUnlck_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        BdArm_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_Rsp_struct*/

                if (is_initialized) {
                    return &BdArm_Rsp_struct_g_tc;
                }

                BdArm_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdArm_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo BdArm_Rsp_struct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VehicleUnlock_Rsp() - (char *)sample);

                BdArm_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ReturnPUnlock_Rsp() - (char *)sample);

                BdArm_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AwayVclLck_Rsp() - (char *)sample);

                BdArm_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CloseVclUnlck_Rsp() - (char *)sample);

                BdArm_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_Rsp_struct >;

                BdArm_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdArm_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdArm_St_struct_g_tc_members[3]=
                {

                    {
                        (char *)"CenterLck_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BodyBglAlarm_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExLckReq_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        BdArm_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_St_struct*/

                if (is_initialized) {
                    return &BdArm_St_struct_g_tc;
                }

                BdArm_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdArm_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdArm_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdArm_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdArm_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_St_struct *sample;

                static RTIXCdrMemberAccessInfo BdArm_St_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CenterLck_St() - (char *)sample);

                BdArm_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BodyBglAlarm_St() - (char *)sample);

                BdArm_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExLckReq_St() - (char *)sample);

                BdArm_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_St_struct >;

                BdArm_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdArm_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdArm_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdArm_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BdArm_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_St_Get_struct*/

                if (is_initialized) {
                    return &BdArm_St_Get_struct_g_tc;
                }

                BdArm_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdArm_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BdArm_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdArm_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdArm_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdArm_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdArm_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo BdArm_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                BdArm_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdArm_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_St_Get_struct >;

                BdArm_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdArm_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdArm_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdArm_Ctrl_struct_g_tc_members[2]=
                {

                    {
                        (char *)"CenterLck_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BdArm_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_Ctrl_struct*/

                if (is_initialized) {
                    return &BdArm_Ctrl_struct_g_tc;
                }

                BdArm_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdArm_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdArm_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BdArm_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdArm_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdArm_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdArm_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo BdArm_Ctrl_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CenterLck_Act() - (char *)sample);

                BdArm_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdArm_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_Ctrl_struct >;

                BdArm_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdArm_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdArm_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"BdArm_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        BdArm_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &BdArm_Ctrl_SOA_struct_g_tc;
                }

                BdArm_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdArm_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdArm_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdArm_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdArm_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdArm_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo BdArm_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_Ctrl_SOA_u8() - (char *)sample);

                BdArm_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_Ctrl_SOA_struct >;

                BdArm_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdArm_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdArm_Srv_Req_Union_g_tc_members[4]=
                {

                    {
                        (char *)"BdArm_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdArm_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdArm_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdArm_St_Get",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        BdArm_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_Srv_Req_Union*/

                if (is_initialized) {
                    return &BdArm_Srv_Req_Union_g_tc;
                }

                BdArm_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_Set_struct>::get().native();
                BdArm_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_Get_struct>::get().native();
                BdArm_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_Ctrl_struct>::get().native();
                BdArm_Srv_Req_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_St_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                BdArm_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                BdArm_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo BdArm_Srv_Req_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                BdArm_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_Set() - (char *)sample);

                sample->_d() = 1;
                BdArm_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_Get() - (char *)sample);

                sample->_d() = 2;
                BdArm_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_Ctrl() - (char *)sample);

                sample->_d() = 3;
                BdArm_Srv_Req_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_St_Get() - (char *)sample);

                BdArm_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_Srv_Req_Union >;

                BdArm_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::BdArm_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdArm_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdArm_Srv_Resp_Union_g_tc_members[4]=
                {

                    {
                        (char *)"BdArm_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdArm_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdArm_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdArm_St_Get_struct",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdArm_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdArm_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        BdArm_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdArm_Srv_Resp_Union*/

                if (is_initialized) {
                    return &BdArm_Srv_Resp_Union_g_tc;
                }

                BdArm_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdArm_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_Rsp_struct>::get().native();
                BdArm_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_Rsp_struct>::get().native();
                BdArm_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_Ctrl_SOA_struct>::get().native();
                BdArm_Srv_Resp_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdArm_St_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                BdArm_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                BdArm_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                BdArm_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdArm_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdArm_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo BdArm_Srv_Resp_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdArm_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdArm_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdArm_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                BdArm_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                BdArm_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                BdArm_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                BdArm_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_Ctrl_SOA() - (char *)sample);

                sample->_d() = 3;
                BdArm_Srv_Resp_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdArm_St_Get_struct() - (char *)sample);

                BdArm_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                BdArm_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdArm_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdArm_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdArm_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdArm_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdArm_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdArm_Srv_Resp_Union >;

                BdArm_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdArm_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdArm_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdArm_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::BdArm_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdArm_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode VsWsh_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member VsWsh_Set_struct_g_tc_members[3]=
                {

                    {
                        (char *)"FwiperSW_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FwiperAutoSenst_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        VsWsh_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_Set_struct*/

                if (is_initialized) {
                    return &VsWsh_Set_struct_g_tc;
                }

                VsWsh_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                VsWsh_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&VsWsh_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                VsWsh_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                VsWsh_Set_struct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                VsWsh_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_Set_struct *sample;

                static RTIXCdrMemberAccessInfo VsWsh_Set_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FwiperSW_Set() - (char *)sample);

                VsWsh_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FwiperAutoSenst_Set() - (char *)sample);

                VsWsh_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                VsWsh_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_Set_struct >;

                VsWsh_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::VsWsh_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode VsWsh_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member VsWsh_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        VsWsh_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_Get_struct*/

                if (is_initialized) {
                    return &VsWsh_Get_struct_g_tc;
                }

                VsWsh_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                VsWsh_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&VsWsh_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                VsWsh_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                VsWsh_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                VsWsh_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_Get_struct *sample;

                static RTIXCdrMemberAccessInfo VsWsh_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                VsWsh_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                VsWsh_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_Get_struct >;

                VsWsh_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::VsWsh_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member VsWsh_Rsp_struct_g_tc_members[2]=
                {

                    {
                        (char *)"FwiperSW_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FwiperAutoSenst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        VsWsh_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_Rsp_struct*/

                if (is_initialized) {
                    return &VsWsh_Rsp_struct_g_tc;
                }

                VsWsh_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                VsWsh_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo VsWsh_Rsp_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FwiperSW_Rsp() - (char *)sample);

                VsWsh_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FwiperAutoSenst_Rsp() - (char *)sample);

                VsWsh_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_Rsp_struct >;

                VsWsh_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::VsWsh_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode VsWsh_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member VsWsh_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        VsWsh_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_St_Get_struct*/

                if (is_initialized) {
                    return &VsWsh_St_Get_struct_g_tc;
                }

                VsWsh_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                VsWsh_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&VsWsh_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                VsWsh_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                VsWsh_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                VsWsh_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo VsWsh_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                VsWsh_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                VsWsh_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_St_Get_struct >;

                VsWsh_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::VsWsh_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member VsWsh_St_struct_g_tc_members[5]=
                {

                    {
                        (char *)"Fwiper_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"WashLqdHgtWarn_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExMirHt_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FwiperSWDisplay_st",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RWndShldHt_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        5, /* Number of members */
                        VsWsh_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_St_struct*/

                if (is_initialized) {
                    return &VsWsh_St_struct_g_tc;
                }

                VsWsh_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                VsWsh_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_St_struct *sample;

                static RTIXCdrMemberAccessInfo VsWsh_St_struct_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Fwiper_St() - (char *)sample);

                VsWsh_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->WashLqdHgtWarn_St() - (char *)sample);

                VsWsh_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirHt_Rsp() - (char *)sample);

                VsWsh_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FwiperSWDisplay_st() - (char *)sample);

                VsWsh_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RWndShldHt_Rsp() - (char *)sample);

                VsWsh_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_St_struct >;

                VsWsh_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::VsWsh_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode VsWsh_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member VsWsh_Ctrl_struct_g_tc_members[4]=
                {

                    {
                        (char *)"FWiperSvcSW_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExMirHt_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RWndShldHt_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        VsWsh_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_Ctrl_struct*/

                if (is_initialized) {
                    return &VsWsh_Ctrl_struct_g_tc;
                }

                VsWsh_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                VsWsh_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                VsWsh_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&VsWsh_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                VsWsh_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                VsWsh_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                VsWsh_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo VsWsh_Ctrl_struct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FWiperSvcSW_Req() - (char *)sample);

                VsWsh_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirHt_Req() - (char *)sample);

                VsWsh_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RWndShldHt_Req() - (char *)sample);

                VsWsh_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                VsWsh_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_Ctrl_struct >;

                VsWsh_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::VsWsh_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member VsWsh_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"VsWsh_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        VsWsh_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &VsWsh_Ctrl_SOA_struct_g_tc;
                }

                VsWsh_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                VsWsh_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                VsWsh_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                VsWsh_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                VsWsh_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                VsWsh_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo VsWsh_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_Ctrl_SOA_u8() - (char *)sample);

                VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_Ctrl_SOA_struct >;

                VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::VsWsh_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member VsWsh_Srv_Req_Union_g_tc_members[4]=
                {

                    {
                        (char *)"VsWsh_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VsWsh_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VsWsh_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VsWsh_St_Get",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        VsWsh_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_Srv_Req_Union*/

                if (is_initialized) {
                    return &VsWsh_Srv_Req_Union_g_tc;
                }

                VsWsh_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_Set_struct>::get().native();
                VsWsh_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_Get_struct>::get().native();
                VsWsh_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_Ctrl_struct>::get().native();
                VsWsh_Srv_Req_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_St_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                VsWsh_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                VsWsh_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo VsWsh_Srv_Req_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                VsWsh_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_Set() - (char *)sample);

                sample->_d() = 1;
                VsWsh_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_Get() - (char *)sample);

                sample->_d() = 2;
                VsWsh_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_Ctrl() - (char *)sample);

                sample->_d() = 3;
                VsWsh_Srv_Req_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_St_Get() - (char *)sample);

                VsWsh_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_Srv_Req_Union >;

                VsWsh_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::VsWsh_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::VsWsh_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member VsWsh_Srv_Resp_Union_g_tc_members[4]=
                {

                    {
                        (char *)"VsWsh_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VsWsh_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VsWsh_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VsWsh_St_Get_SOA",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VsWsh_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::VsWsh_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        VsWsh_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VsWsh_Srv_Resp_Union*/

                if (is_initialized) {
                    return &VsWsh_Srv_Resp_Union_g_tc;
                }

                VsWsh_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VsWsh_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_Rsp_struct>::get().native();
                VsWsh_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_Rsp_struct>::get().native();
                VsWsh_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_Ctrl_SOA_struct>::get().native();
                VsWsh_Srv_Resp_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::VsWsh_St_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                VsWsh_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                VsWsh_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                VsWsh_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VsWsh_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::VsWsh_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo VsWsh_Srv_Resp_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VsWsh_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VsWsh_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::VsWsh_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                VsWsh_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                VsWsh_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                VsWsh_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                VsWsh_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_Ctrl_SOA() - (char *)sample);

                sample->_d() = 3;
                VsWsh_Srv_Resp_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VsWsh_St_Get_SOA() - (char *)sample);

                VsWsh_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                VsWsh_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::VsWsh_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VsWsh_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VsWsh_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VsWsh_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VsWsh_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::VsWsh_Srv_Resp_Union >;

                VsWsh_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VsWsh_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VsWsh_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VsWsh_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::VsWsh_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::VsWsh_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SSd_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode SSd_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member SSd_Set_struct_g_tc_members[3]=
                {

                    {
                        (char *)"LockVoiWarn_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LowSpdVoi_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SSd_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SSd_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        SSd_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SSd_Set_struct*/

                if (is_initialized) {
                    return &SSd_Set_struct_g_tc;
                }

                SSd_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                SSd_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SSd_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SSd_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SSd_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&SSd_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                SSd_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SSd_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SSd_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SSd_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SSd_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SSd_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SSd_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SSd_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SSd_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SSd_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SSd_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SSd_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SSd_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                SSd_Set_struct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                SSd_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SSd_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SSd_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SSd_Set_struct *sample;

                static RTIXCdrMemberAccessInfo SSd_Set_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SSd_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SSd_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SSd_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SSd_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LockVoiWarn_Req() - (char *)sample);

                SSd_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LowSpdVoi_Set() - (char *)sample);

                SSd_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                SSd_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                SSd_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SSd_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SSd_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SSd_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SSd_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SSd_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SSd_Set_struct >;

                SSd_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SSd_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SSd_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SSd_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SSd_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SSd_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SSd_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode SSd_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member SSd_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SSd_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SSd_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        SSd_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SSd_Get_struct*/

                if (is_initialized) {
                    return &SSd_Get_struct_g_tc;
                }

                SSd_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                SSd_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SSd_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SSd_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&SSd_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                SSd_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SSd_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SSd_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SSd_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SSd_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SSd_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SSd_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                SSd_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                SSd_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SSd_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SSd_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SSd_Get_struct *sample;

                static RTIXCdrMemberAccessInfo SSd_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SSd_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SSd_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SSd_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SSd_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                SSd_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                SSd_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                SSd_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SSd_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SSd_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SSd_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SSd_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SSd_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SSd_Get_struct >;

                SSd_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SSd_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SSd_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SSd_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SSd_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SSd_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SSd_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SSd_Rsp_struct_g_tc_members[2]=
                {

                    {
                        (char *)"LockVoiWarn_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LowSpdVoi_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SSd_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SSd_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        SSd_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SSd_Rsp_struct*/

                if (is_initialized) {
                    return &SSd_Rsp_struct_g_tc;
                }

                SSd_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SSd_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SSd_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                SSd_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SSd_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SSd_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SSd_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SSd_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SSd_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SSd_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SSd_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SSd_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SSd_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SSd_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SSd_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SSd_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SSd_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SSd_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SSd_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo SSd_Rsp_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SSd_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SSd_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SSd_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SSd_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LockVoiWarn_Rsp() - (char *)sample);

                SSd_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LowSpdVoi_Rsp() - (char *)sample);

                SSd_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                SSd_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SSd_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SSd_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SSd_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SSd_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SSd_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SSd_Rsp_struct >;

                SSd_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SSd_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SSd_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SSd_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SSd_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SSd_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SSd_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SSd_Srv_Req_Union_g_tc_members[2]=
                {

                    {
                        (char *)"SSd_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SSd_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SSd_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SSd_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        SSd_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SSd_Srv_Req_Union*/

                if (is_initialized) {
                    return &SSd_Srv_Req_Union_g_tc;
                }

                SSd_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SSd_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SSd_Set_struct>::get().native();
                SSd_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SSd_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                SSd_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                SSd_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                SSd_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SSd_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SSd_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo SSd_Srv_Req_Union_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SSd_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SSd_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SSd_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                SSd_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                SSd_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SSd_Set() - (char *)sample);

                sample->_d() = 1;
                SSd_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SSd_Get() - (char *)sample);

                SSd_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                SSd_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SSd_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SSd_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SSd_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SSd_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SSd_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SSd_Srv_Req_Union >;

                SSd_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SSd_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SSd_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SSd_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::SSd_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SSd_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SSd_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SSd_Srv_Resp_Union_g_tc_members[2]=
                {

                    {
                        (char *)"SSd_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SSd_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SSd_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SSd_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        SSd_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SSd_Srv_Resp_Union*/

                if (is_initialized) {
                    return &SSd_Srv_Resp_Union_g_tc;
                }

                SSd_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SSd_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SSd_Rsp_struct>::get().native();
                SSd_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SSd_Rsp_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                SSd_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                SSd_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                SSd_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SSd_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SSd_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo SSd_Srv_Resp_Union_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SSd_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SSd_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SSd_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                SSd_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                SSd_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SSd_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                SSd_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SSd_Get_SOA() - (char *)sample);

                SSd_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                SSd_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SSd_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SSd_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SSd_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SSd_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SSd_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SSd_Srv_Resp_Union >;

                SSd_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SSd_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SSd_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SSd_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::SSd_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SSd_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Win_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode Win_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member Win_Set_struct_g_tc_members[3]=
                {

                    {
                        (char *)"LckCloseWin_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RainCloseWin_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Win_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Win_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        Win_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Win_Set_struct*/

                if (is_initialized) {
                    return &Win_Set_struct_g_tc;
                }

                Win_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                Win_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Win_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&Win_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                Win_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Win_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                Win_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                Win_Set_struct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                Win_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Win_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Win_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Win_Set_struct *sample;

                static RTIXCdrMemberAccessInfo Win_Set_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Win_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Win_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Win_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Win_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LckCloseWin_Set() - (char *)sample);

                Win_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RainCloseWin_Set() - (char *)sample);

                Win_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                Win_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                Win_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Win_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Win_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Win_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Win_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Win_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Win_Set_struct >;

                Win_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Win_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Win_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Win_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::Win_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Win_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Win_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode Win_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member Win_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Win_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Win_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        Win_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Win_Get_struct*/

                if (is_initialized) {
                    return &Win_Get_struct_g_tc;
                }

                Win_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                Win_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Win_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&Win_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                Win_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Win_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                Win_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                Win_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Win_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Win_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Win_Get_struct *sample;

                static RTIXCdrMemberAccessInfo Win_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Win_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Win_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Win_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Win_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                Win_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                Win_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                Win_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Win_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Win_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Win_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Win_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Win_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Win_Get_struct >;

                Win_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Win_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Win_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Win_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::Win_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Win_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Win_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Win_Rsp_struct_g_tc_members[2]=
                {

                    {
                        (char *)"LckCloseWin_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RainCloseWin_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Win_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Win_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        Win_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Win_Rsp_struct*/

                if (is_initialized) {
                    return &Win_Rsp_struct_g_tc;
                }

                Win_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Win_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                Win_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Win_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                Win_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Win_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Win_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Win_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo Win_Rsp_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Win_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Win_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Win_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Win_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LckCloseWin_Rsp() - (char *)sample);

                Win_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RainCloseWin_Rsp() - (char *)sample);

                Win_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                Win_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Win_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Win_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Win_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Win_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Win_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Win_Rsp_struct >;

                Win_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Win_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Win_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Win_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::Win_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Win_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::WinPct_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode WinPct_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member WinPct_Ctrl_struct_g_tc_members[6]=
                {

                    {
                        (char *)"FLWinPst_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRWinPst_Act",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLWinPst_Act",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRWinPst_Act",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"WinFastCtl_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode WinPct_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::WinPct_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        WinPct_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for WinPct_Ctrl_struct*/

                if (is_initialized) {
                    return &WinPct_Ctrl_struct_g_tc;
                }

                WinPct_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                WinPct_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                WinPct_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                WinPct_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                WinPct_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                WinPct_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                WinPct_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                WinPct_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&WinPct_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                WinPct_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                WinPct_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WinPct_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WinPct_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                WinPct_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WinPct_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WinPct_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                WinPct_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WinPct_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WinPct_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                WinPct_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WinPct_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WinPct_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                WinPct_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WinPct_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WinPct_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                WinPct_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                WinPct_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                WinPct_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &WinPct_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::WinPct_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo WinPct_Ctrl_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo WinPct_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &WinPct_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::WinPct_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                WinPct_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLWinPst_Act() - (char *)sample);

                WinPct_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRWinPst_Act() - (char *)sample);

                WinPct_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLWinPst_Act() - (char *)sample);

                WinPct_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRWinPst_Act() - (char *)sample);

                WinPct_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->WinFastCtl_Req() - (char *)sample);

                WinPct_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                WinPct_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                WinPct_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::WinPct_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        WinPct_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        WinPct_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                WinPct_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                WinPct_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::WinPct_Ctrl_struct >;

                WinPct_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &WinPct_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin WinPct_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &WinPct_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::WinPct_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::WinPct_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::WinPct_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member WinPct_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"WinPct_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode WinPct_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::WinPct_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        WinPct_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for WinPct_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &WinPct_Ctrl_SOA_struct_g_tc;
                }

                WinPct_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                WinPct_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                WinPct_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                WinPct_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WinPct_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WinPct_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WinPct_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                WinPct_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &WinPct_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::WinPct_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo WinPct_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo WinPct_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &WinPct_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::WinPct_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                WinPct_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->WinPct_Ctrl_SOA_u8() - (char *)sample);

                WinPct_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                WinPct_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::WinPct_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        WinPct_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        WinPct_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                WinPct_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                WinPct_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::WinPct_Ctrl_SOA_struct >;

                WinPct_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &WinPct_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin WinPct_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &WinPct_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::WinPct_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::WinPct_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Win_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode Win_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member Win_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Win_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Win_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        Win_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Win_St_Get_struct*/

                if (is_initialized) {
                    return &Win_St_Get_struct_g_tc;
                }

                Win_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                Win_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Win_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&Win_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                Win_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Win_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                Win_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                Win_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Win_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Win_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Win_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo Win_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Win_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Win_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Win_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Win_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                Win_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                Win_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                Win_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Win_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Win_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Win_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Win_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Win_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Win_St_Get_struct >;

                Win_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Win_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Win_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Win_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::Win_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Win_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Win_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Win_St_struct_g_tc_members[16]=
                {

                    {
                        (char *)"FLWinPst_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRWinPst_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLWinPst_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRWinPst_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLWdwMov_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRWdwMov_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLWdwMov_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRWdwMov_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLWinStpRsn_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRWinStpRsn_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLWinStpRsn_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRWinStpRsn_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AllWinClose_St",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AllWinOpen_St",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AllWinFrshAir_St",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"WinVent_St",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Win_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Win_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        16, /* Number of members */
                        Win_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Win_St_struct*/

                if (is_initialized) {
                    return &Win_St_struct_g_tc;
                }

                Win_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Win_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Win_St_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                Win_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                Win_St_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Win_St_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Win_St_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Win_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Win_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Win_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Win_St_struct *sample;

                static RTIXCdrMemberAccessInfo Win_St_struct_g_memberAccessInfos[16] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Win_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Win_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Win_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Win_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLWinPst_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRWinPst_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLWinPst_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRWinPst_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLWdwMov_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRWdwMov_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLWdwMov_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRWdwMov_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLWinStpRsn_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRWinStpRsn_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLWinStpRsn_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRWinStpRsn_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AllWinClose_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AllWinOpen_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AllWinFrshAir_St() - (char *)sample);

                Win_St_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->WinVent_St() - (char *)sample);

                Win_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                Win_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Win_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Win_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Win_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Win_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Win_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Win_St_struct >;

                Win_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Win_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Win_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Win_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::Win_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Win_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Win_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Win_Srv_Req_Union_g_tc_members[4]=
                {

                    {
                        (char *)"Win_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Win_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"WinPct_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Win_St_Get",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Win_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Win_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        Win_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Win_Srv_Req_Union*/

                if (is_initialized) {
                    return &Win_Srv_Req_Union_g_tc;
                }

                Win_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Win_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::Win_Set_struct>::get().native();
                Win_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::Win_Get_struct>::get().native();
                Win_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::WinPct_Ctrl_struct>::get().native();
                Win_Srv_Req_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::Win_St_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                Win_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                Win_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                Win_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Win_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Win_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo Win_Srv_Req_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Win_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Win_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Win_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                Win_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                Win_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Win_Set() - (char *)sample);

                sample->_d() = 1;
                Win_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Win_Get() - (char *)sample);

                sample->_d() = 2;
                Win_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->WinPct_Ctrl() - (char *)sample);

                sample->_d() = 3;
                Win_Srv_Req_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Win_St_Get() - (char *)sample);

                Win_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                Win_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Win_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Win_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Win_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Win_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Win_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Win_Srv_Req_Union >;

                Win_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Win_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Win_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Win_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::Win_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Win_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Win_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Win_Srv_Resp_Union_g_tc_members[4]=
                {

                    {
                        (char *)"Win_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Win_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"WinPct_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Win_St_Get_SOA",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Win_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Win_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        Win_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Win_Srv_Resp_Union*/

                if (is_initialized) {
                    return &Win_Srv_Resp_Union_g_tc;
                }

                Win_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Win_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::Win_Rsp_struct>::get().native();
                Win_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::Win_Rsp_struct>::get().native();
                Win_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::WinPct_Ctrl_SOA_struct>::get().native();
                Win_Srv_Resp_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::Win_St_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                Win_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                Win_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                Win_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Win_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Win_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo Win_Srv_Resp_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Win_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Win_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Win_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                Win_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                Win_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Win_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                Win_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Win_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                Win_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->WinPct_Ctrl_SOA() - (char *)sample);

                sample->_d() = 3;
                Win_Srv_Resp_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Win_St_Get_SOA() - (char *)sample);

                Win_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                Win_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Win_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Win_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Win_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Win_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Win_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Win_Srv_Resp_Union >;

                Win_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Win_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Win_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Win_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::Win_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Win_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdPst_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdPst_Set_struct_g_tc_members[6]=
                {

                    {
                        (char *)"ExMirAutoTurnOver_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExMirFoldEn_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExMirUnfoldAlt_Set",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatWelcome_Set",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExitVehicleMemory_Set",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        BdPst_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_Set_struct*/

                if (is_initialized) {
                    return &BdPst_Set_struct_g_tc;
                }

                BdPst_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdPst_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Set_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Set_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Set_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&BdPst_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdPst_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Set_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Set_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Set_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Set_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Set_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Set_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Set_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Set_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Set_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Set_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdPst_Set_struct_g_tc_members[5]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdPst_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_Set_struct *sample;

                static RTIXCdrMemberAccessInfo BdPst_Set_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirAutoTurnOver_Set() - (char *)sample);

                BdPst_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirFoldEn_Set() - (char *)sample);

                BdPst_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirUnfoldAlt_Set() - (char *)sample);

                BdPst_Set_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatWelcome_Set() - (char *)sample);

                BdPst_Set_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExitVehicleMemory_Set() - (char *)sample);

                BdPst_Set_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdPst_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_Set_struct >;

                BdPst_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdPst_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdPst_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdPst_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"BdPstSetBit",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BdPst_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_Get_struct*/

                if (is_initialized) {
                    return &BdPst_Get_struct_g_tc;
                }

                BdPst_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdPst_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BdPst_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdPst_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdPst_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdPst_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_Get_struct *sample;

                static RTIXCdrMemberAccessInfo BdPst_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPstSetBit() - (char *)sample);

                BdPst_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdPst_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_Get_struct >;

                BdPst_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdPst_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdPst_Rsp_struct_g_tc_members[5]=
                {

                    {
                        (char *)"ExMirAutoTurnOverSet_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExMirFoldEn_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExMirUnfoldAlt_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatWelcome_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ExitVehicleMemory_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        5, /* Number of members */
                        BdPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_Rsp_struct*/

                if (is_initialized) {
                    return &BdPst_Rsp_struct_g_tc;
                }

                BdPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Rsp_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Rsp_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo BdPst_Rsp_struct_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirAutoTurnOverSet_Rsp() - (char *)sample);

                BdPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirFoldEn_Rsp() - (char *)sample);

                BdPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirUnfoldAlt_Rsp() - (char *)sample);

                BdPst_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatWelcome_Rsp() - (char *)sample);

                BdPst_Rsp_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExitVehicleMemory_Rsp() - (char *)sample);

                BdPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_Rsp_struct >;

                BdPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdPst_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdPst_Ctrl_struct_g_tc_members[19]=
                {

                    {
                        (char *)"ExMirCtrl_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirUDAdj_Act",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirLRAdj_Act",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirUDAdj_Act",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirLRAdj_Act",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTiltAdj_Act",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTeleAdj_Act",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerLongStroke_Req",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLMemPstExport_req",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRMemPstExPort_req",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatPstMem_Req",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatPstMem_Req",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTiltPst_Req",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTelePst_Req",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirUDPst_Req",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirLRPst_Req",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirUDPst_Req",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirLRPst_Req",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        19, /* Number of members */
                        BdPst_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_Ctrl_struct*/

                if (is_initialized) {
                    return &BdPst_Ctrl_struct_g_tc;
                }

                BdPst_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdPst_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_Ctrl_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&BdPst_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdPst_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdPst_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdPst_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo BdPst_Ctrl_struct_g_memberAccessInfos[19] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirCtrl_Act() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirUDAdj_Act() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirLRAdj_Act() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirUDAdj_Act() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirLRAdj_Act() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTiltAdj_Act() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTeleAdj_Act() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerLongStroke_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLMemPstExport_req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRMemPstExPort_req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatPstMem_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatPstMem_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTiltPst_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTelePst_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirUDPst_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirLRPst_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirUDPst_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirLRPst_Req() - (char *)sample);

                BdPst_Ctrl_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdPst_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_Ctrl_struct >;

                BdPst_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdPst_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdPst_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"BdPst_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        BdPst_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &BdPst_Ctrl_SOA_struct_g_tc;
                }

                BdPst_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdPst_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdPst_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo BdPst_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_Ctrl_SOA_u8() - (char *)sample);

                BdPst_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_Ctrl_SOA_struct >;

                BdPst_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdPst_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdPst_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdPst_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"BdPstBit",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BdPst_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_St_Get_struct*/

                if (is_initialized) {
                    return &BdPst_St_Get_struct_g_tc;
                }

                BdPst_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdPst_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                BdPst_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BdPst_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdPst_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                BdPst_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.ushort_value = 0;
                BdPst_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                BdPst_St_Get_struct_g_tc_members[0]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                BdPst_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                BdPst_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                BdPst_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdPst_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdPst_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo BdPst_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPstBit() - (char *)sample);

                BdPst_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdPst_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_St_Get_struct >;

                BdPst_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdPst_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::FLMemPstExportRsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode FLMemPstExportRsp_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member FLMemPstExportRsp_struct_g_tc_members[4]=
                {

                    {
                        (char *)"FLSeatExportPst",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLMemPstExportSt_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLMemPstExportMvSt_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode FLMemPstExportRsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::FLMemPstExportRsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        FLMemPstExportRsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for FLMemPstExportRsp_struct*/

                if (is_initialized) {
                    return &FLMemPstExportRsp_struct_g_tc;
                }

                FLMemPstExportRsp_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                FLMemPstExportRsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                FLMemPstExportRsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLMemPstExportRsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLMemPstExportRsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLMemPstExportRsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&FLMemPstExportRsp_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                FLMemPstExportRsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                FLMemPstExportRsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLMemPstExportRsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLMemPstExportRsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                FLMemPstExportRsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLMemPstExportRsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLMemPstExportRsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                FLMemPstExportRsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLMemPstExportRsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLMemPstExportRsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLMemPstExportRsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                FLMemPstExportRsp_struct_g_tc_members[3]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                FLMemPstExportRsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                FLMemPstExportRsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &FLMemPstExportRsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::FLMemPstExportRsp_struct *sample;

                static RTIXCdrMemberAccessInfo FLMemPstExportRsp_struct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo FLMemPstExportRsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &FLMemPstExportRsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::FLMemPstExportRsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                FLMemPstExportRsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatExportPst() - (char *)sample);

                FLMemPstExportRsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLMemPstExportSt_Rsp() - (char *)sample);

                FLMemPstExportRsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLMemPstExportMvSt_Rsp() - (char *)sample);

                FLMemPstExportRsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                FLMemPstExportRsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                FLMemPstExportRsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::FLMemPstExportRsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        FLMemPstExportRsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        FLMemPstExportRsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                FLMemPstExportRsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                FLMemPstExportRsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::FLMemPstExportRsp_struct >;

                FLMemPstExportRsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &FLMemPstExportRsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin FLMemPstExportRsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &FLMemPstExportRsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::FLMemPstExportRsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::FLMemPstExportRsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::FRMemPstExportRsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode FRMemPstExportRsp_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member FRMemPstExportRsp_struct_g_tc_members[4]=
                {

                    {
                        (char *)"FRSeatExportPst",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRMemPstExportSt_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRMemPstExportMvSt_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode FRMemPstExportRsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::FRMemPstExportRsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        FRMemPstExportRsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for FRMemPstExportRsp_struct*/

                if (is_initialized) {
                    return &FRMemPstExportRsp_struct_g_tc;
                }

                FRMemPstExportRsp_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                FRMemPstExportRsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                FRMemPstExportRsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRMemPstExportRsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRMemPstExportRsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRMemPstExportRsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&FRMemPstExportRsp_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                FRMemPstExportRsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                FRMemPstExportRsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRMemPstExportRsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRMemPstExportRsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                FRMemPstExportRsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRMemPstExportRsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRMemPstExportRsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                FRMemPstExportRsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRMemPstExportRsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRMemPstExportRsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRMemPstExportRsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                FRMemPstExportRsp_struct_g_tc_members[3]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                FRMemPstExportRsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                FRMemPstExportRsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &FRMemPstExportRsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::FRMemPstExportRsp_struct *sample;

                static RTIXCdrMemberAccessInfo FRMemPstExportRsp_struct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo FRMemPstExportRsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &FRMemPstExportRsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::FRMemPstExportRsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                FRMemPstExportRsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatExportPst() - (char *)sample);

                FRMemPstExportRsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRMemPstExportSt_Rsp() - (char *)sample);

                FRMemPstExportRsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRMemPstExportMvSt_Rsp() - (char *)sample);

                FRMemPstExportRsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                FRMemPstExportRsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                FRMemPstExportRsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::FRMemPstExportRsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        FRMemPstExportRsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        FRMemPstExportRsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                FRMemPstExportRsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                FRMemPstExportRsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::FRMemPstExportRsp_struct >;

                FRMemPstExportRsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &FRMemPstExportRsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin FRMemPstExportRsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &FRMemPstExportRsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::FRMemPstExportRsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::FRMemPstExportRsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdPst_St_struct_g_tc_FLMemPstExportRsp_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,5L, NULL,NULL);
                static DDS_TypeCode BdPst_St_struct_g_tc_FRMemPstExportRsp_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,4L, NULL,NULL);

                static DDS_TypeCode_Member BdPst_St_struct_g_tc_members[22]=
                {

                    {
                        (char *)"ExMirCtrl_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirUDMv_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirLRMv_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirUDMv_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirLRMv_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTiltMv_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTeleMv_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirCtrlMv_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirCtrlMv_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerLongStrokeSt_Rsp",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerLongStrokeMoveSt_Rsp",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerLongStrokeStpRsn_Rsp",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatPstMemWin_Req",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatPstMemWin_Req",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTiltPst_Rsp",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerTelePst_Rsp",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirUDPst_Rsp",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirLRPst_Rsp",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirUDPst_Rsp",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirLRPst_Rsp",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLMemPstExportRsp",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRMemPstExportRsp",/* Member name */
                        {
                            21,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        22, /* Number of members */
                        BdPst_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_St_struct*/

                if (is_initialized) {
                    return &BdPst_St_struct_g_tc;
                }

                BdPst_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_St_struct_g_tc_FLMemPstExportRsp_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::FLMemPstExportRsp_struct>::get().native();
                BdPst_St_struct_g_tc_FRMemPstExportRsp_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::FRMemPstExportRsp_struct>::get().native();
                BdPst_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::interpreter::initialize_bool_typecode();
                BdPst_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdPst_St_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)& BdPst_St_struct_g_tc_FLMemPstExportRsp_array;
                BdPst_St_struct_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)& BdPst_St_struct_g_tc_FRMemPstExportRsp_array;

                /* Initialize the values for member annotations. */
                BdPst_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_BOOLEAN;
                BdPst_St_struct_g_tc_members[0]._annotations._defaultValue._u.boolean_value = 0;

                BdPst_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                BdPst_St_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdPst_St_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdPst_St_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdPst_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_St_struct *sample;

                static RTIXCdrMemberAccessInfo BdPst_St_struct_g_memberAccessInfos[22] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExMirCtrl_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirUDMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirLRMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirUDMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirLRMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTiltMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTeleMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirCtrlMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirCtrlMv_St() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerLongStrokeSt_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerLongStrokeMoveSt_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerLongStrokeStpRsn_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatPstMemWin_Req() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatPstMemWin_Req() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTiltPst_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerTelePst_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirUDPst_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirLRPst_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirUDPst_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirLRPst_Rsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLMemPstExportRsp() - (char *)sample);

                BdPst_St_struct_g_memberAccessInfos[21].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRMemPstExportRsp() - (char *)sample);

                BdPst_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_St_struct >;

                BdPst_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdPst_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::FLSeatMemPst_Req_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member FLSeatMemPst_Req_struct_g_tc_members[7]=
                {

                    {
                        (char *)"FLSeatMemPstPurpose_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemFBPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemBackrestPst_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemHgtPst_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemCshnAngPst_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLMemLegAngCshnExtPst_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemLegLengthPst_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode FLSeatMemPst_Req_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::FLSeatMemPst_Req_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        FLSeatMemPst_Req_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for FLSeatMemPst_Req_struct*/

                if (is_initialized) {
                    return &FLSeatMemPst_Req_struct_g_tc;
                }

                FLSeatMemPst_Req_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                FLSeatMemPst_Req_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Req_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Req_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Req_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Req_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Req_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Req_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                FLSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Req_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Req_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Req_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Req_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Req_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                FLSeatMemPst_Req_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &FLSeatMemPst_Req_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::FLSeatMemPst_Req_struct *sample;

                static RTIXCdrMemberAccessInfo FLSeatMemPst_Req_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo FLSeatMemPst_Req_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &FLSeatMemPst_Req_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::FLSeatMemPst_Req_struct);
                if (sample == NULL) {
                    return NULL;
                }

                FLSeatMemPst_Req_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemPstPurpose_Req() - (char *)sample);

                FLSeatMemPst_Req_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemFBPst_Req() - (char *)sample);

                FLSeatMemPst_Req_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemBackrestPst_Req() - (char *)sample);

                FLSeatMemPst_Req_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemHgtPst_Req() - (char *)sample);

                FLSeatMemPst_Req_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemCshnAngPst_Req() - (char *)sample);

                FLSeatMemPst_Req_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLMemLegAngCshnExtPst_Req() - (char *)sample);

                FLSeatMemPst_Req_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemLegLengthPst_Req() - (char *)sample);

                FLSeatMemPst_Req_struct_g_sampleAccessInfo.memberAccessInfos = 
                FLSeatMemPst_Req_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::FLSeatMemPst_Req_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        FLSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        FLSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                FLSeatMemPst_Req_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                FLSeatMemPst_Req_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::FLSeatMemPst_Req_struct >;

                FLSeatMemPst_Req_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &FLSeatMemPst_Req_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin FLSeatMemPst_Req_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &FLSeatMemPst_Req_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::FLSeatMemPst_Req_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::FLSeatMemPst_Req_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::FRSeatMemPst_Req_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member FRSeatMemPst_Req_struct_g_tc_members[7]=
                {

                    {
                        (char *)"FRSeatPstPurpose_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemFBPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemBackrestPst_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemHgtPst_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemCshnAngPst_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemLegAngCshnExtPst_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemLegLengthPst_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode FRSeatMemPst_Req_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::FRSeatMemPst_Req_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        FRSeatMemPst_Req_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for FRSeatMemPst_Req_struct*/

                if (is_initialized) {
                    return &FRSeatMemPst_Req_struct_g_tc;
                }

                FRSeatMemPst_Req_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                FRSeatMemPst_Req_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Req_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Req_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Req_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Req_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Req_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Req_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                FRSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Req_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Req_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Req_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Req_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Req_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                FRSeatMemPst_Req_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &FRSeatMemPst_Req_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::FRSeatMemPst_Req_struct *sample;

                static RTIXCdrMemberAccessInfo FRSeatMemPst_Req_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo FRSeatMemPst_Req_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &FRSeatMemPst_Req_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::FRSeatMemPst_Req_struct);
                if (sample == NULL) {
                    return NULL;
                }

                FRSeatMemPst_Req_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatPstPurpose_Req() - (char *)sample);

                FRSeatMemPst_Req_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemFBPst_Req() - (char *)sample);

                FRSeatMemPst_Req_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemBackrestPst_Req() - (char *)sample);

                FRSeatMemPst_Req_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemHgtPst_Req() - (char *)sample);

                FRSeatMemPst_Req_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemCshnAngPst_Req() - (char *)sample);

                FRSeatMemPst_Req_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemLegAngCshnExtPst_Req() - (char *)sample);

                FRSeatMemPst_Req_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemLegLengthPst_Req() - (char *)sample);

                FRSeatMemPst_Req_struct_g_sampleAccessInfo.memberAccessInfos = 
                FRSeatMemPst_Req_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::FRSeatMemPst_Req_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        FRSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        FRSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                FRSeatMemPst_Req_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                FRSeatMemPst_Req_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::FRSeatMemPst_Req_struct >;

                FRSeatMemPst_Req_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &FRSeatMemPst_Req_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin FRSeatMemPst_Req_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &FRSeatMemPst_Req_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::FRSeatMemPst_Req_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::FRSeatMemPst_Req_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SRLSeatMemPst_Req_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SRLSeatMemPst_Req_struct_g_tc_members[6]=
                {

                    {
                        (char *)"SRLSeatMemPstPurpose_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemFBPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemBackrestPst_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemHgtPst_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemCshnAngPst_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemLegAngCshnExtPst_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SRLSeatMemPst_Req_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SRLSeatMemPst_Req_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        SRLSeatMemPst_Req_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SRLSeatMemPst_Req_struct*/

                if (is_initialized) {
                    return &SRLSeatMemPst_Req_struct_g_tc;
                }

                SRLSeatMemPst_Req_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SRLSeatMemPst_Req_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Req_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Req_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Req_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Req_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Req_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                SRLSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Req_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SRLSeatMemPst_Req_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SRLSeatMemPst_Req_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SRLSeatMemPst_Req_struct *sample;

                static RTIXCdrMemberAccessInfo SRLSeatMemPst_Req_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SRLSeatMemPst_Req_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SRLSeatMemPst_Req_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SRLSeatMemPst_Req_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SRLSeatMemPst_Req_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemPstPurpose_Req() - (char *)sample);

                SRLSeatMemPst_Req_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemFBPst_Req() - (char *)sample);

                SRLSeatMemPst_Req_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemBackrestPst_Req() - (char *)sample);

                SRLSeatMemPst_Req_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemHgtPst_Req() - (char *)sample);

                SRLSeatMemPst_Req_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemCshnAngPst_Req() - (char *)sample);

                SRLSeatMemPst_Req_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemLegAngCshnExtPst_Req() - (char *)sample);

                SRLSeatMemPst_Req_struct_g_sampleAccessInfo.memberAccessInfos = 
                SRLSeatMemPst_Req_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SRLSeatMemPst_Req_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SRLSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SRLSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SRLSeatMemPst_Req_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SRLSeatMemPst_Req_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SRLSeatMemPst_Req_struct >;

                SRLSeatMemPst_Req_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SRLSeatMemPst_Req_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SRLSeatMemPst_Req_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SRLSeatMemPst_Req_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SRLSeatMemPst_Req_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SRLSeatMemPst_Req_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SRRSeatMemPst_Req_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SRRSeatMemPst_Req_struct_g_tc_members[6]=
                {

                    {
                        (char *)"SRRSeatMemPstPurpose_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemFBPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemBackrestPst_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemHgtPst_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemCshnAngPst_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemLegAngCshnExtPst_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SRRSeatMemPst_Req_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SRRSeatMemPst_Req_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        SRRSeatMemPst_Req_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SRRSeatMemPst_Req_struct*/

                if (is_initialized) {
                    return &SRRSeatMemPst_Req_struct_g_tc;
                }

                SRRSeatMemPst_Req_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SRRSeatMemPst_Req_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Req_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Req_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Req_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Req_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Req_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                SRRSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Req_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Req_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SRRSeatMemPst_Req_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SRRSeatMemPst_Req_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SRRSeatMemPst_Req_struct *sample;

                static RTIXCdrMemberAccessInfo SRRSeatMemPst_Req_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SRRSeatMemPst_Req_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SRRSeatMemPst_Req_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SRRSeatMemPst_Req_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SRRSeatMemPst_Req_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemPstPurpose_Req() - (char *)sample);

                SRRSeatMemPst_Req_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemFBPst_Req() - (char *)sample);

                SRRSeatMemPst_Req_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemBackrestPst_Req() - (char *)sample);

                SRRSeatMemPst_Req_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemHgtPst_Req() - (char *)sample);

                SRRSeatMemPst_Req_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemCshnAngPst_Req() - (char *)sample);

                SRRSeatMemPst_Req_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemLegAngCshnExtPst_Req() - (char *)sample);

                SRRSeatMemPst_Req_struct_g_sampleAccessInfo.memberAccessInfos = 
                SRRSeatMemPst_Req_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SRRSeatMemPst_Req_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SRRSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SRRSeatMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SRRSeatMemPst_Req_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SRRSeatMemPst_Req_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SRRSeatMemPst_Req_struct >;

                SRRSeatMemPst_Req_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SRRSeatMemPst_Req_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SRRSeatMemPst_Req_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SRRSeatMemPst_Req_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SRRSeatMemPst_Req_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SRRSeatMemPst_Req_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SteerMemPst_Req_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SteerMemPst_Req_struct_g_tc_members[3]=
                {

                    {
                        (char *)"SteerMemPstPurpose_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerMemTiltPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerMemTelePst_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SteerMemPst_Req_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SteerMemPst_Req_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        SteerMemPst_Req_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SteerMemPst_Req_struct*/

                if (is_initialized) {
                    return &SteerMemPst_Req_struct_g_tc;
                }

                SteerMemPst_Req_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SteerMemPst_Req_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SteerMemPst_Req_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SteerMemPst_Req_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                SteerMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SteerMemPst_Req_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SteerMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SteerMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SteerMemPst_Req_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SteerMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SteerMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                SteerMemPst_Req_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SteerMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SteerMemPst_Req_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SteerMemPst_Req_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SteerMemPst_Req_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SteerMemPst_Req_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SteerMemPst_Req_struct *sample;

                static RTIXCdrMemberAccessInfo SteerMemPst_Req_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SteerMemPst_Req_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SteerMemPst_Req_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SteerMemPst_Req_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SteerMemPst_Req_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemPstPurpose_Req() - (char *)sample);

                SteerMemPst_Req_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemTiltPst_Req() - (char *)sample);

                SteerMemPst_Req_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemTelePst_Req() - (char *)sample);

                SteerMemPst_Req_struct_g_sampleAccessInfo.memberAccessInfos = 
                SteerMemPst_Req_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SteerMemPst_Req_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SteerMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SteerMemPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SteerMemPst_Req_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SteerMemPst_Req_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SteerMemPst_Req_struct >;

                SteerMemPst_Req_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SteerMemPst_Req_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SteerMemPst_Req_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SteerMemPst_Req_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SteerMemPst_Req_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SteerMemPst_Req_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::LExMirMemLRPst_Req_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member LExMirMemLRPst_Req_struct_g_tc_members[3]=
                {

                    {
                        (char *)"LExMirMemUDPst_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirMemLRPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirMemLRPstPurpose_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode LExMirMemLRPst_Req_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::LExMirMemLRPst_Req_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        LExMirMemLRPst_Req_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for LExMirMemLRPst_Req_struct*/

                if (is_initialized) {
                    return &LExMirMemLRPst_Req_struct_g_tc;
                }

                LExMirMemLRPst_Req_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                LExMirMemLRPst_Req_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                LExMirMemLRPst_Req_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                LExMirMemLRPst_Req_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                LExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                LExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                LExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                LExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                LExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                LExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                LExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                LExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                LExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                LExMirMemLRPst_Req_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                LExMirMemLRPst_Req_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &LExMirMemLRPst_Req_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::LExMirMemLRPst_Req_struct *sample;

                static RTIXCdrMemberAccessInfo LExMirMemLRPst_Req_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo LExMirMemLRPst_Req_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &LExMirMemLRPst_Req_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::LExMirMemLRPst_Req_struct);
                if (sample == NULL) {
                    return NULL;
                }

                LExMirMemLRPst_Req_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemUDPst_Req() - (char *)sample);

                LExMirMemLRPst_Req_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemLRPst_Req() - (char *)sample);

                LExMirMemLRPst_Req_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemLRPstPurpose_Req() - (char *)sample);

                LExMirMemLRPst_Req_struct_g_sampleAccessInfo.memberAccessInfos = 
                LExMirMemLRPst_Req_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::LExMirMemLRPst_Req_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        LExMirMemLRPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        LExMirMemLRPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                LExMirMemLRPst_Req_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                LExMirMemLRPst_Req_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::LExMirMemLRPst_Req_struct >;

                LExMirMemLRPst_Req_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &LExMirMemLRPst_Req_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin LExMirMemLRPst_Req_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &LExMirMemLRPst_Req_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::LExMirMemLRPst_Req_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::LExMirMemLRPst_Req_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::RExMirMemLRPst_Req_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member RExMirMemLRPst_Req_struct_g_tc_members[3]=
                {

                    {
                        (char *)"RExMirMemUDPst_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirMemLRPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirMemLRPstPurpose_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode RExMirMemLRPst_Req_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::RExMirMemLRPst_Req_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        RExMirMemLRPst_Req_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for RExMirMemLRPst_Req_struct*/

                if (is_initialized) {
                    return &RExMirMemLRPst_Req_struct_g_tc;
                }

                RExMirMemLRPst_Req_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                RExMirMemLRPst_Req_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                RExMirMemLRPst_Req_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                RExMirMemLRPst_Req_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                RExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                RExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                RExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                RExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                RExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                RExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                RExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                RExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                RExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Req_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                RExMirMemLRPst_Req_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                RExMirMemLRPst_Req_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &RExMirMemLRPst_Req_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::RExMirMemLRPst_Req_struct *sample;

                static RTIXCdrMemberAccessInfo RExMirMemLRPst_Req_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo RExMirMemLRPst_Req_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &RExMirMemLRPst_Req_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::RExMirMemLRPst_Req_struct);
                if (sample == NULL) {
                    return NULL;
                }

                RExMirMemLRPst_Req_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemUDPst_Req() - (char *)sample);

                RExMirMemLRPst_Req_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemLRPst_Req() - (char *)sample);

                RExMirMemLRPst_Req_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemLRPstPurpose_Req() - (char *)sample);

                RExMirMemLRPst_Req_struct_g_sampleAccessInfo.memberAccessInfos = 
                RExMirMemLRPst_Req_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::RExMirMemLRPst_Req_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        RExMirMemLRPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        RExMirMemLRPst_Req_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                RExMirMemLRPst_Req_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                RExMirMemLRPst_Req_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::RExMirMemLRPst_Req_struct >;

                RExMirMemLRPst_Req_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &RExMirMemLRPst_Req_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin RExMirMemLRPst_Req_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &RExMirMemLRPst_Req_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::RExMirMemLRPst_Req_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::RExMirMemLRPst_Req_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdMemPst_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdMemPst_Set_struct_g_tc_FLSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,5L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Set_struct_g_tc_FRSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,4L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Set_struct_g_tc_SRLSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,2L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Set_struct_g_tc_SRRSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,2L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Set_struct_g_tc_SteerMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,5L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Set_struct_g_tc_LExMirMemLRPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,8L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Set_struct_g_tc_RExMirMemLRPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,8L, NULL,NULL);

                static DDS_TypeCode_Member BdMemPst_Set_struct_g_tc_members[7]=
                {

                    {
                        (char *)"FLSeatMemPst_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemPst_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemPst_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerMemPst_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirMemLRPst_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirMemLRPst_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdMemPst_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdMemPst_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        BdMemPst_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdMemPst_Set_struct*/

                if (is_initialized) {
                    return &BdMemPst_Set_struct_g_tc;
                }

                BdMemPst_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdMemPst_Set_struct_g_tc_FLSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::FRSeatMemPst_Req_struct>::get().native();
                BdMemPst_Set_struct_g_tc_FRSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::FRSeatMemPst_Req_struct>::get().native();
                BdMemPst_Set_struct_g_tc_SRLSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SRLSeatMemPst_Req_struct>::get().native();
                BdMemPst_Set_struct_g_tc_SRRSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SRRSeatMemPst_Req_struct>::get().native();
                BdMemPst_Set_struct_g_tc_SteerMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SteerMemPst_Req_struct>::get().native();
                BdMemPst_Set_struct_g_tc_LExMirMemLRPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::LExMirMemLRPst_Req_struct>::get().native();
                BdMemPst_Set_struct_g_tc_RExMirMemLRPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::RExMirMemLRPst_Req_struct>::get().native();
                BdMemPst_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Set_struct_g_tc_FLSeatMemPst_Req_array;
                BdMemPst_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Set_struct_g_tc_FRSeatMemPst_Req_array;
                BdMemPst_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Set_struct_g_tc_SRLSeatMemPst_Req_array;
                BdMemPst_Set_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Set_struct_g_tc_SRRSeatMemPst_Req_array;
                BdMemPst_Set_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Set_struct_g_tc_SteerMemPst_Req_array;
                BdMemPst_Set_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Set_struct_g_tc_LExMirMemLRPst_Req_array;
                BdMemPst_Set_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Set_struct_g_tc_RExMirMemLRPst_Req_array;

                /* Initialize the values for member annotations. */

                BdMemPst_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdMemPst_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdMemPst_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdMemPst_Set_struct *sample;

                static RTIXCdrMemberAccessInfo BdMemPst_Set_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdMemPst_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdMemPst_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdMemPst_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdMemPst_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemPst_Req() - (char *)sample);

                BdMemPst_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemPst_Req() - (char *)sample);

                BdMemPst_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemPst_Req() - (char *)sample);

                BdMemPst_Set_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemPst_Req() - (char *)sample);

                BdMemPst_Set_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemPst_Req() - (char *)sample);

                BdMemPst_Set_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemLRPst_Req() - (char *)sample);

                BdMemPst_Set_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemLRPst_Req() - (char *)sample);

                BdMemPst_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdMemPst_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdMemPst_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdMemPst_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdMemPst_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdMemPst_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdMemPst_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdMemPst_Set_struct >;

                BdMemPst_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdMemPst_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdMemPst_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdMemPst_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdMemPst_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdMemPst_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdMemPst_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdMemPst_Get_struct_g_tc_members[7]=
                {

                    {
                        (char *)"FLSeatMemPstGet_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemPstGet_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemPstGet_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemPstGet_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerMemPstGet_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirMemLRPstGet_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirMemLRPstGet_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdMemPst_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdMemPst_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        BdMemPst_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdMemPst_Get_struct*/

                if (is_initialized) {
                    return &BdMemPst_Get_struct_g_tc;
                }

                BdMemPst_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdMemPst_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdMemPst_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdMemPst_Get_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdMemPst_Get_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdMemPst_Get_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdMemPst_Get_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdMemPst_Get_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdMemPst_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdMemPst_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdMemPst_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdMemPst_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdMemPst_Get_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdMemPst_Get_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdMemPst_Get_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdMemPst_Get_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdMemPst_Get_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdMemPst_Get_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdMemPst_Get_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdMemPst_Get_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdMemPst_Get_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BdMemPst_Get_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdMemPst_Get_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdMemPst_Get_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                BdMemPst_Get_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdMemPst_Get_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdMemPst_Get_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                BdMemPst_Get_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdMemPst_Get_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdMemPst_Get_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdMemPst_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdMemPst_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdMemPst_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdMemPst_Get_struct *sample;

                static RTIXCdrMemberAccessInfo BdMemPst_Get_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdMemPst_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdMemPst_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdMemPst_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdMemPst_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemPstGet_Req() - (char *)sample);

                BdMemPst_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemPstGet_Req() - (char *)sample);

                BdMemPst_Get_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemPstGet_Req() - (char *)sample);

                BdMemPst_Get_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemPstGet_Req() - (char *)sample);

                BdMemPst_Get_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemPstGet_Req() - (char *)sample);

                BdMemPst_Get_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemLRPstGet_Req() - (char *)sample);

                BdMemPst_Get_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemLRPstGet_Req() - (char *)sample);

                BdMemPst_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdMemPst_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdMemPst_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdMemPst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdMemPst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdMemPst_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdMemPst_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdMemPst_Get_struct >;

                BdMemPst_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdMemPst_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdMemPst_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdMemPst_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdMemPst_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdMemPst_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::FLSeatMemPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member FLSeatMemPst_Rsp_struct_g_tc_members[7]=
                {

                    {
                        (char *)"FLSeatMemPstPurpose_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemFBPst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemBackrestPst_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemHgtPst_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemCshnAngPst_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemLegAngCshnExtPst_Rsp",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMemLegLengthPst_Rsp",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode FLSeatMemPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::FLSeatMemPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        FLSeatMemPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for FLSeatMemPst_Rsp_struct*/

                if (is_initialized) {
                    return &FLSeatMemPst_Rsp_struct_g_tc;
                }

                FLSeatMemPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                FLSeatMemPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Rsp_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Rsp_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FLSeatMemPst_Rsp_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                FLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                FLSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FLSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FLSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FLSeatMemPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                FLSeatMemPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &FLSeatMemPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::FLSeatMemPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo FLSeatMemPst_Rsp_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo FLSeatMemPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &FLSeatMemPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::FLSeatMemPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                FLSeatMemPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemPstPurpose_Rsp() - (char *)sample);

                FLSeatMemPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemFBPst_Rsp() - (char *)sample);

                FLSeatMemPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemBackrestPst_Rsp() - (char *)sample);

                FLSeatMemPst_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemHgtPst_Rsp() - (char *)sample);

                FLSeatMemPst_Rsp_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemCshnAngPst_Rsp() - (char *)sample);

                FLSeatMemPst_Rsp_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemLegAngCshnExtPst_Rsp() - (char *)sample);

                FLSeatMemPst_Rsp_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemLegLengthPst_Rsp() - (char *)sample);

                FLSeatMemPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                FLSeatMemPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::FLSeatMemPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        FLSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        FLSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                FLSeatMemPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                FLSeatMemPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::FLSeatMemPst_Rsp_struct >;

                FLSeatMemPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &FLSeatMemPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin FLSeatMemPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &FLSeatMemPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::FLSeatMemPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::FLSeatMemPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::FRSeatMemPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member FRSeatMemPst_Rsp_struct_g_tc_members[7]=
                {

                    {
                        (char *)"FRSeatMemPstPurpose_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemFBPst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemBackrestPst_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemHgtPst_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemCshnAngPst_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemLegAngCshnExtPst_Rsp",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemLegLengthPst_Rsp",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode FRSeatMemPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::FRSeatMemPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        FRSeatMemPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for FRSeatMemPst_Rsp_struct*/

                if (is_initialized) {
                    return &FRSeatMemPst_Rsp_struct_g_tc;
                }

                FRSeatMemPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                FRSeatMemPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Rsp_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Rsp_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                FRSeatMemPst_Rsp_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                FRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                FRSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                FRSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                FRSeatMemPst_Rsp_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                FRSeatMemPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                FRSeatMemPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &FRSeatMemPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::FRSeatMemPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo FRSeatMemPst_Rsp_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo FRSeatMemPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &FRSeatMemPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::FRSeatMemPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                FRSeatMemPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemPstPurpose_Rsp() - (char *)sample);

                FRSeatMemPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemFBPst_Rsp() - (char *)sample);

                FRSeatMemPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemBackrestPst_Rsp() - (char *)sample);

                FRSeatMemPst_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemHgtPst_Rsp() - (char *)sample);

                FRSeatMemPst_Rsp_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemCshnAngPst_Rsp() - (char *)sample);

                FRSeatMemPst_Rsp_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemLegAngCshnExtPst_Rsp() - (char *)sample);

                FRSeatMemPst_Rsp_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemLegLengthPst_Rsp() - (char *)sample);

                FRSeatMemPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                FRSeatMemPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::FRSeatMemPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        FRSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        FRSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                FRSeatMemPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                FRSeatMemPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::FRSeatMemPst_Rsp_struct >;

                FRSeatMemPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &FRSeatMemPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin FRSeatMemPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &FRSeatMemPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::FRSeatMemPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::FRSeatMemPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SRLSeatMemPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SRLSeatMemPst_Rsp_struct_g_tc_members[6]=
                {

                    {
                        (char *)"SRLSeatMemPstPurpose_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemFBPst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemBackrestPst_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemHgtPst_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemCshnAngPst_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemLegAngCshnExtPst_Rsp",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SRLSeatMemPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SRLSeatMemPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        SRLSeatMemPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SRLSeatMemPst_Rsp_struct*/

                if (is_initialized) {
                    return &SRLSeatMemPst_Rsp_struct_g_tc;
                }

                SRLSeatMemPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SRLSeatMemPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Rsp_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRLSeatMemPst_Rsp_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                SRLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                SRLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRLSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRLSeatMemPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SRLSeatMemPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SRLSeatMemPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SRLSeatMemPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo SRLSeatMemPst_Rsp_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SRLSeatMemPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SRLSeatMemPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemPstPurpose_Rsp() - (char *)sample);

                SRLSeatMemPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemFBPst_Rsp() - (char *)sample);

                SRLSeatMemPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemBackrestPst_Rsp() - (char *)sample);

                SRLSeatMemPst_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemHgtPst_Rsp() - (char *)sample);

                SRLSeatMemPst_Rsp_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemCshnAngPst_Rsp() - (char *)sample);

                SRLSeatMemPst_Rsp_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemLegAngCshnExtPst_Rsp() - (char *)sample);

                SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                SRLSeatMemPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SRLSeatMemPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SRLSeatMemPst_Rsp_struct >;

                SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SRLSeatMemPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SRLSeatMemPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SRLSeatMemPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SRLSeatMemPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SRLSeatMemPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SRRSeatMemPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SRRSeatMemPst_Rsp_struct_g_tc_members[6]=
                {

                    {
                        (char *)"SRRSeatMemPstPurpose_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemFBPst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemBackrestPst_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemHgtPst_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemCshnAngPst_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemLegAngCshnExtPst_Rsp",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SRRSeatMemPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SRRSeatMemPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        SRRSeatMemPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SRRSeatMemPst_Rsp_struct*/

                if (is_initialized) {
                    return &SRRSeatMemPst_Rsp_struct_g_tc;
                }

                SRRSeatMemPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SRRSeatMemPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Rsp_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SRRSeatMemPst_Rsp_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                SRRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                SRRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SRRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SRRSeatMemPst_Rsp_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SRRSeatMemPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SRRSeatMemPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SRRSeatMemPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SRRSeatMemPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo SRRSeatMemPst_Rsp_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SRRSeatMemPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SRRSeatMemPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemPstPurpose_Rsp() - (char *)sample);

                SRRSeatMemPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemFBPst_Rsp() - (char *)sample);

                SRRSeatMemPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemBackrestPst_Rsp() - (char *)sample);

                SRRSeatMemPst_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemHgtPst_Rsp() - (char *)sample);

                SRRSeatMemPst_Rsp_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemCshnAngPst_Rsp() - (char *)sample);

                SRRSeatMemPst_Rsp_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemLegAngCshnExtPst_Rsp() - (char *)sample);

                SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                SRRSeatMemPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SRRSeatMemPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SRRSeatMemPst_Rsp_struct >;

                SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SRRSeatMemPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SRRSeatMemPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SRRSeatMemPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SRRSeatMemPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SRRSeatMemPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::SteerSeatMemPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member SteerSeatMemPst_Rsp_struct_g_tc_members[3]=
                {

                    {
                        (char *)"SteerMemPstPurpose_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerMemTiltPst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerMemTelePst_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SteerSeatMemPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::SteerSeatMemPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        SteerSeatMemPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SteerSeatMemPst_Rsp_struct*/

                if (is_initialized) {
                    return &SteerSeatMemPst_Rsp_struct_g_tc;
                }

                SteerSeatMemPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SteerSeatMemPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SteerSeatMemPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                SteerSeatMemPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                SteerSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                SteerSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SteerSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SteerSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                SteerSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SteerSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SteerSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                SteerSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                SteerSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                SteerSeatMemPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                SteerSeatMemPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                SteerSeatMemPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SteerSeatMemPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::SteerSeatMemPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo SteerSeatMemPst_Rsp_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::SteerSeatMemPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                SteerSeatMemPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemPstPurpose_Rsp() - (char *)sample);

                SteerSeatMemPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemTiltPst_Rsp() - (char *)sample);

                SteerSeatMemPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemTelePst_Rsp() - (char *)sample);

                SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                SteerSeatMemPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::SteerSeatMemPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::SteerSeatMemPst_Rsp_struct >;

                SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SteerSeatMemPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SteerSeatMemPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SteerSeatMemPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::SteerSeatMemPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::SteerSeatMemPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::LExMirMemLRPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member LExMirMemLRPst_Rsp_struct_g_tc_members[3]=
                {

                    {
                        (char *)"LExMirMemUDPst_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirMemLRPst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirMemLRPstPurpose_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode LExMirMemLRPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::LExMirMemLRPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        LExMirMemLRPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for LExMirMemLRPst_Rsp_struct*/

                if (is_initialized) {
                    return &LExMirMemLRPst_Rsp_struct_g_tc;
                }

                LExMirMemLRPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                LExMirMemLRPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                LExMirMemLRPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                LExMirMemLRPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                LExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                LExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                LExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                LExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                LExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                LExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                LExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                LExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                LExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                LExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                LExMirMemLRPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                LExMirMemLRPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &LExMirMemLRPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::LExMirMemLRPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo LExMirMemLRPst_Rsp_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::LExMirMemLRPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                LExMirMemLRPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemUDPst_Rsp() - (char *)sample);

                LExMirMemLRPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemLRPst_Rsp() - (char *)sample);

                LExMirMemLRPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemLRPstPurpose_Rsp() - (char *)sample);

                LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                LExMirMemLRPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::LExMirMemLRPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::LExMirMemLRPst_Rsp_struct >;

                LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &LExMirMemLRPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin LExMirMemLRPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &LExMirMemLRPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::LExMirMemLRPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::LExMirMemLRPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::RExMirMemLRPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member RExMirMemLRPst_Rsp_struct_g_tc_members[3]=
                {

                    {
                        (char *)"RExMirMemUDPst_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirMemLRPst_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirMemLRPstPurpose_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode RExMirMemLRPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::RExMirMemLRPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        RExMirMemLRPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for RExMirMemLRPst_Rsp_struct*/

                if (is_initialized) {
                    return &RExMirMemLRPst_Rsp_struct_g_tc;
                }

                RExMirMemLRPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                RExMirMemLRPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                RExMirMemLRPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                RExMirMemLRPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                RExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                RExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                RExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                RExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                RExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                RExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                RExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                RExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                RExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                RExMirMemLRPst_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                RExMirMemLRPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                RExMirMemLRPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &RExMirMemLRPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::RExMirMemLRPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo RExMirMemLRPst_Rsp_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::RExMirMemLRPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                RExMirMemLRPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemUDPst_Rsp() - (char *)sample);

                RExMirMemLRPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemLRPst_Rsp() - (char *)sample);

                RExMirMemLRPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemLRPstPurpose_Rsp() - (char *)sample);

                RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                RExMirMemLRPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::RExMirMemLRPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::RExMirMemLRPst_Rsp_struct >;

                RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &RExMirMemLRPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin RExMirMemLRPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &RExMirMemLRPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::RExMirMemLRPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::RExMirMemLRPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdMemPst_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc_FLSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,5L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc_FRSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,4L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc_SRLSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,2L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc_SRRSeatMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,2L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc_SteerMemPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,5L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc_LExMirMemLRPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,8L, NULL,NULL);
                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc_RExMirMemLRPst_Req_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,8L, NULL,NULL);

                static DDS_TypeCode_Member BdMemPst_Rsp_struct_g_tc_members[7]=
                {

                    {
                        (char *)"FLSeatMemPst_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMemPst_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatMemPst_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatMemPst_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerMemPst_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LExMirMemLRPst_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RExMirMemLRPst_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdMemPst_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdMemPst_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        BdMemPst_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdMemPst_Rsp_struct*/

                if (is_initialized) {
                    return &BdMemPst_Rsp_struct_g_tc;
                }

                BdMemPst_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdMemPst_Rsp_struct_g_tc_FLSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::FLSeatMemPst_Rsp_struct>::get().native();
                BdMemPst_Rsp_struct_g_tc_FRSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::FRSeatMemPst_Rsp_struct>::get().native();
                BdMemPst_Rsp_struct_g_tc_SRLSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SRLSeatMemPst_Rsp_struct>::get().native();
                BdMemPst_Rsp_struct_g_tc_SRRSeatMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SRRSeatMemPst_Rsp_struct>::get().native();
                BdMemPst_Rsp_struct_g_tc_SteerMemPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::SteerSeatMemPst_Rsp_struct>::get().native();
                BdMemPst_Rsp_struct_g_tc_LExMirMemLRPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::LExMirMemLRPst_Rsp_struct>::get().native();
                BdMemPst_Rsp_struct_g_tc_RExMirMemLRPst_Req_array._data._typeCode =(RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::RExMirMemLRPst_Rsp_struct>::get().native();
                BdMemPst_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Rsp_struct_g_tc_FLSeatMemPst_Req_array;
                BdMemPst_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Rsp_struct_g_tc_FRSeatMemPst_Req_array;
                BdMemPst_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Rsp_struct_g_tc_SRLSeatMemPst_Req_array;
                BdMemPst_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Rsp_struct_g_tc_SRRSeatMemPst_Req_array;
                BdMemPst_Rsp_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Rsp_struct_g_tc_SteerMemPst_Req_array;
                BdMemPst_Rsp_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Rsp_struct_g_tc_LExMirMemLRPst_Req_array;
                BdMemPst_Rsp_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)& BdMemPst_Rsp_struct_g_tc_RExMirMemLRPst_Req_array;

                /* Initialize the values for member annotations. */

                BdMemPst_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdMemPst_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdMemPst_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdMemPst_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo BdMemPst_Rsp_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdMemPst_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdMemPst_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdMemPst_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdMemPst_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMemPst_Req() - (char *)sample);

                BdMemPst_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMemPst_Req() - (char *)sample);

                BdMemPst_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatMemPst_Req() - (char *)sample);

                BdMemPst_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatMemPst_Req() - (char *)sample);

                BdMemPst_Rsp_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerMemPst_Req() - (char *)sample);

                BdMemPst_Rsp_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LExMirMemLRPst_Req() - (char *)sample);

                BdMemPst_Rsp_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RExMirMemLRPst_Req() - (char *)sample);

                BdMemPst_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdMemPst_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdMemPst_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdMemPst_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdMemPst_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdMemPst_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdMemPst_Rsp_struct >;

                BdMemPst_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdMemPst_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdMemPst_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdMemPst_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdMemPst_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdMemPst_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdPst_Srv_Req_Union_g_tc_members[6]=
                {

                    {
                        (char *)"BdPst_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdPst_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdPst_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdPst_St_Get",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdMemPst_Set",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(4),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdMemPst_Get",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(5),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        BdPst_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_Srv_Req_Union*/

                if (is_initialized) {
                    return &BdPst_Srv_Req_Union_g_tc;
                }

                BdPst_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_Set_struct>::get().native();
                BdPst_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_Get_struct>::get().native();
                BdPst_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_Ctrl_struct>::get().native();
                BdPst_Srv_Req_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_St_Get_struct>::get().native();
                BdPst_Srv_Req_Union_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdMemPst_Set_struct>::get().native();
                BdPst_Srv_Req_Union_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdMemPst_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                BdPst_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                BdPst_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo BdPst_Srv_Req_Union_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                BdPst_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_Set() - (char *)sample);

                sample->_d() = 1;
                BdPst_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_Get() - (char *)sample);

                sample->_d() = 2;
                BdPst_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_Ctrl() - (char *)sample);

                sample->_d() = 3;
                BdPst_Srv_Req_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_St_Get() - (char *)sample);

                sample->_d() = 4;
                BdPst_Srv_Req_Union_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdMemPst_Set() - (char *)sample);

                sample->_d() = 5;
                BdPst_Srv_Req_Union_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdMemPst_Get() - (char *)sample);

                BdPst_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_Srv_Req_Union >;

                BdPst_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::BdPst_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdPst_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdPst_Srv_Resp_Union_g_tc_members[6]=
                {

                    {
                        (char *)"BdPst_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdPst_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdPst_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdPst_St_Get_SOA",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdMemPst_Set_SOA",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(4),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdMemPst_Get_SOA",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(5),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdPst_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdPst_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        BdPst_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdPst_Srv_Resp_Union*/

                if (is_initialized) {
                    return &BdPst_Srv_Resp_Union_g_tc;
                }

                BdPst_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdPst_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_Rsp_struct>::get().native();
                BdPst_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_Rsp_struct>::get().native();
                BdPst_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_Ctrl_SOA_struct>::get().native();
                BdPst_Srv_Resp_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdPst_St_struct>::get().native();
                BdPst_Srv_Resp_Union_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdMemPst_Rsp_struct>::get().native();
                BdPst_Srv_Resp_Union_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdMemPst_Rsp_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                BdPst_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                BdPst_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                BdPst_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdPst_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdPst_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo BdPst_Srv_Resp_Union_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdPst_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdPst_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdPst_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                BdPst_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                BdPst_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                BdPst_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                BdPst_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_Ctrl_SOA() - (char *)sample);

                sample->_d() = 3;
                BdPst_Srv_Resp_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdPst_St_Get_SOA() - (char *)sample);

                sample->_d() = 4;
                BdPst_Srv_Resp_Union_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdMemPst_Set_SOA() - (char *)sample);

                sample->_d() = 5;
                BdPst_Srv_Resp_Union_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdMemPst_Get_SOA() - (char *)sample);

                BdPst_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                BdPst_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdPst_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdPst_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdPst_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdPst_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdPst_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdPst_Srv_Resp_Union >;

                BdPst_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdPst_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdPst_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdPst_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::BdPst_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdPst_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::StAdj_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode StAdj_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member StAdj_Ctrl_struct_g_tc_members[25]=
                {

                    {
                        (char *)"FLSeatFBAdj_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatBackrestAdj_Act",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatHgtAdj_Act",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatCshnAngAdj_Act",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLLegAngCshnExtAdj_Act",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatLegLengthAdj_Act",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatFBAdj_Act",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatBackrestAdj_Act",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatHgtAdj_Act",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatCshnAngAdj_Act",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLegAngCshnExtAdj_Act",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatLegLengthAdj_Act",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatFBPst_Req",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatBackresPst_Req",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatHgtPst_Req",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatCshnAngPst_Req",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLLegAngCshnExtPst_Req",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatLegLengthPst_Req",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatFBPst_Req",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatBackrestPst_Req",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatHgtPst_Req",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatCshnAngPst_Req",/* Member name */
                        {
                            21,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLegAngCshnExtPst_Req",/* Member name */
                        {
                            22,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatLegLengthPst_Req",/* Member name */
                        {
                            23,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            24,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode StAdj_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::StAdj_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        25, /* Number of members */
                        StAdj_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for StAdj_Ctrl_struct*/

                if (is_initialized) {
                    return &StAdj_Ctrl_struct_g_tc;
                }

                StAdj_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                StAdj_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                StAdj_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_Ctrl_struct_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&StAdj_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                StAdj_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[20]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[20]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[20]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[20]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[20]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[20]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[21]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[21]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[21]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[21]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[21]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[21]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[22]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[22]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[22]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[22]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[22]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[22]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[23]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[23]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_struct_g_tc_members[23]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[23]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_struct_g_tc_members[23]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_struct_g_tc_members[23]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_struct_g_tc_members[24]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                StAdj_Ctrl_struct_g_tc_members[24]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                StAdj_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                StAdj_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &StAdj_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::StAdj_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo StAdj_Ctrl_struct_g_memberAccessInfos[25] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo StAdj_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &StAdj_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::StAdj_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                StAdj_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatFBAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatBackrestAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatHgtAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatCshnAngAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLegAngCshnExtAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatLegLengthAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatFBAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatBackrestAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatHgtAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatCshnAngAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLegAngCshnExtAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatLegLengthAdj_Act() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatFBPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatBackresPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatHgtPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatCshnAngPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLegAngCshnExtPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatLegLengthPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatFBPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatBackrestPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatHgtPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[21].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatCshnAngPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[22].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLegAngCshnExtPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[23].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatLegLengthPst_Req() - (char *)sample);

                StAdj_Ctrl_struct_g_memberAccessInfos[24].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                StAdj_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                StAdj_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::StAdj_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        StAdj_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        StAdj_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                StAdj_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                StAdj_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::StAdj_Ctrl_struct >;

                StAdj_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &StAdj_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin StAdj_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &StAdj_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::StAdj_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::StAdj_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::StAdj_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member StAdj_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"StAdj_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode StAdj_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::StAdj_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        StAdj_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for StAdj_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &StAdj_Ctrl_SOA_struct_g_tc;
                }

                StAdj_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                StAdj_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                StAdj_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                StAdj_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                StAdj_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &StAdj_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::StAdj_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo StAdj_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo StAdj_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &StAdj_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::StAdj_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                StAdj_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StAdj_Ctrl_SOA_u8() - (char *)sample);

                StAdj_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                StAdj_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::StAdj_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        StAdj_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        StAdj_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                StAdj_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                StAdj_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::StAdj_Ctrl_SOA_struct >;

                StAdj_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &StAdj_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin StAdj_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &StAdj_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::StAdj_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::StAdj_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::StAdj_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member StAdj_St_struct_g_tc_members[24]=
                {

                    {
                        (char *)"FLSeatFBMv_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatBackrestMv_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatHgtMv_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatCshnAngMv_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLLegAngCshnExtMv_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatLegLengthMv_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatFBMv_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatBackrestMv_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatHgtMv_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatCshnAngMv_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLegAngCshnExtMv_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatLegLengthMv_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatFBPst_Val",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatBackrestPst_Val",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatHgtPst_Val",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatCshnAngPst_Val",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLLegAngCshnExtPst_Val",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatLegLengthPst_Val",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatFBPst_Val",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatBackrestPst_Val",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatHgtPst_Val",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatCshnAngPst_Val",/* Member name */
                        {
                            21,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLegAngCshnExtPst_Val",/* Member name */
                        {
                            22,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatLegLengthPst_Val",/* Member name */
                        {
                            23,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode StAdj_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::StAdj_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        24, /* Number of members */
                        StAdj_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for StAdj_St_struct*/

                if (is_initialized) {
                    return &StAdj_St_struct_g_tc;
                }

                StAdj_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                StAdj_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                StAdj_St_struct_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                StAdj_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[20]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[20]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[20]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[20]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[20]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[20]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[21]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[21]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[21]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[21]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[21]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[21]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[22]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[22]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[22]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[22]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[22]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[22]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc_members[23]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[23]._annotations._defaultValue._u.octet_value = 0;
                StAdj_St_struct_g_tc_members[23]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[23]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                StAdj_St_struct_g_tc_members[23]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                StAdj_St_struct_g_tc_members[23]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                StAdj_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                StAdj_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &StAdj_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::StAdj_St_struct *sample;

                static RTIXCdrMemberAccessInfo StAdj_St_struct_g_memberAccessInfos[24] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo StAdj_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &StAdj_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::StAdj_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                StAdj_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatFBMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatBackrestMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatHgtMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatCshnAngMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLegAngCshnExtMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatLegLengthMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatFBMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatBackrestMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatHgtMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatCshnAngMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLegAngCshnExtMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatLegLengthMv_St() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatFBPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatBackrestPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatHgtPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatCshnAngPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLegAngCshnExtPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatLegLengthPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatFBPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatBackrestPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatHgtPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[21].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatCshnAngPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[22].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLegAngCshnExtPst_Val() - (char *)sample);

                StAdj_St_struct_g_memberAccessInfos[23].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatLegLengthPst_Val() - (char *)sample);

                StAdj_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                StAdj_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::StAdj_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        StAdj_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        StAdj_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                StAdj_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                StAdj_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::StAdj_St_struct >;

                StAdj_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &StAdj_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin StAdj_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &StAdj_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::StAdj_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::StAdj_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::StAdj_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode StAdj_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member StAdj_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"StPstBit",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode StAdj_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::StAdj_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        StAdj_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for StAdj_St_Get_struct*/

                if (is_initialized) {
                    return &StAdj_St_Get_struct_g_tc;
                }

                StAdj_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                StAdj_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                StAdj_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                StAdj_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&StAdj_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                StAdj_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                StAdj_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.ushort_value = 0;
                StAdj_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                StAdj_St_Get_struct_g_tc_members[0]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                StAdj_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                StAdj_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                StAdj_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                StAdj_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                StAdj_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                StAdj_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &StAdj_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::StAdj_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo StAdj_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo StAdj_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &StAdj_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::StAdj_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                StAdj_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StPstBit() - (char *)sample);

                StAdj_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                StAdj_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                StAdj_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::StAdj_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        StAdj_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        StAdj_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                StAdj_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                StAdj_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::StAdj_St_Get_struct >;

                StAdj_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &StAdj_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin StAdj_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &StAdj_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::StAdj_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::StAdj_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::StAdj_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member StAdj_Srv_Req_Union_g_tc_members[2]=
                {

                    {
                        (char *)"StAdj_Ctrl",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"StAdj_St_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode StAdj_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::StAdj_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        StAdj_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for StAdj_Srv_Req_Union*/

                if (is_initialized) {
                    return &StAdj_Srv_Req_Union_g_tc;
                }

                StAdj_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                StAdj_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::StAdj_Ctrl_struct>::get().native();
                StAdj_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::StAdj_St_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                StAdj_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                StAdj_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                StAdj_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &StAdj_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::StAdj_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo StAdj_Srv_Req_Union_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo StAdj_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &StAdj_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::StAdj_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                StAdj_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                StAdj_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StAdj_Ctrl() - (char *)sample);

                sample->_d() = 1;
                StAdj_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StAdj_St_Get() - (char *)sample);

                StAdj_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                StAdj_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::StAdj_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        StAdj_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        StAdj_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                StAdj_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                StAdj_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::StAdj_Srv_Req_Union >;

                StAdj_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &StAdj_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin StAdj_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &StAdj_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::StAdj_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::StAdj_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::StAdj_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member StAdj_Srv_Resp_Union_g_tc_members[2]=
                {

                    {
                        (char *)"StAdj_Ctrl_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"StAdj_St_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode StAdj_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::StAdj_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        StAdj_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for StAdj_Srv_Resp_Union*/

                if (is_initialized) {
                    return &StAdj_Srv_Resp_Union_g_tc;
                }

                StAdj_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                StAdj_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::StAdj_Ctrl_SOA_struct>::get().native();
                StAdj_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::StAdj_St_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                StAdj_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                StAdj_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                StAdj_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &StAdj_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::StAdj_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo StAdj_Srv_Resp_Union_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo StAdj_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &StAdj_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::StAdj_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                StAdj_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                StAdj_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StAdj_Ctrl_SOA() - (char *)sample);

                sample->_d() = 1;
                StAdj_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StAdj_St_Get_SOA() - (char *)sample);

                StAdj_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                StAdj_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::StAdj_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        StAdj_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        StAdj_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                StAdj_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                StAdj_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::StAdj_Srv_Resp_Union >;

                StAdj_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &StAdj_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin StAdj_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &StAdj_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::StAdj_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::StAdj_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DrLth_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member DrLth_Set_struct_g_tc_members[2]=
                {

                    {
                        (char *)"TDrOpenAngSet_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        DrLth_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_Set_struct*/

                if (is_initialized) {
                    return &DrLth_Set_struct_g_tc;
                }

                DrLth_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                DrLth_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DrLth_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                DrLth_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                DrLth_Set_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                DrLth_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_Set_struct *sample;

                static RTIXCdrMemberAccessInfo DrLth_Set_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDrOpenAngSet_Act() - (char *)sample);

                DrLth_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                DrLth_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_Set_struct >;

                DrLth_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DrLth_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DrLth_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member DrLth_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        DrLth_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_Get_struct*/

                if (is_initialized) {
                    return &DrLth_Get_struct_g_tc;
                }

                DrLth_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                DrLth_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DrLth_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                DrLth_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                DrLth_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                DrLth_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_Get_struct *sample;

                static RTIXCdrMemberAccessInfo DrLth_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                DrLth_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                DrLth_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_Get_struct >;

                DrLth_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DrLth_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member DrLth_Rsp_struct_g_tc_members[1]=
                {

                    {
                        (char *)"TDrOpenAngSet_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        DrLth_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_Rsp_struct*/

                if (is_initialized) {
                    return &DrLth_Rsp_struct_g_tc;
                }

                DrLth_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                DrLth_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo DrLth_Rsp_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDrOpenAngSet_Rsp() - (char *)sample);

                DrLth_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_Rsp_struct >;

                DrLth_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DrLth_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DrLth_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member DrLth_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        DrLth_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_St_Get_struct*/

                if (is_initialized) {
                    return &DrLth_St_Get_struct_g_tc;
                }

                DrLth_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                DrLth_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DrLth_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                DrLth_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                DrLth_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                DrLth_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo DrLth_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                DrLth_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                DrLth_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_St_Get_struct >;

                DrLth_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DrLth_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DrLth_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member DrLth_Ctrl_struct_g_tc_members[7]=
                {

                    {
                        (char *)"TDoorBtn_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TDoorPos_Act",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLDoorBtn_Act",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLDoorBtn_Act",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRDoorBtn_Act",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRDoorBtn_Act",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        DrLth_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_Ctrl_struct*/

                if (is_initialized) {
                    return &DrLth_Ctrl_struct_g_tc;
                }

                DrLth_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                DrLth_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DrLth_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                DrLth_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                DrLth_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                DrLth_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo DrLth_Ctrl_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDoorBtn_Act() - (char *)sample);

                DrLth_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDoorPos_Act() - (char *)sample);

                DrLth_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLDoorBtn_Act() - (char *)sample);

                DrLth_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLDoorBtn_Act() - (char *)sample);

                DrLth_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRDoorBtn_Act() - (char *)sample);

                DrLth_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRDoorBtn_Act() - (char *)sample);

                DrLth_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                DrLth_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_Ctrl_struct >;

                DrLth_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DrLth_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member DrLth_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"DrLth_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        DrLth_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &DrLth_Ctrl_SOA_struct_g_tc;
                }

                DrLth_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                DrLth_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrLth_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo DrLth_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_Ctrl_SOA_u8() - (char *)sample);

                DrLth_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_Ctrl_SOA_struct >;

                DrLth_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DrLth_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member DrLth_St_struct_g_tc_members[19]=
                {

                    {
                        (char *)"FLDoor_st",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLDoor_st",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRDoor_st",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRDoor_st",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TDoor_st",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLNomDoor_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLNomDoor_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRNomDoor_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRNomDoor_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TDoorNominal_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TDrWrk_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TDrTripPst_Val",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLDrStpRsn_st",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLDrStpRsn_st",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRDrStpRsn_st",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRDrStpRsn_st",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TDrStpRsn_st",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TDoorTip_St",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HoodLatch_St",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        19, /* Number of members */
                        DrLth_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_St_struct*/

                if (is_initialized) {
                    return &DrLth_St_struct_g_tc;
                }

                DrLth_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrLth_St_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                DrLth_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                DrLth_St_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrLth_St_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrLth_St_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrLth_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_St_struct *sample;

                static RTIXCdrMemberAccessInfo DrLth_St_struct_g_memberAccessInfos[19] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLDoor_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLDoor_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRDoor_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRDoor_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDoor_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLNomDoor_St() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLNomDoor_St() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRNomDoor_St() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRNomDoor_St() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDoorNominal_St() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDrWrk_St() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDrTripPst_Val() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLDrStpRsn_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLDrStpRsn_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRDrStpRsn_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRDrStpRsn_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDrStpRsn_st() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TDoorTip_St() - (char *)sample);

                DrLth_St_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HoodLatch_St() - (char *)sample);

                DrLth_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_St_struct >;

                DrLth_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DrLth_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member DrLth_Srv_Req_Union_g_tc_members[4]=
                {

                    {
                        (char *)"DrLth_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrLth_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrLth_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrLth_St_Get",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        DrLth_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_Srv_Req_Union*/

                if (is_initialized) {
                    return &DrLth_Srv_Req_Union_g_tc;
                }

                DrLth_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_Set_struct>::get().native();
                DrLth_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_Get_struct>::get().native();
                DrLth_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_Ctrl_struct>::get().native();
                DrLth_Srv_Req_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_St_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                DrLth_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                DrLth_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo DrLth_Srv_Req_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                DrLth_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_Set() - (char *)sample);

                sample->_d() = 1;
                DrLth_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_Get() - (char *)sample);

                sample->_d() = 2;
                DrLth_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_Ctrl() - (char *)sample);

                sample->_d() = 3;
                DrLth_Srv_Req_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_St_Get() - (char *)sample);

                DrLth_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_Srv_Req_Union >;

                DrLth_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::DrLth_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DrLth_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member DrLth_Srv_Resp_Union_g_tc_members[4]=
                {

                    {
                        (char *)"DrLth_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrLth_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrLth_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrLth_St_Get_SOA",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrLth_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DrLth_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        DrLth_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrLth_Srv_Resp_Union*/

                if (is_initialized) {
                    return &DrLth_Srv_Resp_Union_g_tc;
                }

                DrLth_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrLth_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_Rsp_struct>::get().native();
                DrLth_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_Rsp_struct>::get().native();
                DrLth_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_Ctrl_SOA_struct>::get().native();
                DrLth_Srv_Resp_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DrLth_St_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                DrLth_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                DrLth_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                DrLth_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrLth_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DrLth_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo DrLth_Srv_Resp_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrLth_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrLth_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DrLth_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                DrLth_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                DrLth_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                DrLth_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                DrLth_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_Ctrl_SOA() - (char *)sample);

                sample->_d() = 3;
                DrLth_Srv_Resp_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrLth_St_Get_SOA() - (char *)sample);

                DrLth_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                DrLth_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DrLth_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrLth_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrLth_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrLth_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrLth_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DrLth_Srv_Resp_Union >;

                DrLth_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrLth_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrLth_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrLth_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::DrLth_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DrLth_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Hdl_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode Hdl_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member Hdl_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Hdl_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Hdl_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        Hdl_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Hdl_St_Get_struct*/

                if (is_initialized) {
                    return &Hdl_St_Get_struct_g_tc;
                }

                Hdl_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                Hdl_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Hdl_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&Hdl_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                Hdl_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                Hdl_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                Hdl_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Hdl_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Hdl_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Hdl_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo Hdl_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Hdl_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Hdl_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Hdl_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Hdl_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                Hdl_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                Hdl_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                Hdl_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Hdl_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Hdl_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Hdl_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Hdl_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Hdl_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Hdl_St_Get_struct >;

                Hdl_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Hdl_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Hdl_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Hdl_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::Hdl_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Hdl_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Hdl_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Hdl_St_struct_g_tc_members[8]=
                {

                    {
                        (char *)"FLHdlPst_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLHdlPst_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRHdlPst_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRHdlPst_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLHdlStpRsn_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLHdlStpRsn_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRHdlStpRsn_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRHdlStpRsn_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Hdl_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Hdl_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        8, /* Number of members */
                        Hdl_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Hdl_St_struct*/

                if (is_initialized) {
                    return &Hdl_St_struct_g_tc;
                }

                Hdl_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Hdl_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Hdl_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                Hdl_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                Hdl_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Hdl_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Hdl_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Hdl_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Hdl_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Hdl_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Hdl_St_struct *sample;

                static RTIXCdrMemberAccessInfo Hdl_St_struct_g_memberAccessInfos[8] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Hdl_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Hdl_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Hdl_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Hdl_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLHdlPst_St() - (char *)sample);

                Hdl_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLHdlPst_St() - (char *)sample);

                Hdl_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRHdlPst_St() - (char *)sample);

                Hdl_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRHdlPst_St() - (char *)sample);

                Hdl_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLHdlStpRsn_St() - (char *)sample);

                Hdl_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLHdlStpRsn_St() - (char *)sample);

                Hdl_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRHdlStpRsn_St() - (char *)sample);

                Hdl_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRHdlStpRsn_St() - (char *)sample);

                Hdl_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                Hdl_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Hdl_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Hdl_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Hdl_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Hdl_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Hdl_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Hdl_St_struct >;

                Hdl_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Hdl_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Hdl_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Hdl_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::Hdl_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Hdl_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode InLt_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member InLt_Set_struct_g_tc_members[5]=
                {

                    {
                        (char *)"TpLtAutoSet_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TpLtClrSet_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TpLtBrtSet_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BckLtBrtSet_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        5, /* Number of members */
                        InLt_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_Set_struct*/

                if (is_initialized) {
                    return &InLt_Set_struct_g_tc;
                }

                InLt_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                InLt_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Set_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Set_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&InLt_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                InLt_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                InLt_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                InLt_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                InLt_Set_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Set_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Set_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                InLt_Set_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Set_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Set_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Set_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                InLt_Set_struct_g_tc_members[4]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                InLt_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_Set_struct *sample;

                static RTIXCdrMemberAccessInfo InLt_Set_struct_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtAutoSet_Req() - (char *)sample);

                InLt_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtClrSet_Req() - (char *)sample);

                InLt_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtBrtSet_Req() - (char *)sample);

                InLt_Set_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BckLtBrtSet_Req() - (char *)sample);

                InLt_Set_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                InLt_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                InLt_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_Set_struct >;

                InLt_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::InLt_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode InLt_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member InLt_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        InLt_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_Get_struct*/

                if (is_initialized) {
                    return &InLt_Get_struct_g_tc;
                }

                InLt_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                InLt_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&InLt_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                InLt_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                InLt_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                InLt_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                InLt_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_Get_struct *sample;

                static RTIXCdrMemberAccessInfo InLt_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                InLt_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                InLt_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                InLt_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_Get_struct >;

                InLt_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::InLt_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member InLt_Rsp_struct_g_tc_members[4]=
                {

                    {
                        (char *)"TpLtAutoSet_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TpLtClrSet_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TpLtBrtSet_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BckLtBrtSet_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        InLt_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_Rsp_struct*/

                if (is_initialized) {
                    return &InLt_Rsp_struct_g_tc;
                }

                InLt_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                InLt_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                InLt_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                InLt_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                InLt_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                InLt_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo InLt_Rsp_struct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtAutoSet_Rsp() - (char *)sample);

                InLt_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtClrSet_Rsp() - (char *)sample);

                InLt_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtBrtSet_Rsp() - (char *)sample);

                InLt_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BckLtBrtSet_Rsp() - (char *)sample);

                InLt_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                InLt_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_Rsp_struct >;

                InLt_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::InLt_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode InLt_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member InLt_Ctrl_struct_g_tc_members[7]=
                {

                    {
                        (char *)"TpLtBtn_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TpLtSearch_Act",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLTpLtRead_Act",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLTpLtRead_Act",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRTpLtRead_Act",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRTpLtRead_Act",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        InLt_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_Ctrl_struct*/

                if (is_initialized) {
                    return &InLt_Ctrl_struct_g_tc;
                }

                InLt_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                InLt_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&InLt_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                InLt_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                InLt_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                InLt_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                InLt_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                InLt_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                InLt_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                InLt_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                InLt_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                InLt_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo InLt_Ctrl_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtBtn_Act() - (char *)sample);

                InLt_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtSearch_Act() - (char *)sample);

                InLt_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLTpLtRead_Act() - (char *)sample);

                InLt_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLTpLtRead_Act() - (char *)sample);

                InLt_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRTpLtRead_Act() - (char *)sample);

                InLt_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRTpLtRead_Act() - (char *)sample);

                InLt_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                InLt_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                InLt_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_Ctrl_struct >;

                InLt_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::InLt_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member InLt_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"InLt_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        InLt_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &InLt_Ctrl_SOA_struct_g_tc;
                }

                InLt_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                InLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                InLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo InLt_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_Ctrl_SOA_u8() - (char *)sample);

                InLt_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                InLt_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_Ctrl_SOA_struct >;

                InLt_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::InLt_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode InLt_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member InLt_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        InLt_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_St_Get_struct*/

                if (is_initialized) {
                    return &InLt_St_Get_struct_g_tc;
                }

                InLt_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                InLt_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&InLt_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                InLt_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                InLt_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                InLt_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                InLt_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo InLt_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                InLt_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                InLt_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                InLt_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_St_Get_struct >;

                InLt_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::InLt_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member InLt_St_struct_g_tc_members[6]=
                {

                    {
                        (char *)"TpLtWrk_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TpLtSearch_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLTpLtRead_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLTpLtRead_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRTpLtRead_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRTpLtRead_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        InLt_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_St_struct*/

                if (is_initialized) {
                    return &InLt_St_struct_g_tc;
                }

                InLt_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                InLt_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                InLt_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                InLt_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                InLt_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                InLt_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                InLt_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                InLt_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                InLt_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                InLt_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                InLt_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                InLt_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_St_struct *sample;

                static RTIXCdrMemberAccessInfo InLt_St_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtWrk_St() - (char *)sample);

                InLt_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TpLtSearch_St() - (char *)sample);

                InLt_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLTpLtRead_St() - (char *)sample);

                InLt_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLTpLtRead_St() - (char *)sample);

                InLt_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRTpLtRead_St() - (char *)sample);

                InLt_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRTpLtRead_St() - (char *)sample);

                InLt_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                InLt_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_St_struct >;

                InLt_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::InLt_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member InLt_Srv_Req_Union_g_tc_members[4]=
                {

                    {
                        (char *)"InLt_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InLt_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InLt_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InLt_St_Get",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        InLt_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_Srv_Req_Union*/

                if (is_initialized) {
                    return &InLt_Srv_Req_Union_g_tc;
                }

                InLt_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_Set_struct>::get().native();
                InLt_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_Get_struct>::get().native();
                InLt_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_Ctrl_struct>::get().native();
                InLt_Srv_Req_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_St_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                InLt_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                InLt_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo InLt_Srv_Req_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                InLt_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_Set() - (char *)sample);

                sample->_d() = 1;
                InLt_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_Get() - (char *)sample);

                sample->_d() = 2;
                InLt_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_Ctrl() - (char *)sample);

                sample->_d() = 3;
                InLt_Srv_Req_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_St_Get() - (char *)sample);

                InLt_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                InLt_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_Srv_Req_Union >;

                InLt_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::InLt_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::InLt_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member InLt_Srv_Resp_Union_g_tc_members[4]=
                {

                    {
                        (char *)"InLt_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InLt_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InLt_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InLt_St_Get_SOA",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode InLt_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::InLt_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        InLt_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for InLt_Srv_Resp_Union*/

                if (is_initialized) {
                    return &InLt_Srv_Resp_Union_g_tc;
                }

                InLt_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                InLt_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_Rsp_struct>::get().native();
                InLt_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_Rsp_struct>::get().native();
                InLt_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_Ctrl_SOA_struct>::get().native();
                InLt_Srv_Resp_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::InLt_St_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                InLt_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                InLt_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                InLt_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &InLt_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::InLt_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo InLt_Srv_Resp_Union_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo InLt_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &InLt_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::InLt_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                InLt_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                InLt_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                InLt_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                InLt_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_Ctrl_SOA() - (char *)sample);

                sample->_d() = 3;
                InLt_Srv_Resp_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InLt_St_Get_SOA() - (char *)sample);

                InLt_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                InLt_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::InLt_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        InLt_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        InLt_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                InLt_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                InLt_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::InLt_Srv_Resp_Union >;

                InLt_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &InLt_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin InLt_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &InLt_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::InLt_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::InLt_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::AmLt_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode AmLt_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member AmLt_Set_struct_g_tc_members[14]=
                {

                    {
                        (char *)"AmLtBtn_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtBrt_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtMode_Set",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtCustomClr_Set",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtAutoBrt_Set",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtBrtFollow_Set",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtVoice_Set",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Welcome_Set",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtMusic_Set",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtTemp_Set",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtMedRedVal_Set",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtMedGreenVal_Set",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtMedBlueVal_Set",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AmLt_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::AmLt_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        14, /* Number of members */
                        AmLt_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AmLt_Set_struct*/

                if (is_initialized) {
                    return &AmLt_Set_struct_g_tc;
                }

                AmLt_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                AmLt_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AmLt_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AmLt_Set_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Set_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AmLt_Set_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AmLt_Set_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AmLt_Set_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&AmLt_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                AmLt_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[3]._annotations._defaultValue._u.ushort_value = 0;
                AmLt_Set_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[3]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AmLt_Set_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[3]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AmLt_Set_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Set_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Set_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Set_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Set_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[10]._annotations._defaultValue._u.ushort_value = 0;
                AmLt_Set_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[10]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AmLt_Set_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[10]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AmLt_Set_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[11]._annotations._defaultValue._u.ushort_value = 0;
                AmLt_Set_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[11]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AmLt_Set_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[11]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AmLt_Set_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[12]._annotations._defaultValue._u.ushort_value = 0;
                AmLt_Set_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[12]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AmLt_Set_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Set_struct_g_tc_members[12]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AmLt_Set_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                AmLt_Set_struct_g_tc_members[13]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                AmLt_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                AmLt_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AmLt_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::AmLt_Set_struct *sample;

                static RTIXCdrMemberAccessInfo AmLt_Set_struct_g_memberAccessInfos[14] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AmLt_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AmLt_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::AmLt_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                AmLt_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtBtn_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtBrt_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtMode_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtCustomClr_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtAutoBrt_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtBrtFollow_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtVoice_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Welcome_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtMusic_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtTemp_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtMedRedVal_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtMedGreenVal_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtMedBlueVal_Set() - (char *)sample);

                AmLt_Set_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                AmLt_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                AmLt_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::AmLt_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AmLt_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AmLt_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AmLt_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AmLt_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::AmLt_Set_struct >;

                AmLt_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AmLt_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AmLt_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AmLt_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::AmLt_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::AmLt_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::AmLt_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode AmLt_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member AmLt_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AmLt_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::AmLt_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        AmLt_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AmLt_Get_struct*/

                if (is_initialized) {
                    return &AmLt_Get_struct_g_tc;
                }

                AmLt_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                AmLt_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AmLt_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&AmLt_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                AmLt_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                AmLt_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                AmLt_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                AmLt_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AmLt_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::AmLt_Get_struct *sample;

                static RTIXCdrMemberAccessInfo AmLt_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AmLt_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AmLt_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::AmLt_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                AmLt_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                AmLt_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                AmLt_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                AmLt_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::AmLt_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AmLt_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AmLt_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AmLt_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AmLt_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::AmLt_Get_struct >;

                AmLt_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AmLt_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AmLt_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AmLt_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::AmLt_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::AmLt_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::AmLt_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member AmLt_Rsp_struct_g_tc_members[10]=
                {

                    {
                        (char *)"AmLtBtn_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtBrt_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtMode_Rsp",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtCustomClr_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtAutoBrt_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtBrtFollow_Rsp",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtVoice_Rsp",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtWelcome_Rsp",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtMusic_Rsp",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLtTemp_Rsp",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AmLt_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::AmLt_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        10, /* Number of members */
                        AmLt_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AmLt_Rsp_struct*/

                if (is_initialized) {
                    return &AmLt_Rsp_struct_g_tc;
                }

                AmLt_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AmLt_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AmLt_Rsp_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AmLt_Rsp_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                AmLt_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Rsp_struct_g_tc_members[3]._annotations._defaultValue._u.ushort_value = 0;
                AmLt_Rsp_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Rsp_struct_g_tc_members[3]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AmLt_Rsp_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AmLt_Rsp_struct_g_tc_members[3]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AmLt_Rsp_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                AmLt_Rsp_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AmLt_Rsp_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AmLt_Rsp_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AmLt_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                AmLt_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AmLt_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::AmLt_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo AmLt_Rsp_struct_g_memberAccessInfos[10] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AmLt_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AmLt_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::AmLt_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                AmLt_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtBtn_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtBrt_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtMode_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtCustomClr_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtAutoBrt_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtBrtFollow_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtVoice_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtWelcome_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtMusic_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLtTemp_Rsp() - (char *)sample);

                AmLt_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                AmLt_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::AmLt_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AmLt_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AmLt_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AmLt_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AmLt_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::AmLt_Rsp_struct >;

                AmLt_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AmLt_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AmLt_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AmLt_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::AmLt_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::AmLt_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::AmLt_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member AmLt_Srv_Req_Union_g_tc_members[2]=
                {

                    {
                        (char *)"AmLt_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLt_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AmLt_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::AmLt_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        AmLt_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AmLt_Srv_Req_Union*/

                if (is_initialized) {
                    return &AmLt_Srv_Req_Union_g_tc;
                }

                AmLt_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AmLt_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::AmLt_Set_struct>::get().native();
                AmLt_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::AmLt_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                AmLt_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                AmLt_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                AmLt_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AmLt_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::AmLt_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo AmLt_Srv_Req_Union_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AmLt_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AmLt_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::AmLt_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                AmLt_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                AmLt_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLt_Set() - (char *)sample);

                sample->_d() = 1;
                AmLt_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLt_Get() - (char *)sample);

                AmLt_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                AmLt_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::AmLt_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AmLt_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AmLt_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AmLt_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AmLt_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::AmLt_Srv_Req_Union >;

                AmLt_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AmLt_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AmLt_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AmLt_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::AmLt_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::AmLt_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::AmLt_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member AmLt_Srv_Resp_Union_g_tc_members[2]=
                {

                    {
                        (char *)"AmLt_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AmLt_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AmLt_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::AmLt_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        AmLt_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AmLt_Srv_Resp_Union*/

                if (is_initialized) {
                    return &AmLt_Srv_Resp_Union_g_tc;
                }

                AmLt_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AmLt_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::AmLt_Rsp_struct>::get().native();
                AmLt_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::AmLt_Rsp_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                AmLt_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                AmLt_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                AmLt_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AmLt_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::AmLt_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo AmLt_Srv_Resp_Union_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AmLt_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AmLt_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::AmLt_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                AmLt_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                AmLt_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLt_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                AmLt_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AmLt_Get_SOA() - (char *)sample);

                AmLt_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                AmLt_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::AmLt_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AmLt_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AmLt_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AmLt_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AmLt_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::AmLt_Srv_Resp_Union >;

                AmLt_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AmLt_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AmLt_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AmLt_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::AmLt_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::AmLt_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::ExtLt_Ctrl_Struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode ExtLt_Ctrl_Struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member ExtLt_Ctrl_Struct_g_tc_members[9]=
                {

                    {
                        (char *)"TurnLight_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EtnlLgt_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HighBeam_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HDBI_RearFogBm_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FollowMeHome_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LgtHeightAdjSet_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AHB_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HzrdSW_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode ExtLt_Ctrl_Struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::ExtLt_Ctrl_Struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        9, /* Number of members */
                        ExtLt_Ctrl_Struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for ExtLt_Ctrl_Struct*/

                if (is_initialized) {
                    return &ExtLt_Ctrl_Struct_g_tc;
                }

                ExtLt_Ctrl_Struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                ExtLt_Ctrl_Struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                ExtLt_Ctrl_Struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_Ctrl_Struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&ExtLt_Ctrl_Struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                ExtLt_Ctrl_Struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_Struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_Struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_Struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_Struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                ExtLt_Ctrl_Struct_g_tc_members[8]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                ExtLt_Ctrl_Struct_g_tc._data._sampleAccessInfo = sample_access_info();
                ExtLt_Ctrl_Struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &ExtLt_Ctrl_Struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::ExtLt_Ctrl_Struct *sample;

                static RTIXCdrMemberAccessInfo ExtLt_Ctrl_Struct_g_memberAccessInfos[9] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo ExtLt_Ctrl_Struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &ExtLt_Ctrl_Struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::ExtLt_Ctrl_Struct);
                if (sample == NULL) {
                    return NULL;
                }

                ExtLt_Ctrl_Struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TurnLight_Req() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EtnlLgt_Req() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HighBeam_Req() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HDBI_RearFogBm_Req() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FollowMeHome_Req() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LgtHeightAdjSet_Req() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AHB_Req() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HzrdSW_St() - (char *)sample);

                ExtLt_Ctrl_Struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                ExtLt_Ctrl_Struct_g_sampleAccessInfo.memberAccessInfos = 
                ExtLt_Ctrl_Struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::ExtLt_Ctrl_Struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        ExtLt_Ctrl_Struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        ExtLt_Ctrl_Struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                ExtLt_Ctrl_Struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                ExtLt_Ctrl_Struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::ExtLt_Ctrl_Struct >;

                ExtLt_Ctrl_Struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &ExtLt_Ctrl_Struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin ExtLt_Ctrl_Struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &ExtLt_Ctrl_Struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::ExtLt_Ctrl_Struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::ExtLt_Ctrl_Struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::ExtLt_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member ExtLt_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"ExtLt_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode ExtLt_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::ExtLt_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        ExtLt_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for ExtLt_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &ExtLt_Ctrl_SOA_struct_g_tc;
                }

                ExtLt_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                ExtLt_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                ExtLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                ExtLt_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &ExtLt_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::ExtLt_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo ExtLt_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::ExtLt_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                ExtLt_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ExtLt_Ctrl_SOA_u8() - (char *)sample);

                ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                ExtLt_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::ExtLt_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::ExtLt_Ctrl_SOA_struct >;

                ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &ExtLt_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin ExtLt_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &ExtLt_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::ExtLt_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::ExtLt_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::ExtLt_St_Struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member ExtLt_St_Struct_g_tc_members[13]=
                {

                    {
                        (char *)"LeftTurnLgt_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RgtTurnLgt_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLPstnLgt_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRPstnLgt_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RLPstnLgt_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RRPstnLgt_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HighLgt_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LwLgt_Req",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HDBM_RearFogBm_Req",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EtnlLgt_Rsp",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FollowMeHome_Rsp",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LgtHeightAdjSet_Rsp",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AHB_Rsp",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode ExtLt_St_Struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::ExtLt_St_Struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        13, /* Number of members */
                        ExtLt_St_Struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for ExtLt_St_Struct*/

                if (is_initialized) {
                    return &ExtLt_St_Struct_g_tc;
                }

                ExtLt_St_Struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                ExtLt_St_Struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                ExtLt_St_Struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                ExtLt_St_Struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                ExtLt_St_Struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                ExtLt_St_Struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                ExtLt_St_Struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                ExtLt_St_Struct_g_tc._data._sampleAccessInfo = sample_access_info();
                ExtLt_St_Struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &ExtLt_St_Struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::ExtLt_St_Struct *sample;

                static RTIXCdrMemberAccessInfo ExtLt_St_Struct_g_memberAccessInfos[13] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo ExtLt_St_Struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &ExtLt_St_Struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::ExtLt_St_Struct);
                if (sample == NULL) {
                    return NULL;
                }

                ExtLt_St_Struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LeftTurnLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RgtTurnLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLPstnLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRPstnLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RLPstnLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RRPstnLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HighLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LwLgt_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HDBM_RearFogBm_Req() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EtnlLgt_Rsp() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FollowMeHome_Rsp() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LgtHeightAdjSet_Rsp() - (char *)sample);

                ExtLt_St_Struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AHB_Rsp() - (char *)sample);

                ExtLt_St_Struct_g_sampleAccessInfo.memberAccessInfos = 
                ExtLt_St_Struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::ExtLt_St_Struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        ExtLt_St_Struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        ExtLt_St_Struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                ExtLt_St_Struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                ExtLt_St_Struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::ExtLt_St_Struct >;

                ExtLt_St_Struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &ExtLt_St_Struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin ExtLt_St_Struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &ExtLt_St_Struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::ExtLt_St_Struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::ExtLt_St_Struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdSf_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdSf_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdSf_Ctrl_struct_g_tc_members[4]=
                {

                    {
                        (char *)"LChdlock_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RChdlock_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ChdLockMode_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdSf_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdSf_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        BdSf_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdSf_Ctrl_struct*/

                if (is_initialized) {
                    return &BdSf_Ctrl_struct_g_tc;
                }

                BdSf_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdSf_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdSf_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdSf_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdSf_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdSf_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&BdSf_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdSf_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdSf_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdSf_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdSf_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdSf_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdSf_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdSf_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdSf_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdSf_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdSf_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdSf_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdSf_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdSf_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdSf_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdSf_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo BdSf_Ctrl_struct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdSf_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdSf_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdSf_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdSf_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LChdlock_Req() - (char *)sample);

                BdSf_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RChdlock_Req() - (char *)sample);

                BdSf_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChdLockMode_Req() - (char *)sample);

                BdSf_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdSf_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdSf_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdSf_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdSf_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdSf_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdSf_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdSf_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdSf_Ctrl_struct >;

                BdSf_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdSf_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdSf_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdSf_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdSf_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdSf_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdSf_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdSf_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"BdSf_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdSf_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdSf_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        BdSf_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdSf_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &BdSf_Ctrl_SOA_struct_g_tc;
                }

                BdSf_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdSf_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdSf_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdSf_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdSf_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdSf_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdSf_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdSf_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdSf_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdSf_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo BdSf_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdSf_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdSf_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdSf_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdSf_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdSf_Ctrl_SOA_u8() - (char *)sample);

                BdSf_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdSf_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdSf_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdSf_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdSf_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdSf_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdSf_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdSf_Ctrl_SOA_struct >;

                BdSf_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdSf_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdSf_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdSf_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdSf_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdSf_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdSf_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdSf_St_struct_g_tc_members[3]=
                {

                    {
                        (char *)"LChdlock_st",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RChdlock_st",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ChdLockMode_st",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdSf_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdSf_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        BdSf_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdSf_St_struct*/

                if (is_initialized) {
                    return &BdSf_St_struct_g_tc;
                }

                BdSf_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdSf_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdSf_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdSf_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdSf_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdSf_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdSf_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdSf_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdSf_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdSf_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdSf_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdSf_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdSf_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdSf_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdSf_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdSf_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdSf_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdSf_St_struct *sample;

                static RTIXCdrMemberAccessInfo BdSf_St_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdSf_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdSf_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdSf_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdSf_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LChdlock_st() - (char *)sample);

                BdSf_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RChdlock_st() - (char *)sample);

                BdSf_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChdLockMode_st() - (char *)sample);

                BdSf_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdSf_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdSf_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdSf_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdSf_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdSf_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdSf_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdSf_St_struct >;

                BdSf_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdSf_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdSf_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdSf_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdSf_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdSf_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::CgC_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode CgC_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member CgC_Ctrl_struct_g_tc_members[2]=
                {

                    {
                        (char *)"ChrgCapCtrlSW_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CgC_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::CgC_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        CgC_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CgC_Ctrl_struct*/

                if (is_initialized) {
                    return &CgC_Ctrl_struct_g_tc;
                }

                CgC_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                CgC_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CgC_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CgC_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&CgC_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                CgC_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CgC_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CgC_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CgC_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CgC_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CgC_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CgC_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                CgC_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                CgC_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CgC_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CgC_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::CgC_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo CgC_Ctrl_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CgC_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CgC_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::CgC_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CgC_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChrgCapCtrlSW_Req() - (char *)sample);

                CgC_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                CgC_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                CgC_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::CgC_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CgC_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CgC_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CgC_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CgC_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::CgC_Ctrl_struct >;

                CgC_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CgC_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CgC_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CgC_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::CgC_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::CgC_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::CgC_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member CgC_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"CgC_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CgC_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::CgC_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        CgC_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CgC_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &CgC_Ctrl_SOA_struct_g_tc;
                }

                CgC_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CgC_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                CgC_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CgC_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CgC_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CgC_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CgC_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CgC_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CgC_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CgC_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CgC_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::CgC_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo CgC_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CgC_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CgC_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::CgC_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CgC_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CgC_Ctrl_SOA_u8() - (char *)sample);

                CgC_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                CgC_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::CgC_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CgC_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CgC_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CgC_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CgC_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::CgC_Ctrl_SOA_struct >;

                CgC_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CgC_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CgC_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CgC_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::CgC_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::CgC_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::CgC_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member CgC_St_struct_g_tc_members[4]=
                {

                    {
                        (char *)"ChrgCap_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ChrgCapMv_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ChrgCapPst_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ChrgCapStpRsn_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CgC_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::CgC_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        CgC_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CgC_St_struct*/

                if (is_initialized) {
                    return &CgC_St_struct_g_tc;
                }

                CgC_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CgC_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CgC_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CgC_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CgC_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                CgC_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CgC_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CgC_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CgC_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                CgC_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CgC_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CgC_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                CgC_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CgC_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CgC_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                CgC_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CgC_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CgC_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CgC_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CgC_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CgC_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::CgC_St_struct *sample;

                static RTIXCdrMemberAccessInfo CgC_St_struct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CgC_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CgC_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::CgC_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CgC_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChrgCap_St() - (char *)sample);

                CgC_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChrgCapMv_St() - (char *)sample);

                CgC_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChrgCapPst_St() - (char *)sample);

                CgC_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChrgCapStpRsn_St() - (char *)sample);

                CgC_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                CgC_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::CgC_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CgC_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CgC_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CgC_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CgC_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::CgC_St_struct >;

                CgC_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CgC_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CgC_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CgC_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::CgC_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::CgC_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdCft_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdCft_Ctrl_struct_g_tc_members[22]=
                {

                    {
                        (char *)"FLLumbSuppUDAdj_Act",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLLumbSuppFBAdj_Act",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLumbSuppUDAdj_Act",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLumbSuppFBAdj_Act",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatShoulderAdj_Act",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatShoulderAdj_Act",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMsg_Act",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMsgMode_Act",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMsgStrth_Act",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMsg_Act",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMsgMode_Act",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMsgStrth_Act",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatHt_Act",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatHt_Act",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatHt_Act",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatHt_Act",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatVtlt_Act",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatVtlt_Act",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatVtlt_Act",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatVtlt_Act",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerHt_Act",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            21,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        22, /* Number of members */
                        BdCft_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_Ctrl_struct*/

                if (is_initialized) {
                    return &BdCft_Ctrl_struct_g_tc;
                }

                BdCft_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdCft_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Ctrl_struct_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&BdCft_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdCft_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[20]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[20]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_struct_g_tc_members[20]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[20]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_struct_g_tc_members[20]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_struct_g_tc_members[20]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_struct_g_tc_members[21]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdCft_Ctrl_struct_g_tc_members[21]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdCft_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo BdCft_Ctrl_struct_g_memberAccessInfos[22] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLumbSuppUDAdj_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLumbSuppFBAdj_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLumbSuppUDAdj_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLumbSuppFBAdj_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatShoulderAdj_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatShoulderAdj_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMsg_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMsgMode_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMsgStrth_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMsg_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMsgMode_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMsgStrth_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatHt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatHt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatHt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatHt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatVtlt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatVtlt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatVtlt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatVtlt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerHt_Act() - (char *)sample);

                BdCft_Ctrl_struct_g_memberAccessInfos[21].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdCft_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_Ctrl_struct >;

                BdCft_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdCft_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdCft_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"BdCft_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        BdCft_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &BdCft_Ctrl_SOA_struct_g_tc;
                }

                BdCft_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdCft_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo BdCft_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdCft_Ctrl_SOA_u8() - (char *)sample);

                BdCft_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_Ctrl_SOA_struct >;

                BdCft_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdCft_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_St_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdCft_St_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdCft_St_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_St_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_St_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BdCft_St_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_St_Get_struct*/

                if (is_initialized) {
                    return &BdCft_St_Get_struct_g_tc;
                }

                BdCft_St_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdCft_St_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_St_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BdCft_St_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdCft_St_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdCft_St_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdCft_St_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_St_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_St_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_St_Get_struct *sample;

                static RTIXCdrMemberAccessInfo BdCft_St_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_St_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_St_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_St_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_St_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                BdCft_St_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdCft_St_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_St_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_St_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_St_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_St_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_St_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_St_Get_struct >;

                BdCft_St_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_St_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_St_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_St_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdCft_St_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_St_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdCft_St_struct_g_tc_members[21]=
                {

                    {
                        (char *)"FLLumbSuppFBMv_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLLumbSuppUDMv_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLumbSuppFBMv_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRLumbSuppUDMv_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatShoulderAdj_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatShoulderAdj_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMsg_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMsgMode_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatMsgStrth_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMsg_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMsgMode_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatMsgStrth_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatHt_St",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatHt_St",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatHt_St",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatHt_St",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatVtlt_St",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRSeatVtlt_St",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRLSeatVtlt_St",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SRRSeatVtlt_St",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SteerHt_St",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        21, /* Number of members */
                        BdCft_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_St_struct*/

                if (is_initialized) {
                    return &BdCft_St_struct_g_tc;
                }

                BdCft_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_St_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdCft_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc_members[20]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[20]._annotations._defaultValue._u.octet_value = 0;
                BdCft_St_struct_g_tc_members[20]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[20]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_St_struct_g_tc_members[20]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_St_struct_g_tc_members[20]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_St_struct *sample;

                static RTIXCdrMemberAccessInfo BdCft_St_struct_g_memberAccessInfos[21] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLumbSuppFBMv_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLLumbSuppUDMv_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLumbSuppFBMv_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRLumbSuppUDMv_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatShoulderAdj_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatShoulderAdj_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMsg_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMsgMode_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatMsgStrth_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMsg_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMsgMode_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatMsgStrth_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatHt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatHt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatHt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatHt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatVtlt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRSeatVtlt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRLSeatVtlt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SRRSeatVtlt_St() - (char *)sample);

                BdCft_St_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SteerHt_St() - (char *)sample);

                BdCft_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_St_struct >;

                BdCft_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdCft_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BdCft_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BdCft_Set_struct_g_tc_members[3]=
                {

                    {
                        (char *)"SeatAutoHeat_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"StreeAutoHeat_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        BdCft_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_Set_struct*/

                if (is_initialized) {
                    return &BdCft_Set_struct_g_tc;
                }

                BdCft_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BdCft_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&BdCft_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BdCft_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BdCft_Set_struct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BdCft_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_Set_struct *sample;

                static RTIXCdrMemberAccessInfo BdCft_Set_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SeatAutoHeat_Set() - (char *)sample);

                BdCft_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StreeAutoHeat_Set() - (char *)sample);

                BdCft_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BdCft_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_Set_struct >;

                BdCft_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdCft_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdCft_Rsp_struct_g_tc_members[2]=
                {

                    {
                        (char *)"SeatAutoHeat_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"StreeAutoHeat_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BdCft_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_Rsp_struct*/

                if (is_initialized) {
                    return &BdCft_Rsp_struct_g_tc;
                }

                BdCft_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BdCft_Rsp_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BdCft_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Rsp_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Rsp_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BdCft_Rsp_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Rsp_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BdCft_Rsp_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BdCft_Rsp_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BdCft_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo BdCft_Rsp_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SeatAutoHeat_Rsp() - (char *)sample);

                BdCft_Rsp_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StreeAutoHeat_Rsp() - (char *)sample);

                BdCft_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_Rsp_struct >;

                BdCft_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BdCft_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdCft_Srv_Req_Union_g_tc_members[3]=
                {

                    {
                        (char *)"BdCft_Ctrl",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdCft_St_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdCft_Set",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        BdCft_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_Srv_Req_Union*/

                if (is_initialized) {
                    return &BdCft_Srv_Req_Union_g_tc;
                }

                BdCft_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdCft_Ctrl_struct>::get().native();
                BdCft_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdCft_St_Get_struct>::get().native();
                BdCft_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdCft_Set_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                BdCft_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                BdCft_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo BdCft_Srv_Req_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                BdCft_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdCft_Ctrl() - (char *)sample);

                sample->_d() = 1;
                BdCft_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdCft_St_Get() - (char *)sample);

                sample->_d() = 2;
                BdCft_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdCft_Set() - (char *)sample);

                BdCft_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_Srv_Req_Union >;

                BdCft_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::BdCft_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BdCft_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BdCft_Srv_Resp_Union_g_tc_members[3]=
                {

                    {
                        (char *)"BdCft_Ctrl_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdCft_St_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BdCft_Set_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BdCft_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BdCft_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        BdCft_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BdCft_Srv_Resp_Union*/

                if (is_initialized) {
                    return &BdCft_Srv_Resp_Union_g_tc;
                }

                BdCft_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BdCft_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdCft_Ctrl_SOA_struct>::get().native();
                BdCft_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdCft_St_struct>::get().native();
                BdCft_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BdCft_Rsp_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                BdCft_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                BdCft_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                BdCft_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BdCft_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BdCft_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo BdCft_Srv_Resp_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BdCft_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BdCft_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BdCft_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                BdCft_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                BdCft_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdCft_Ctrl_SOA() - (char *)sample);

                sample->_d() = 1;
                BdCft_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdCft_St_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                BdCft_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BdCft_Set_SOA() - (char *)sample);

                BdCft_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                BdCft_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BdCft_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BdCft_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BdCft_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BdCft_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BdCft_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BdCft_Srv_Resp_Union >;

                BdCft_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BdCft_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BdCft_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BdCft_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::BdCft_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BdCft_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotSeatSync_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BotSeatSync_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BotSeatSync_Set_struct_g_tc_members[2]=
                {

                    {
                        (char *)"SeatSync_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotSeatSync_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotSeatSync_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BotSeatSync_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotSeatSync_Set_struct*/

                if (is_initialized) {
                    return &BotSeatSync_Set_struct_g_tc;
                }

                BotSeatSync_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BotSeatSync_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotSeatSync_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotSeatSync_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BotSeatSync_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BotSeatSync_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Set_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotSeatSync_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Set_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotSeatSync_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Set_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotSeatSync_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BotSeatSync_Set_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BotSeatSync_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotSeatSync_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotSeatSync_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotSeatSync_Set_struct *sample;

                static RTIXCdrMemberAccessInfo BotSeatSync_Set_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotSeatSync_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotSeatSync_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotSeatSync_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotSeatSync_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SeatSync_Set() - (char *)sample);

                BotSeatSync_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BotSeatSync_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotSeatSync_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotSeatSync_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotSeatSync_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotSeatSync_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotSeatSync_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotSeatSync_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotSeatSync_Set_struct >;

                BotSeatSync_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotSeatSync_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotSeatSync_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotSeatSync_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotSeatSync_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotSeatSync_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotSeatSync_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BotSeatSync_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BotSeatSync_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"constant",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotSeatSync_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotSeatSync_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        BotSeatSync_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotSeatSync_Get_struct*/

                if (is_initialized) {
                    return &BotSeatSync_Get_struct_g_tc;
                }

                BotSeatSync_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BotSeatSync_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotSeatSync_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotSeatSync_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&BotSeatSync_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BotSeatSync_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotSeatSync_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotSeatSync_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotSeatSync_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BotSeatSync_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BotSeatSync_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotSeatSync_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotSeatSync_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotSeatSync_Get_struct *sample;

                static RTIXCdrMemberAccessInfo BotSeatSync_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotSeatSync_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotSeatSync_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotSeatSync_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotSeatSync_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->constant() - (char *)sample);

                BotSeatSync_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BotSeatSync_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotSeatSync_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotSeatSync_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotSeatSync_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotSeatSync_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotSeatSync_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotSeatSync_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotSeatSync_Get_struct >;

                BotSeatSync_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotSeatSync_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotSeatSync_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotSeatSync_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotSeatSync_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotSeatSync_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotSeatSync_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BotSeatSync_Rsp_struct_g_tc_members[1]=
                {

                    {
                        (char *)"SeatSync_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotSeatSync_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotSeatSync_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        BotSeatSync_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotSeatSync_Rsp_struct*/

                if (is_initialized) {
                    return &BotSeatSync_Rsp_struct_g_tc;
                }

                BotSeatSync_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotSeatSync_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BotSeatSync_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotSeatSync_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotSeatSync_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotSeatSync_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotSeatSync_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotSeatSync_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotSeatSync_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotSeatSync_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo BotSeatSync_Rsp_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotSeatSync_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotSeatSync_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotSeatSync_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotSeatSync_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SeatSync_Rsp() - (char *)sample);

                BotSeatSync_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotSeatSync_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotSeatSync_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotSeatSync_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotSeatSync_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotSeatSync_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotSeatSync_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotSeatSync_Rsp_struct >;

                BotSeatSync_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotSeatSync_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotSeatSync_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotSeatSync_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotSeatSync_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotSeatSync_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::TargetPointSubstruct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member TargetPointSubstruct_g_tc_members[3]=
                {

                    {
                        (char *)"TargetPoint_Num",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"MovePosition_Rz",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TargetPointTime_Increase",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode TargetPointSubstruct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::TargetPointSubstruct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        TargetPointSubstruct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for TargetPointSubstruct*/

                if (is_initialized) {
                    return &TargetPointSubstruct_g_tc;
                }

                TargetPointSubstruct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                TargetPointSubstruct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                TargetPointSubstruct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                TargetPointSubstruct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;

                /* Initialize the values for member annotations. */
                TargetPointSubstruct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                TargetPointSubstruct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                TargetPointSubstruct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                TargetPointSubstruct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                TargetPointSubstruct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                TargetPointSubstruct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                TargetPointSubstruct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                TargetPointSubstruct_g_tc_members[1]._annotations._defaultValue._u.ushort_value = 0;
                TargetPointSubstruct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                TargetPointSubstruct_g_tc_members[1]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                TargetPointSubstruct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                TargetPointSubstruct_g_tc_members[1]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                TargetPointSubstruct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                TargetPointSubstruct_g_tc_members[2]._annotations._defaultValue._u.ushort_value = 0;
                TargetPointSubstruct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                TargetPointSubstruct_g_tc_members[2]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                TargetPointSubstruct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                TargetPointSubstruct_g_tc_members[2]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                TargetPointSubstruct_g_tc._data._sampleAccessInfo = sample_access_info();
                TargetPointSubstruct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &TargetPointSubstruct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::TargetPointSubstruct *sample;

                static RTIXCdrMemberAccessInfo TargetPointSubstruct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo TargetPointSubstruct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &TargetPointSubstruct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::TargetPointSubstruct);
                if (sample == NULL) {
                    return NULL;
                }

                TargetPointSubstruct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TargetPoint_Num() - (char *)sample);

                TargetPointSubstruct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->MovePosition_Rz() - (char *)sample);

                TargetPointSubstruct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TargetPointTime_Increase() - (char *)sample);

                TargetPointSubstruct_g_sampleAccessInfo.memberAccessInfos = 
                TargetPointSubstruct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::TargetPointSubstruct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        TargetPointSubstruct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        TargetPointSubstruct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                TargetPointSubstruct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                TargetPointSubstruct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::TargetPointSubstruct >;

                TargetPointSubstruct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &TargetPointSubstruct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin TargetPointSubstruct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &TargetPointSubstruct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::TargetPointSubstruct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::TargetPointSubstruct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotScript_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BotScript_Ctrl_struct_g_tc_TargetPointSequence_sequence;

                static DDS_TypeCode_Member BotScript_Ctrl_struct_g_tc_members[3]=
                {

                    {
                        (char *)"ScriptID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"MotionScript",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TargetPointSequence",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotScript_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotScript_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        BotScript_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotScript_Ctrl_struct*/

                if (is_initialized) {
                    return &BotScript_Ctrl_struct_g_tc;
                }

                BotScript_Ctrl_struct_g_tc_TargetPointSequence_sequence = initialize_sequence_typecode< ::rti::core::bounded_sequence< BodyDomain::TargetPointSubstruct, 252L > >((252L));

                BotScript_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotScript_Ctrl_struct_g_tc_TargetPointSequence_sequence._data._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::TargetPointSubstruct>::get().native();
                BotScript_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotScript_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotScript_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)& BotScript_Ctrl_struct_g_tc_TargetPointSequence_sequence;

                /* Initialize the values for member annotations. */
                BotScript_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotScript_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotScript_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotScript_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotScript_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotScript_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotScript_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotScript_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BotScript_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotScript_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotScript_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotScript_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotScript_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotScript_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotScript_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotScript_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo BotScript_Ctrl_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotScript_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotScript_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotScript_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotScript_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ScriptID() - (char *)sample);

                BotScript_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->MotionScript() - (char *)sample);

                BotScript_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TargetPointSequence() - (char *)sample);

                BotScript_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotScript_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotScript_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotScript_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotScript_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotScript_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotScript_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotScript_Ctrl_struct >;

                BotScript_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotScript_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotScript_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotScript_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotScript_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotScript_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotScript_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BotScript_St_struct_g_tc_members[1]=
                {

                    {
                        (char *)"TransScript_st",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotScript_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotScript_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        BotScript_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotScript_St_struct*/

                if (is_initialized) {
                    return &BotScript_St_struct_g_tc;
                }

                BotScript_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotScript_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BotScript_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotScript_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotScript_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotScript_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotScript_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotScript_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotScript_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotScript_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotScript_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotScript_St_struct *sample;

                static RTIXCdrMemberAccessInfo BotScript_St_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotScript_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotScript_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotScript_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotScript_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TransScript_st() - (char *)sample);

                BotScript_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotScript_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotScript_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotScript_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotScript_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotScript_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotScript_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotScript_St_struct >;

                BotScript_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotScript_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotScript_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotScript_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotScript_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotScript_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotMotion_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode BotMotion_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member BotMotion_Ctrl_struct_g_tc_members[6]=
                {

                    {
                        (char *)"RelCallMotionScript_Ctrl",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AbsCallMotionScript_Ctrl",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"JogRight_Ctrl",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"JogLeft_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ComfortPosition_Ctrl",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotMotion_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotMotion_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        BotMotion_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotMotion_Ctrl_struct*/

                if (is_initialized) {
                    return &BotMotion_Ctrl_struct_g_tc;
                }

                BotMotion_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                BotMotion_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotMotion_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&BotMotion_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                BotMotion_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                BotMotion_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                BotMotion_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotMotion_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotMotion_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotMotion_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo BotMotion_Ctrl_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotMotion_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotMotion_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotMotion_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotMotion_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RelCallMotionScript_Ctrl() - (char *)sample);

                BotMotion_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AbsCallMotionScript_Ctrl() - (char *)sample);

                BotMotion_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->JogRight_Ctrl() - (char *)sample);

                BotMotion_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->JogLeft_Ctrl() - (char *)sample);

                BotMotion_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ComfortPosition_Ctrl() - (char *)sample);

                BotMotion_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                BotMotion_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotMotion_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotMotion_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotMotion_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotMotion_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotMotion_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotMotion_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotMotion_Ctrl_struct >;

                BotMotion_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotMotion_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotMotion_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotMotion_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotMotion_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotMotion_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotMotion_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BotMotion_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"BotMotion_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotMotion_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotMotion_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        BotMotion_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotMotion_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &BotMotion_Ctrl_SOA_struct_g_tc;
                }

                BotMotion_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotMotion_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BotMotion_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotMotion_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotMotion_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotMotion_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo BotMotion_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotMotion_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotMotion_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BotMotion_Ctrl_SOA_u8() - (char *)sample);

                BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotMotion_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotMotion_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotMotion_Ctrl_SOA_struct >;

                BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotMotion_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotMotion_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotMotion_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotMotion_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotMotion_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::BotMotion_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member BotMotion_St_struct_g_tc_members[6]=
                {

                    {
                        (char *)"Main_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Sub_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RotationAngle_Z_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"MotionCommand_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ComfortPosition_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ScriptExeFinish_Rsp",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode BotMotion_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::BotMotion_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        6, /* Number of members */
                        BotMotion_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for BotMotion_St_struct*/

                if (is_initialized) {
                    return &BotMotion_St_struct_g_tc;
                }

                BotMotion_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                BotMotion_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                BotMotion_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                BotMotion_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                BotMotion_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                BotMotion_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                BotMotion_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                BotMotion_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                BotMotion_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &BotMotion_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::BotMotion_St_struct *sample;

                static RTIXCdrMemberAccessInfo BotMotion_St_struct_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo BotMotion_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &BotMotion_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::BotMotion_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                BotMotion_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Main_St() - (char *)sample);

                BotMotion_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Sub_St() - (char *)sample);

                BotMotion_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RotationAngle_Z_St() - (char *)sample);

                BotMotion_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->MotionCommand_St() - (char *)sample);

                BotMotion_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ComfortPosition_St() - (char *)sample);

                BotMotion_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ScriptExeFinish_Rsp() - (char *)sample);

                BotMotion_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                BotMotion_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::BotMotion_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        BotMotion_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        BotMotion_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                BotMotion_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                BotMotion_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::BotMotion_St_struct >;

                BotMotion_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &BotMotion_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin BotMotion_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &BotMotion_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::BotMotion_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::BotMotion_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Bot_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Bot_Srv_Req_Union_g_tc_members[3]=
                {

                    {
                        (char *)"BotSeatSync_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BotSeatSync_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BotMotion_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Bot_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Bot_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        Bot_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Bot_Srv_Req_Union*/

                if (is_initialized) {
                    return &Bot_Srv_Req_Union_g_tc;
                }

                Bot_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Bot_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BotSeatSync_Set_struct>::get().native();
                Bot_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BotSeatSync_Get_struct>::get().native();
                Bot_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BotMotion_Ctrl_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                Bot_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                Bot_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                Bot_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Bot_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Bot_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo Bot_Srv_Req_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Bot_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Bot_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Bot_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                Bot_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                Bot_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BotSeatSync_Set() - (char *)sample);

                sample->_d() = 1;
                Bot_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BotSeatSync_Get() - (char *)sample);

                sample->_d() = 2;
                Bot_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BotMotion_Ctrl() - (char *)sample);

                Bot_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                Bot_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Bot_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Bot_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Bot_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Bot_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Bot_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Bot_Srv_Req_Union >;

                Bot_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Bot_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Bot_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Bot_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::Bot_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Bot_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Bot_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Bot_Srv_Resp_Union_g_tc_members[3]=
                {

                    {
                        (char *)"BotSeatSync_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BotSeatSync_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BotMotion_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Bot_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Bot_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        Bot_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Bot_Srv_Resp_Union*/

                if (is_initialized) {
                    return &Bot_Srv_Resp_Union_g_tc;
                }

                Bot_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Bot_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BotSeatSync_Rsp_struct>::get().native();
                Bot_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BotSeatSync_Rsp_struct>::get().native();
                Bot_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::BotMotion_Ctrl_SOA_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                Bot_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                Bot_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                Bot_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Bot_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Bot_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo Bot_Srv_Resp_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Bot_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Bot_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Bot_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                Bot_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                Bot_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BotSeatSync_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                Bot_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BotSeatSync_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                Bot_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BotMotion_Ctrl_SOA() - (char *)sample);

                Bot_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                Bot_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Bot_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Bot_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Bot_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Bot_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Bot_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Bot_Srv_Resp_Union >;

                Bot_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Bot_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Bot_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Bot_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::Bot_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Bot_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DKLst_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DKLst_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member DKLst_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"DKLst_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DKLst_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DKLst_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        DKLst_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DKLst_Get_struct*/

                if (is_initialized) {
                    return &DKLst_Get_struct_g_tc;
                }

                DKLst_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                DKLst_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DKLst_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DKLst_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DKLst_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                DKLst_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DKLst_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DKLst_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DKLst_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DKLst_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DKLst_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DKLst_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                DKLst_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                DKLst_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DKLst_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DKLst_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DKLst_Get_struct *sample;

                static RTIXCdrMemberAccessInfo DKLst_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DKLst_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DKLst_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DKLst_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DKLst_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DKLst_Req() - (char *)sample);

                DKLst_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                DKLst_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                DKLst_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DKLst_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DKLst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DKLst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DKLst_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DKLst_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DKLst_Get_struct >;

                DKLst_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DKLst_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DKLst_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DKLst_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DKLst_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DKLst_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DigitalKeyIDArray > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DigitalKeyIDArray_g_tc_DigitalKeyID_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,16L, NULL,NULL);

                static DDS_TypeCode_Member DigitalKeyIDArray_g_tc_members[1]=
                {

                    {
                        (char *)"DigitalKeyID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DigitalKeyIDArray_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DigitalKeyIDArray", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        DigitalKeyIDArray_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DigitalKeyIDArray*/

                if (is_initialized) {
                    return &DigitalKeyIDArray_g_tc;
                }

                DigitalKeyIDArray_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DigitalKeyIDArray_g_tc_DigitalKeyID_array._data._typeCode =(RTICdrTypeCode *)&DDS_g_tc_octet;
                DigitalKeyIDArray_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& DigitalKeyIDArray_g_tc_DigitalKeyID_array;

                /* Initialize the values for member annotations. */

                DigitalKeyIDArray_g_tc._data._sampleAccessInfo = sample_access_info();
                DigitalKeyIDArray_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DigitalKeyIDArray_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DigitalKeyIDArray *sample;

                static RTIXCdrMemberAccessInfo DigitalKeyIDArray_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DigitalKeyIDArray_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DigitalKeyIDArray_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DigitalKeyIDArray);
                if (sample == NULL) {
                    return NULL;
                }

                DigitalKeyIDArray_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DigitalKeyID() - (char *)sample);

                DigitalKeyIDArray_g_sampleAccessInfo.memberAccessInfos = 
                DigitalKeyIDArray_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DigitalKeyIDArray);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DigitalKeyIDArray_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DigitalKeyIDArray_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DigitalKeyIDArray_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DigitalKeyIDArray_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DigitalKeyIDArray >;

                DigitalKeyIDArray_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DigitalKeyIDArray_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DigitalKeyIDArray_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DigitalKeyIDArray_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DigitalKeyIDArray >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DigitalKeyIDArray >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DKLstSubstruct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DKLstSubstruct_g_tc_DigitalKeyName_string;

                static DDS_TypeCode_Member DKLstSubstruct_g_tc_members[4]=
                {

                    {
                        (char *)"DigitalKeyID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DigitalKey_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DigitalKeyName",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DigitalKeyAuth_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DKLstSubstruct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DKLstSubstruct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        DKLstSubstruct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DKLstSubstruct*/

                if (is_initialized) {
                    return &DKLstSubstruct_g_tc;
                }

                DKLstSubstruct_g_tc_DigitalKeyName_string = initialize_string_typecode((20L));

                DKLstSubstruct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DKLstSubstruct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DigitalKeyIDArray>::get().native();
                DKLstSubstruct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DKLstSubstruct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DKLstSubstruct_g_tc_DigitalKeyName_string;
                DKLstSubstruct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */

                DKLstSubstruct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DKLstSubstruct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                DKLstSubstruct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DKLstSubstruct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DKLstSubstruct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DKLstSubstruct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DKLstSubstruct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                DKLstSubstruct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                DKLstSubstruct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DKLstSubstruct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                DKLstSubstruct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DKLstSubstruct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DKLstSubstruct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DKLstSubstruct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DKLstSubstruct_g_tc._data._sampleAccessInfo = sample_access_info();
                DKLstSubstruct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DKLstSubstruct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DKLstSubstruct *sample;

                static RTIXCdrMemberAccessInfo DKLstSubstruct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DKLstSubstruct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DKLstSubstruct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DKLstSubstruct);
                if (sample == NULL) {
                    return NULL;
                }

                DKLstSubstruct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DigitalKeyID() - (char *)sample);

                DKLstSubstruct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DigitalKey_St() - (char *)sample);

                DKLstSubstruct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DigitalKeyName() - (char *)sample);

                DKLstSubstruct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DigitalKeyAuth_St() - (char *)sample);

                DKLstSubstruct_g_sampleAccessInfo.memberAccessInfos = 
                DKLstSubstruct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DKLstSubstruct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DKLstSubstruct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DKLstSubstruct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DKLstSubstruct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DKLstSubstruct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DKLstSubstruct >;

                DKLstSubstruct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DKLstSubstruct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DKLstSubstruct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DKLstSubstruct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DKLstSubstruct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DKLstSubstruct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::DKLst_Rsp_array > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DKLst_Rsp_array_g_tc_DKLst_sequence;

                static DDS_TypeCode_Member DKLst_Rsp_array_g_tc_members[1]=
                {

                    {
                        (char *)"DKLst",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DKLst_Rsp_array_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::DKLst_Rsp_array", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        DKLst_Rsp_array_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DKLst_Rsp_array*/

                if (is_initialized) {
                    return &DKLst_Rsp_array_g_tc;
                }

                DKLst_Rsp_array_g_tc_DKLst_sequence = initialize_sequence_typecode< ::rti::core::bounded_sequence< BodyDomain::DKLstSubstruct, 16L > >((16L));

                DKLst_Rsp_array_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DKLst_Rsp_array_g_tc_DKLst_sequence._data._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DKLstSubstruct>::get().native();
                DKLst_Rsp_array_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& DKLst_Rsp_array_g_tc_DKLst_sequence;

                /* Initialize the values for member annotations. */

                DKLst_Rsp_array_g_tc._data._sampleAccessInfo = sample_access_info();
                DKLst_Rsp_array_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DKLst_Rsp_array_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::DKLst_Rsp_array *sample;

                static RTIXCdrMemberAccessInfo DKLst_Rsp_array_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DKLst_Rsp_array_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DKLst_Rsp_array_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::DKLst_Rsp_array);
                if (sample == NULL) {
                    return NULL;
                }

                DKLst_Rsp_array_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DKLst() - (char *)sample);

                DKLst_Rsp_array_g_sampleAccessInfo.memberAccessInfos = 
                DKLst_Rsp_array_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::DKLst_Rsp_array);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DKLst_Rsp_array_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DKLst_Rsp_array_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DKLst_Rsp_array_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DKLst_Rsp_array_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::DKLst_Rsp_array >;

                DKLst_Rsp_array_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DKLst_Rsp_array_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DKLst_Rsp_array_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DKLst_Rsp_array_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::DKLst_Rsp_array >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::DKLst_Rsp_array >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyLst_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NFCKeyLst_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member NFCKeyLst_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"NFCKeyLst_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyLst_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyLst_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        NFCKeyLst_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyLst_Get_struct*/

                if (is_initialized) {
                    return &NFCKeyLst_Get_struct_g_tc;
                }

                NFCKeyLst_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                NFCKeyLst_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyLst_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyLst_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&NFCKeyLst_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                NFCKeyLst_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLst_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyLst_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLst_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyLst_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLst_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyLst_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NFCKeyLst_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NFCKeyLst_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyLst_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyLst_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyLst_Get_struct *sample;

                static RTIXCdrMemberAccessInfo NFCKeyLst_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyLst_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyLst_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyLst_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyLst_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyLst_Req() - (char *)sample);

                NFCKeyLst_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                NFCKeyLst_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyLst_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyLst_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyLst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyLst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyLst_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyLst_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyLst_Get_struct >;

                NFCKeyLst_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyLst_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyLst_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyLst_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyLst_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyLst_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCCardIDArray > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NFCCardIDArray_g_tc_NFCCardID_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,16L, NULL,NULL);

                static DDS_TypeCode_Member NFCCardIDArray_g_tc_members[1]=
                {

                    {
                        (char *)"NFCCardID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCCardIDArray_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCCardIDArray", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NFCCardIDArray_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCCardIDArray*/

                if (is_initialized) {
                    return &NFCCardIDArray_g_tc;
                }

                NFCCardIDArray_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCCardIDArray_g_tc_NFCCardID_array._data._typeCode =(RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCCardIDArray_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& NFCCardIDArray_g_tc_NFCCardID_array;

                /* Initialize the values for member annotations. */

                NFCCardIDArray_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCCardIDArray_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCCardIDArray_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCCardIDArray *sample;

                static RTIXCdrMemberAccessInfo NFCCardIDArray_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCCardIDArray_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCCardIDArray_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCCardIDArray);
                if (sample == NULL) {
                    return NULL;
                }

                NFCCardIDArray_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardID() - (char *)sample);

                NFCCardIDArray_g_sampleAccessInfo.memberAccessInfos = 
                NFCCardIDArray_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCCardIDArray);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCCardIDArray_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCCardIDArray_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCCardIDArray_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCCardIDArray_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCCardIDArray >;

                NFCCardIDArray_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCCardIDArray_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCCardIDArray_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCCardIDArray_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCCardIDArray >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCCardIDArray >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyLstSubstruct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NFCKeyLstSubstruct_g_tc_NFCCardName_string;

                static DDS_TypeCode_Member NFCKeyLstSubstruct_g_tc_members[4]=
                {

                    {
                        (char *)"NFCCardID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCCard1_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCCardName",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCCardAuth_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyLstSubstruct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyLstSubstruct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        4, /* Number of members */
                        NFCKeyLstSubstruct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyLstSubstruct*/

                if (is_initialized) {
                    return &NFCKeyLstSubstruct_g_tc;
                }

                NFCKeyLstSubstruct_g_tc_NFCCardName_string = initialize_string_typecode((20L));

                NFCKeyLstSubstruct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyLstSubstruct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCCardIDArray>::get().native();
                NFCKeyLstSubstruct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyLstSubstruct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&NFCKeyLstSubstruct_g_tc_NFCCardName_string;
                NFCKeyLstSubstruct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */

                NFCKeyLstSubstruct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLstSubstruct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyLstSubstruct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLstSubstruct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyLstSubstruct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLstSubstruct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyLstSubstruct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NFCKeyLstSubstruct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NFCKeyLstSubstruct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLstSubstruct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyLstSubstruct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLstSubstruct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyLstSubstruct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyLstSubstruct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyLstSubstruct_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyLstSubstruct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyLstSubstruct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyLstSubstruct *sample;

                static RTIXCdrMemberAccessInfo NFCKeyLstSubstruct_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyLstSubstruct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyLstSubstruct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyLstSubstruct);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyLstSubstruct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardID() - (char *)sample);

                NFCKeyLstSubstruct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCard1_St() - (char *)sample);

                NFCKeyLstSubstruct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardName() - (char *)sample);

                NFCKeyLstSubstruct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardAuth_St() - (char *)sample);

                NFCKeyLstSubstruct_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyLstSubstruct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyLstSubstruct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyLstSubstruct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyLstSubstruct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyLstSubstruct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyLstSubstruct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyLstSubstruct >;

                NFCKeyLstSubstruct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyLstSubstruct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyLstSubstruct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyLstSubstruct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyLstSubstruct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyLstSubstruct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyLst_Rsp_array > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NFCKeyLst_Rsp_array_g_tc_NFCKeyLst_sequence;

                static DDS_TypeCode_Member NFCKeyLst_Rsp_array_g_tc_members[1]=
                {

                    {
                        (char *)"NFCKeyLst",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyLst_Rsp_array_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyLst_Rsp_array", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NFCKeyLst_Rsp_array_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyLst_Rsp_array*/

                if (is_initialized) {
                    return &NFCKeyLst_Rsp_array_g_tc;
                }

                NFCKeyLst_Rsp_array_g_tc_NFCKeyLst_sequence = initialize_sequence_typecode< ::rti::core::bounded_sequence< BodyDomain::NFCKeyLstSubstruct, 10L > >((10L));

                NFCKeyLst_Rsp_array_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyLst_Rsp_array_g_tc_NFCKeyLst_sequence._data._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCKeyLstSubstruct>::get().native();
                NFCKeyLst_Rsp_array_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& NFCKeyLst_Rsp_array_g_tc_NFCKeyLst_sequence;

                /* Initialize the values for member annotations. */

                NFCKeyLst_Rsp_array_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyLst_Rsp_array_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyLst_Rsp_array_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyLst_Rsp_array *sample;

                static RTIXCdrMemberAccessInfo NFCKeyLst_Rsp_array_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyLst_Rsp_array_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyLst_Rsp_array_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyLst_Rsp_array);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyLst_Rsp_array_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyLst() - (char *)sample);

                NFCKeyLst_Rsp_array_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyLst_Rsp_array_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyLst_Rsp_array);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyLst_Rsp_array_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyLst_Rsp_array_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyLst_Rsp_array_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyLst_Rsp_array_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyLst_Rsp_array >;

                NFCKeyLst_Rsp_array_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyLst_Rsp_array_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyLst_Rsp_array_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyLst_Rsp_array_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyLst_Rsp_array >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyLst_Rsp_array >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyRename_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NFCKeyRename_Set_struct_g_tc_NFCCardName_string;
                static DDS_TypeCode NFCKeyRename_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member NFCKeyRename_Set_struct_g_tc_members[3]=
                {

                    {
                        (char *)"NFCCardID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCCardName",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyRename_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyRename_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        NFCKeyRename_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyRename_Set_struct*/

                if (is_initialized) {
                    return &NFCKeyRename_Set_struct_g_tc;
                }

                NFCKeyRename_Set_struct_g_tc_NFCCardName_string = initialize_string_typecode((20L));
                NFCKeyRename_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                NFCKeyRename_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyRename_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCCardIDArray>::get().native();
                NFCKeyRename_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&NFCKeyRename_Set_struct_g_tc_NFCCardName_string;
                NFCKeyRename_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&NFCKeyRename_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */

                NFCKeyRename_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NFCKeyRename_Set_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NFCKeyRename_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NFCKeyRename_Set_struct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NFCKeyRename_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyRename_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyRename_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyRename_Set_struct *sample;

                static RTIXCdrMemberAccessInfo NFCKeyRename_Set_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyRename_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyRename_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyRename_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyRename_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardID() - (char *)sample);

                NFCKeyRename_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardName() - (char *)sample);

                NFCKeyRename_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                NFCKeyRename_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyRename_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyRename_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyRename_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyRename_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyRename_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyRename_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyRename_Set_struct >;

                NFCKeyRename_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyRename_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyRename_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyRename_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyRename_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyRename_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyRename_Rsp_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member NFCKeyRename_Rsp_struct_g_tc_members[1]=
                {

                    {
                        (char *)"NFCCardRenameRslt",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyRename_Rsp_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyRename_Rsp_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NFCKeyRename_Rsp_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyRename_Rsp_struct*/

                if (is_initialized) {
                    return &NFCKeyRename_Rsp_struct_g_tc;
                }

                NFCKeyRename_Rsp_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyRename_Rsp_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                NFCKeyRename_Rsp_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyRename_Rsp_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyRename_Rsp_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyRename_Rsp_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyRename_Rsp_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyRename_Rsp_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyRename_Rsp_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyRename_Rsp_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyRename_Rsp_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyRename_Rsp_struct *sample;

                static RTIXCdrMemberAccessInfo NFCKeyRename_Rsp_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyRename_Rsp_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyRename_Rsp_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyRename_Rsp_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyRename_Rsp_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardRenameRslt() - (char *)sample);

                NFCKeyRename_Rsp_struct_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyRename_Rsp_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyRename_Rsp_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyRename_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyRename_Rsp_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyRename_Rsp_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyRename_Rsp_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyRename_Rsp_struct >;

                NFCKeyRename_Rsp_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyRename_Rsp_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyRename_Rsp_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyRename_Rsp_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyRename_Rsp_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyRename_Rsp_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::PhysicalKeyLst_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member PhysicalKeyLst_Get_struct_g_tc_members[1]=
                {

                    {
                        (char *)"PhysicalKeyLst_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PhysicalKeyLst_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::PhysicalKeyLst_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        PhysicalKeyLst_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PhysicalKeyLst_Get_struct*/

                if (is_initialized) {
                    return &PhysicalKeyLst_Get_struct_g_tc;
                }

                PhysicalKeyLst_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PhysicalKeyLst_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                PhysicalKeyLst_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PhysicalKeyLst_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                PhysicalKeyLst_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PhysicalKeyLst_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PhysicalKeyLst_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PhysicalKeyLst_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PhysicalKeyLst_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                PhysicalKeyLst_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PhysicalKeyLst_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::PhysicalKeyLst_Get_struct *sample;

                static RTIXCdrMemberAccessInfo PhysicalKeyLst_Get_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PhysicalKeyLst_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PhysicalKeyLst_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::PhysicalKeyLst_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                PhysicalKeyLst_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PhysicalKeyLst_Req() - (char *)sample);

                PhysicalKeyLst_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                PhysicalKeyLst_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::PhysicalKeyLst_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PhysicalKeyLst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PhysicalKeyLst_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PhysicalKeyLst_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PhysicalKeyLst_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::PhysicalKeyLst_Get_struct >;

                PhysicalKeyLst_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PhysicalKeyLst_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PhysicalKeyLst_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PhysicalKeyLst_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::PhysicalKeyLst_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::PhysicalKeyLst_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::PhysicalKeyMACArray > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode PhysicalKeyMACArray_g_tc_PhysicalKeyMACAddr_array =DDS_INITIALIZE_ARRAY_TYPECODE(1,6L, NULL,NULL);

                static DDS_TypeCode_Member PhysicalKeyMACArray_g_tc_members[1]=
                {

                    {
                        (char *)"PhysicalKeyMACAddr",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PhysicalKeyMACArray_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::PhysicalKeyMACArray", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        PhysicalKeyMACArray_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PhysicalKeyMACArray*/

                if (is_initialized) {
                    return &PhysicalKeyMACArray_g_tc;
                }

                PhysicalKeyMACArray_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PhysicalKeyMACArray_g_tc_PhysicalKeyMACAddr_array._data._typeCode =(RTICdrTypeCode *)&DDS_g_tc_octet;
                PhysicalKeyMACArray_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& PhysicalKeyMACArray_g_tc_PhysicalKeyMACAddr_array;

                /* Initialize the values for member annotations. */

                PhysicalKeyMACArray_g_tc._data._sampleAccessInfo = sample_access_info();
                PhysicalKeyMACArray_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PhysicalKeyMACArray_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::PhysicalKeyMACArray *sample;

                static RTIXCdrMemberAccessInfo PhysicalKeyMACArray_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PhysicalKeyMACArray_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PhysicalKeyMACArray_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::PhysicalKeyMACArray);
                if (sample == NULL) {
                    return NULL;
                }

                PhysicalKeyMACArray_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PhysicalKeyMACAddr() - (char *)sample);

                PhysicalKeyMACArray_g_sampleAccessInfo.memberAccessInfos = 
                PhysicalKeyMACArray_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::PhysicalKeyMACArray);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PhysicalKeyMACArray_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PhysicalKeyMACArray_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PhysicalKeyMACArray_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PhysicalKeyMACArray_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::PhysicalKeyMACArray >;

                PhysicalKeyMACArray_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PhysicalKeyMACArray_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PhysicalKeyMACArray_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PhysicalKeyMACArray_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::PhysicalKeyMACArray >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::PhysicalKeyMACArray >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::PhysicalKeyLstSubstruct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member PhysicalKeyLstSubstruct_g_tc_members[2]=
                {

                    {
                        (char *)"PhysicalKeyMACAddr",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PhysicalKeyAuth_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PhysicalKeyLstSubstruct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::PhysicalKeyLstSubstruct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        PhysicalKeyLstSubstruct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PhysicalKeyLstSubstruct*/

                if (is_initialized) {
                    return &PhysicalKeyLstSubstruct_g_tc;
                }

                PhysicalKeyLstSubstruct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PhysicalKeyLstSubstruct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::PhysicalKeyMACArray>::get().native();
                PhysicalKeyLstSubstruct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */

                PhysicalKeyLstSubstruct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PhysicalKeyLstSubstruct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                PhysicalKeyLstSubstruct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PhysicalKeyLstSubstruct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PhysicalKeyLstSubstruct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PhysicalKeyLstSubstruct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PhysicalKeyLstSubstruct_g_tc._data._sampleAccessInfo = sample_access_info();
                PhysicalKeyLstSubstruct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PhysicalKeyLstSubstruct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::PhysicalKeyLstSubstruct *sample;

                static RTIXCdrMemberAccessInfo PhysicalKeyLstSubstruct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PhysicalKeyLstSubstruct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PhysicalKeyLstSubstruct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::PhysicalKeyLstSubstruct);
                if (sample == NULL) {
                    return NULL;
                }

                PhysicalKeyLstSubstruct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PhysicalKeyMACAddr() - (char *)sample);

                PhysicalKeyLstSubstruct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PhysicalKeyAuth_St() - (char *)sample);

                PhysicalKeyLstSubstruct_g_sampleAccessInfo.memberAccessInfos = 
                PhysicalKeyLstSubstruct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::PhysicalKeyLstSubstruct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PhysicalKeyLstSubstruct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PhysicalKeyLstSubstruct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PhysicalKeyLstSubstruct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PhysicalKeyLstSubstruct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::PhysicalKeyLstSubstruct >;

                PhysicalKeyLstSubstruct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PhysicalKeyLstSubstruct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PhysicalKeyLstSubstruct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PhysicalKeyLstSubstruct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::PhysicalKeyLstSubstruct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::PhysicalKeyLstSubstruct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::PhysicalKeyLst_Rsp_array > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode PhysicalKeyLst_Rsp_array_g_tc_PhysicalKeyLst_sequence;

                static DDS_TypeCode_Member PhysicalKeyLst_Rsp_array_g_tc_members[1]=
                {

                    {
                        (char *)"PhysicalKeyLst",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PhysicalKeyLst_Rsp_array_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::PhysicalKeyLst_Rsp_array", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        PhysicalKeyLst_Rsp_array_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PhysicalKeyLst_Rsp_array*/

                if (is_initialized) {
                    return &PhysicalKeyLst_Rsp_array_g_tc;
                }

                PhysicalKeyLst_Rsp_array_g_tc_PhysicalKeyLst_sequence = initialize_sequence_typecode< ::rti::core::bounded_sequence< BodyDomain::PhysicalKeyLstSubstruct, 2L > >((2L));

                PhysicalKeyLst_Rsp_array_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PhysicalKeyLst_Rsp_array_g_tc_PhysicalKeyLst_sequence._data._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::PhysicalKeyLstSubstruct>::get().native();
                PhysicalKeyLst_Rsp_array_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& PhysicalKeyLst_Rsp_array_g_tc_PhysicalKeyLst_sequence;

                /* Initialize the values for member annotations. */

                PhysicalKeyLst_Rsp_array_g_tc._data._sampleAccessInfo = sample_access_info();
                PhysicalKeyLst_Rsp_array_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PhysicalKeyLst_Rsp_array_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::PhysicalKeyLst_Rsp_array *sample;

                static RTIXCdrMemberAccessInfo PhysicalKeyLst_Rsp_array_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PhysicalKeyLst_Rsp_array_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PhysicalKeyLst_Rsp_array_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::PhysicalKeyLst_Rsp_array);
                if (sample == NULL) {
                    return NULL;
                }

                PhysicalKeyLst_Rsp_array_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PhysicalKeyLst() - (char *)sample);

                PhysicalKeyLst_Rsp_array_g_sampleAccessInfo.memberAccessInfos = 
                PhysicalKeyLst_Rsp_array_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::PhysicalKeyLst_Rsp_array);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PhysicalKeyLst_Rsp_array_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PhysicalKeyLst_Rsp_array_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PhysicalKeyLst_Rsp_array_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PhysicalKeyLst_Rsp_array_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::PhysicalKeyLst_Rsp_array >;

                PhysicalKeyLst_Rsp_array_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PhysicalKeyLst_Rsp_array_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PhysicalKeyLst_Rsp_array_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PhysicalKeyLst_Rsp_array_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::PhysicalKeyLst_Rsp_array >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::PhysicalKeyLst_Rsp_array >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyMag_Crtl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NFCKeyMag_Crtl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member NFCKeyMag_Crtl_struct_g_tc_members[7]=
                {

                    {
                        (char *)"NFCSKeyAuth_Set",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyBind_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyDel_Set",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyFrz_Set",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyUnfrzAuth_Set",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCCardID",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyMag_Crtl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyMag_Crtl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        7, /* Number of members */
                        NFCKeyMag_Crtl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyMag_Crtl_struct*/

                if (is_initialized) {
                    return &NFCKeyMag_Crtl_struct_g_tc;
                }

                NFCKeyMag_Crtl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                NFCKeyMag_Crtl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyMag_Crtl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_Crtl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_Crtl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_Crtl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_Crtl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_Crtl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCCardIDArray>::get().native();
                NFCKeyMag_Crtl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&NFCKeyMag_Crtl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                NFCKeyMag_Crtl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_Crtl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_Crtl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_Crtl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_Crtl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_Crtl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_Crtl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_Crtl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_Crtl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_Crtl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_Crtl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_Crtl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_Crtl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_Crtl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_Crtl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_Crtl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NFCKeyMag_Crtl_struct_g_tc_members[6]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NFCKeyMag_Crtl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyMag_Crtl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyMag_Crtl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyMag_Crtl_struct *sample;

                static RTIXCdrMemberAccessInfo NFCKeyMag_Crtl_struct_g_memberAccessInfos[7] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyMag_Crtl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyMag_Crtl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyMag_Crtl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyMag_Crtl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCSKeyAuth_Set() - (char *)sample);

                NFCKeyMag_Crtl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyBind_Set() - (char *)sample);

                NFCKeyMag_Crtl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyDel_Set() - (char *)sample);

                NFCKeyMag_Crtl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyFrz_Set() - (char *)sample);

                NFCKeyMag_Crtl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyUnfrzAuth_Set() - (char *)sample);

                NFCKeyMag_Crtl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCCardID() - (char *)sample);

                NFCKeyMag_Crtl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                NFCKeyMag_Crtl_struct_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyMag_Crtl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyMag_Crtl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyMag_Crtl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyMag_Crtl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyMag_Crtl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyMag_Crtl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyMag_Crtl_struct >;

                NFCKeyMag_Crtl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyMag_Crtl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyMag_Crtl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyMag_Crtl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyMag_Crtl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyMag_Crtl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyMag_Crtl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member NFCKeyMag_Crtl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"NFCKeyMag_Crtl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyMag_Crtl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyMag_Crtl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NFCKeyMag_Crtl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyMag_Crtl_SOA_struct*/

                if (is_initialized) {
                    return &NFCKeyMag_Crtl_SOA_struct_g_tc;
                }

                NFCKeyMag_Crtl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyMag_Crtl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                NFCKeyMag_Crtl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_Crtl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_Crtl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_Crtl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_Crtl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyMag_Crtl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyMag_Crtl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyMag_Crtl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo NFCKeyMag_Crtl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyMag_Crtl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyMag_Crtl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyMag_Crtl_SOA_u8() - (char *)sample);

                NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyMag_Crtl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyMag_Crtl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyMag_Crtl_SOA_struct >;

                NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyMag_Crtl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyMag_Crtl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyMag_Crtl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyMag_Crtl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyMag_Crtl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::NFCKeyMag_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NFCKeyMag_St_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member NFCKeyMag_St_struct_g_tc_members[11]=
                {

                    {
                        (char *)"NFCKeyBindRslt_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyBindFailRsn_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyDelRslt_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyDelFailRsn_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyFrzRslt_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyFrzFailRsn_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyUnfrzAuthRslt_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyUnfrzAuthFailRsn_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyUnfrzRslt_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyUnfrzFailRsn_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NFCKeyMag_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::NFCKeyMag_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        11, /* Number of members */
                        NFCKeyMag_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NFCKeyMag_St_struct*/

                if (is_initialized) {
                    return &NFCKeyMag_St_struct_g_tc;
                }

                NFCKeyMag_St_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                NFCKeyMag_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NFCKeyMag_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NFCKeyMag_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&NFCKeyMag_St_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                NFCKeyMag_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                NFCKeyMag_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NFCKeyMag_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NFCKeyMag_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NFCKeyMag_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NFCKeyMag_St_struct_g_tc_members[10]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NFCKeyMag_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NFCKeyMag_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NFCKeyMag_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::NFCKeyMag_St_struct *sample;

                static RTIXCdrMemberAccessInfo NFCKeyMag_St_struct_g_memberAccessInfos[11] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NFCKeyMag_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NFCKeyMag_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::NFCKeyMag_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NFCKeyMag_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyBindRslt_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyBindFailRsn_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyDelRslt_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyDelFailRsn_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyFrzRslt_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyFrzFailRsn_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyUnfrzAuthRslt_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyUnfrzAuthFailRsn_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyUnfrzRslt_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyUnfrzFailRsn_St() - (char *)sample);

                NFCKeyMag_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                NFCKeyMag_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                NFCKeyMag_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::NFCKeyMag_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NFCKeyMag_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NFCKeyMag_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NFCKeyMag_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NFCKeyMag_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::NFCKeyMag_St_struct >;

                NFCKeyMag_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NFCKeyMag_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NFCKeyMag_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NFCKeyMag_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::NFCKeyMag_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::NFCKeyMag_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::TargetPointStruct_Array > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode TargetPointStruct_Array_g_tc_TargetPoint_sequence;

                static DDS_TypeCode_Member TargetPointStruct_Array_g_tc_members[1]=
                {

                    {
                        (char *)"TargetPoint",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode TargetPointStruct_Array_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::TargetPointStruct_Array", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        TargetPointStruct_Array_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for TargetPointStruct_Array*/

                if (is_initialized) {
                    return &TargetPointStruct_Array_g_tc;
                }

                TargetPointStruct_Array_g_tc_TargetPoint_sequence = initialize_sequence_typecode< ::rti::core::bounded_sequence< BodyDomain::TargetPointSubstruct, 252L > >((252L));

                TargetPointStruct_Array_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                TargetPointStruct_Array_g_tc_TargetPoint_sequence._data._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::TargetPointSubstruct>::get().native();
                TargetPointStruct_Array_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& TargetPointStruct_Array_g_tc_TargetPoint_sequence;

                /* Initialize the values for member annotations. */

                TargetPointStruct_Array_g_tc._data._sampleAccessInfo = sample_access_info();
                TargetPointStruct_Array_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &TargetPointStruct_Array_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::TargetPointStruct_Array *sample;

                static RTIXCdrMemberAccessInfo TargetPointStruct_Array_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo TargetPointStruct_Array_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &TargetPointStruct_Array_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::TargetPointStruct_Array);
                if (sample == NULL) {
                    return NULL;
                }

                TargetPointStruct_Array_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TargetPoint() - (char *)sample);

                TargetPointStruct_Array_g_sampleAccessInfo.memberAccessInfos = 
                TargetPointStruct_Array_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::TargetPointStruct_Array);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        TargetPointStruct_Array_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        TargetPointStruct_Array_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                TargetPointStruct_Array_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                TargetPointStruct_Array_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::TargetPointStruct_Array >;

                TargetPointStruct_Array_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &TargetPointStruct_Array_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin TargetPointStruct_Array_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &TargetPointStruct_Array_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::TargetPointStruct_Array >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::TargetPointStruct_Array >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Key_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Key_Srv_Req_Union_g_tc_members[5]=
                {

                    {
                        (char *)"DKLst_Get",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyLst_Get",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyRename_Set",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PhysicalKeyLst_Get",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyMag_Crtl",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(4),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Key_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Key_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        5, /* Number of members */
                        Key_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Key_Srv_Req_Union*/

                if (is_initialized) {
                    return &Key_Srv_Req_Union_g_tc;
                }

                Key_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Key_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DKLst_Get_struct>::get().native();
                Key_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCKeyLst_Get_struct>::get().native();
                Key_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCKeyRename_Set_struct>::get().native();
                Key_Srv_Req_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::PhysicalKeyLst_Get_struct>::get().native();
                Key_Srv_Req_Union_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCKeyMag_Crtl_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                Key_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                Key_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                Key_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Key_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Key_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo Key_Srv_Req_Union_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Key_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Key_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Key_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                Key_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                Key_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DKLst_Get() - (char *)sample);

                sample->_d() = 1;
                Key_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyLst_Get() - (char *)sample);

                sample->_d() = 2;
                Key_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyRename_Set() - (char *)sample);

                sample->_d() = 3;
                Key_Srv_Req_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PhysicalKeyLst_Get() - (char *)sample);

                sample->_d() = 4;
                Key_Srv_Req_Union_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyMag_Crtl() - (char *)sample);

                Key_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                Key_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Key_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Key_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Key_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Key_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Key_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Key_Srv_Req_Union >;

                Key_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Key_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Key_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Key_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::Key_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Key_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::Key_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member Key_Srv_Resp_Union_g_tc_members[5]=
                {

                    {
                        (char *)"DKLst_Get_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyLst_Get_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyRename_Set_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PhysicalKeyLst_Get_SOA",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(3),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NFCKeyMag_Crtl_SOA",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(4),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Key_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::Key_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        5, /* Number of members */
                        Key_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Key_Srv_Resp_Union*/

                if (is_initialized) {
                    return &Key_Srv_Resp_Union_g_tc;
                }

                Key_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Key_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::DKLst_Rsp_array>::get().native();
                Key_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCKeyLst_Rsp_array>::get().native();
                Key_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCKeyRename_Rsp_struct>::get().native();
                Key_Srv_Resp_Union_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::PhysicalKeyLst_Rsp_array>::get().native();
                Key_Srv_Resp_Union_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< BodyDomain::NFCKeyMag_Crtl_SOA_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                Key_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                Key_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                Key_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Key_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::Key_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo Key_Srv_Resp_Union_g_memberAccessInfos[6] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Key_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Key_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::Key_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                Key_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                Key_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DKLst_Get_SOA() - (char *)sample);

                sample->_d() = 1;
                Key_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyLst_Get_SOA() - (char *)sample);

                sample->_d() = 2;
                Key_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyRename_Set_SOA() - (char *)sample);

                sample->_d() = 3;
                Key_Srv_Resp_Union_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PhysicalKeyLst_Get_SOA() - (char *)sample);

                sample->_d() = 4;
                Key_Srv_Resp_Union_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCKeyMag_Crtl_SOA() - (char *)sample);

                Key_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                Key_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::Key_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Key_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Key_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Key_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Key_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::Key_Srv_Resp_Union >;

                Key_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Key_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Key_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Key_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< BodyDomain::Key_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::Key_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< BodyDomain::KeyInfo_Notify_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member KeyInfo_Notify_struct_g_tc_members[3]=
                {

                    {
                        (char *)"NFCDetRmdrSet_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BleKeyDiscnctRmdr_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OwnerKey_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode KeyInfo_Notify_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"BodyDomain::KeyInfo_Notify_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        KeyInfo_Notify_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for KeyInfo_Notify_struct*/

                if (is_initialized) {
                    return &KeyInfo_Notify_struct_g_tc;
                }

                KeyInfo_Notify_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                KeyInfo_Notify_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                KeyInfo_Notify_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                KeyInfo_Notify_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                KeyInfo_Notify_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                KeyInfo_Notify_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                KeyInfo_Notify_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                KeyInfo_Notify_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                KeyInfo_Notify_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                KeyInfo_Notify_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                KeyInfo_Notify_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                KeyInfo_Notify_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                KeyInfo_Notify_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                KeyInfo_Notify_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                KeyInfo_Notify_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                KeyInfo_Notify_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &KeyInfo_Notify_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                BodyDomain::KeyInfo_Notify_struct *sample;

                static RTIXCdrMemberAccessInfo KeyInfo_Notify_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo KeyInfo_Notify_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &KeyInfo_Notify_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    BodyDomain::KeyInfo_Notify_struct);
                if (sample == NULL) {
                    return NULL;
                }

                KeyInfo_Notify_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NFCDetRmdrSet_Req() - (char *)sample);

                KeyInfo_Notify_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BleKeyDiscnctRmdr_Req() - (char *)sample);

                KeyInfo_Notify_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OwnerKey_St() - (char *)sample);

                KeyInfo_Notify_struct_g_sampleAccessInfo.memberAccessInfos = 
                KeyInfo_Notify_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(BodyDomain::KeyInfo_Notify_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        KeyInfo_Notify_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        KeyInfo_Notify_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                KeyInfo_Notify_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                KeyInfo_Notify_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< BodyDomain::KeyInfo_Notify_struct >;

                KeyInfo_Notify_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &KeyInfo_Notify_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin KeyInfo_Notify_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &KeyInfo_Notify_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< BodyDomain::KeyInfo_Notify_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< BodyDomain::KeyInfo_Notify_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::PowerMode_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode PowerMode_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member PowerMode_Ctrl_struct_g_tc_members[2]=
                {

                    {
                        (char *)"PowerMode_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PowerMode_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::PowerMode_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        PowerMode_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PowerMode_Ctrl_struct*/

                if (is_initialized) {
                    return &PowerMode_Ctrl_struct_g_tc;
                }

                PowerMode_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                PowerMode_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PowerMode_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PowerMode_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&PowerMode_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                PowerMode_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                PowerMode_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PowerMode_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PowerMode_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                PowerMode_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                PowerMode_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                PowerMode_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PowerMode_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::PowerMode_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo PowerMode_Ctrl_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PowerMode_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PowerMode_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::PowerMode_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                PowerMode_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerMode_Req() - (char *)sample);

                PowerMode_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                PowerMode_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                PowerMode_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::PowerMode_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PowerMode_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PowerMode_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PowerMode_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PowerMode_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::PowerMode_Ctrl_struct >;

                PowerMode_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PowerMode_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PowerMode_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PowerMode_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::PowerMode_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::PowerMode_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::PowerMode_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member PowerMode_Ctrl_SOA_struct_g_tc_members[2]=
                {

                    {
                        (char *)"PowerOn_Rsp",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PowerOff_Rsp",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PowerMode_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::PowerMode_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        PowerMode_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PowerMode_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &PowerMode_Ctrl_SOA_struct_g_tc;
                }

                PowerMode_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PowerMode_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PowerMode_Ctrl_SOA_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                PowerMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                PowerMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PowerMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PowerMode_Ctrl_SOA_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_SOA_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                PowerMode_Ctrl_SOA_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_SOA_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PowerMode_Ctrl_SOA_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_Ctrl_SOA_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PowerMode_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                PowerMode_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PowerMode_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::PowerMode_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo PowerMode_Ctrl_SOA_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::PowerMode_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                PowerMode_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerOn_Rsp() - (char *)sample);

                PowerMode_Ctrl_SOA_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerOff_Rsp() - (char *)sample);

                PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                PowerMode_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::PowerMode_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::PowerMode_Ctrl_SOA_struct >;

                PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PowerMode_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PowerMode_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PowerMode_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::PowerMode_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::PowerMode_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::PowerMode_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member PowerMode_St_struct_g_tc_members[3]=
                {

                    {
                        (char *)"PowerMode_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PowerGoOff_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PowerOffAvl_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PowerMode_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::PowerMode_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        PowerMode_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PowerMode_St_struct*/

                if (is_initialized) {
                    return &PowerMode_St_struct_g_tc;
                }

                PowerMode_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PowerMode_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PowerMode_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PowerMode_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                PowerMode_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                PowerMode_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PowerMode_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PowerMode_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                PowerMode_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PowerMode_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PowerMode_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                PowerMode_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PowerMode_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PowerMode_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PowerMode_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                PowerMode_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PowerMode_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::PowerMode_St_struct *sample;

                static RTIXCdrMemberAccessInfo PowerMode_St_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PowerMode_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PowerMode_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::PowerMode_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                PowerMode_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerMode_St() - (char *)sample);

                PowerMode_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerGoOff_St() - (char *)sample);

                PowerMode_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerOffAvl_St() - (char *)sample);

                PowerMode_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                PowerMode_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::PowerMode_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PowerMode_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PowerMode_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PowerMode_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PowerMode_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::PowerMode_St_struct >;

                PowerMode_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PowerMode_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PowerMode_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PowerMode_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::PowerMode_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::PowerMode_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::CarMode_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode CarMode_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member CarMode_Ctrl_struct_g_tc_members[2]=
                {

                    {
                        (char *)"CarMode_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CarMode_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::CarMode_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        CarMode_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CarMode_Ctrl_struct*/

                if (is_initialized) {
                    return &CarMode_Ctrl_struct_g_tc;
                }

                CarMode_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                CarMode_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CarMode_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CarMode_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&CarMode_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                CarMode_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CarMode_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CarMode_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CarMode_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CarMode_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CarMode_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CarMode_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                CarMode_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                CarMode_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CarMode_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CarMode_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::CarMode_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo CarMode_Ctrl_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CarMode_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CarMode_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::CarMode_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CarMode_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CarMode_Req() - (char *)sample);

                CarMode_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                CarMode_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                CarMode_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::CarMode_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CarMode_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CarMode_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CarMode_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CarMode_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::CarMode_Ctrl_struct >;

                CarMode_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CarMode_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CarMode_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CarMode_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::CarMode_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::CarMode_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::CarMode_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member CarMode_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"CarMode_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CarMode_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::CarMode_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        CarMode_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CarMode_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &CarMode_Ctrl_SOA_struct_g_tc;
                }

                CarMode_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CarMode_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                CarMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CarMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CarMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CarMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CarMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CarMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CarMode_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CarMode_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CarMode_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::CarMode_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo CarMode_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CarMode_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CarMode_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::CarMode_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CarMode_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CarMode_Ctrl_SOA_u8() - (char *)sample);

                CarMode_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                CarMode_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::CarMode_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CarMode_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CarMode_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CarMode_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CarMode_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::CarMode_Ctrl_SOA_struct >;

                CarMode_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CarMode_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CarMode_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CarMode_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::CarMode_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::CarMode_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::CarMode_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member CarMode_St_struct_g_tc_members[1]=
                {

                    {
                        (char *)"CarMode_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CarMode_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::CarMode_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        CarMode_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CarMode_St_struct*/

                if (is_initialized) {
                    return &CarMode_St_struct_g_tc;
                }

                CarMode_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CarMode_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                CarMode_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CarMode_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CarMode_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CarMode_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CarMode_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CarMode_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CarMode_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CarMode_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CarMode_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::CarMode_St_struct *sample;

                static RTIXCdrMemberAccessInfo CarMode_St_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CarMode_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CarMode_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::CarMode_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CarMode_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CarMode_St() - (char *)sample);

                CarMode_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                CarMode_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::CarMode_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CarMode_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CarMode_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CarMode_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CarMode_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::CarMode_St_struct >;

                CarMode_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CarMode_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CarMode_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CarMode_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::CarMode_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::CarMode_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::DrivingMode_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode DrivingMode_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member DrivingMode_Ctrl_struct_g_tc_members[11]=
                {

                    {
                        (char *)"EPSModeChange_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TargVehicleMode_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PTModeChange_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LowConsumMode_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ValetMode_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OnePedalMode_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CoastRegenStrg_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SpdLimit_Req",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TrailMode_Req",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Salemode_Req",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrivingMode_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::DrivingMode_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        11, /* Number of members */
                        DrivingMode_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrivingMode_Ctrl_struct*/

                if (is_initialized) {
                    return &DrivingMode_Ctrl_struct_g_tc;
                }

                DrivingMode_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                DrivingMode_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrivingMode_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DrivingMode_Ctrl_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DrivingMode_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                DrivingMode_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                DrivingMode_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                DrivingMode_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrivingMode_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrivingMode_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::DrivingMode_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo DrivingMode_Ctrl_struct_g_memberAccessInfos[11] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrivingMode_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrivingMode_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::DrivingMode_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrivingMode_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EPSModeChange_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TargVehicleMode_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PTModeChange_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LowConsumMode_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ValetMode_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OnePedalMode_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CoastRegenStrg_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SpdLimit_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TrailMode_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Salemode_Req() - (char *)sample);

                DrivingMode_Ctrl_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                DrivingMode_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrivingMode_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::DrivingMode_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrivingMode_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrivingMode_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrivingMode_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrivingMode_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::DrivingMode_Ctrl_struct >;

                DrivingMode_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrivingMode_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrivingMode_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrivingMode_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::DrivingMode_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::DrivingMode_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::DrivingMode_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member DrivingMode_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"DrivingMode_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DrivingMode_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::DrivingMode_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        DrivingMode_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DrivingMode_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &DrivingMode_Ctrl_SOA_struct_g_tc;
                }

                DrivingMode_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DrivingMode_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                DrivingMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DrivingMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DrivingMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DrivingMode_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DrivingMode_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DrivingMode_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DrivingMode_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::DrivingMode_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo DrivingMode_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::DrivingMode_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                DrivingMode_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrivingMode_Ctrl_SOA_u8() - (char *)sample);

                DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                DrivingMode_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::DrivingMode_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::DrivingMode_Ctrl_SOA_struct >;

                DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DrivingMode_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DrivingMode_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DrivingMode_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::DrivingMode_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::DrivingMode_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::DringMode_St_Struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member DringMode_St_Struct_g_tc_members[15]=
                {

                    {
                        (char *)"DMSEPSModeInfo_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DMSVehMode_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DMSModeChgEn_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DMSPTModeInfo_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DMSValetMode_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OnePedalMode_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OPMAvaliability_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RegenSetPct_Rsp",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RegenAvail_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RegenForDisp_UI",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrvVehModAvaliability_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TrailMode_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TrailAvaliability_St",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TrailForDisp_UI",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SaleMode_St",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode DringMode_St_Struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::DringMode_St_Struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        15, /* Number of members */
                        DringMode_St_Struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for DringMode_St_Struct*/

                if (is_initialized) {
                    return &DringMode_St_Struct_g_tc;
                }

                DringMode_St_Struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                DringMode_St_Struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                DringMode_St_Struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                DringMode_St_Struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                DringMode_St_Struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                DringMode_St_Struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                DringMode_St_Struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                DringMode_St_Struct_g_tc._data._sampleAccessInfo = sample_access_info();
                DringMode_St_Struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &DringMode_St_Struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::DringMode_St_Struct *sample;

                static RTIXCdrMemberAccessInfo DringMode_St_Struct_g_memberAccessInfos[15] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo DringMode_St_Struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &DringMode_St_Struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::DringMode_St_Struct);
                if (sample == NULL) {
                    return NULL;
                }

                DringMode_St_Struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DMSEPSModeInfo_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DMSVehMode_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DMSModeChgEn_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DMSPTModeInfo_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DMSValetMode_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OnePedalMode_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OPMAvaliability_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RegenSetPct_Rsp() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RegenAvail_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RegenForDisp_UI() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrvVehModAvaliability_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TrailMode_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TrailAvaliability_St() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TrailForDisp_UI() - (char *)sample);

                DringMode_St_Struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SaleMode_St() - (char *)sample);

                DringMode_St_Struct_g_sampleAccessInfo.memberAccessInfos = 
                DringMode_St_Struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::DringMode_St_Struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        DringMode_St_Struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        DringMode_St_Struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                DringMode_St_Struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                DringMode_St_Struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::DringMode_St_Struct >;

                DringMode_St_Struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &DringMode_St_Struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin DringMode_St_Struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &DringMode_St_Struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::DringMode_St_Struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::DringMode_St_Struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::VehicleMode_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member VehicleMode_Srv_Req_Union_g_tc_members[3]=
                {

                    {
                        (char *)"PowerMode_Ctrl",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CarMode_Ctrl",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrivingMode_Ctrl",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VehicleMode_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::VehicleMode_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        VehicleMode_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VehicleMode_Srv_Req_Union*/

                if (is_initialized) {
                    return &VehicleMode_Srv_Req_Union_g_tc;
                }

                VehicleMode_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VehicleMode_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< PTDomain::PowerMode_Ctrl_struct>::get().native();
                VehicleMode_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< PTDomain::CarMode_Ctrl_struct>::get().native();
                VehicleMode_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< PTDomain::DrivingMode_Ctrl_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                VehicleMode_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                VehicleMode_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                VehicleMode_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VehicleMode_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::VehicleMode_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo VehicleMode_Srv_Req_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VehicleMode_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VehicleMode_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::VehicleMode_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                VehicleMode_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                VehicleMode_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerMode_Ctrl() - (char *)sample);

                sample->_d() = 1;
                VehicleMode_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CarMode_Ctrl() - (char *)sample);

                sample->_d() = 2;
                VehicleMode_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrivingMode_Ctrl() - (char *)sample);

                VehicleMode_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                VehicleMode_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::VehicleMode_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VehicleMode_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VehicleMode_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VehicleMode_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VehicleMode_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::VehicleMode_Srv_Req_Union >;

                VehicleMode_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VehicleMode_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VehicleMode_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VehicleMode_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< PTDomain::VehicleMode_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::VehicleMode_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::VehicleMode_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member VehicleMode_Srv_Resp_Union_g_tc_members[3]=
                {

                    {
                        (char *)"PowerMode_Ctrl_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CarMode_Ctrl_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrivingMode_Ctrl_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode VehicleMode_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::VehicleMode_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        VehicleMode_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for VehicleMode_Srv_Resp_Union*/

                if (is_initialized) {
                    return &VehicleMode_Srv_Resp_Union_g_tc;
                }

                VehicleMode_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                VehicleMode_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< PTDomain::PowerMode_Ctrl_SOA_struct>::get().native();
                VehicleMode_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< PTDomain::CarMode_Ctrl_SOA_struct>::get().native();
                VehicleMode_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< PTDomain::DrivingMode_Ctrl_SOA_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                VehicleMode_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                VehicleMode_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                VehicleMode_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &VehicleMode_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::VehicleMode_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo VehicleMode_Srv_Resp_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo VehicleMode_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &VehicleMode_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::VehicleMode_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                VehicleMode_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                VehicleMode_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PowerMode_Ctrl_SOA() - (char *)sample);

                sample->_d() = 1;
                VehicleMode_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CarMode_Ctrl_SOA() - (char *)sample);

                sample->_d() = 2;
                VehicleMode_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrivingMode_Ctrl_SOA() - (char *)sample);

                VehicleMode_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                VehicleMode_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::VehicleMode_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        VehicleMode_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        VehicleMode_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                VehicleMode_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                VehicleMode_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::VehicleMode_Srv_Resp_Union >;

                VehicleMode_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &VehicleMode_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin VehicleMode_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &VehicleMode_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< PTDomain::VehicleMode_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::VehicleMode_Srv_Resp_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::CHS_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode CHS_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member CHS_Ctrl_struct_g_tc_members[8]=
                {

                    {
                        (char *)"HDCSw_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EHBMBrkModeSet_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CSTSw_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TCSSw_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AVHSw_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ESCSw_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ParkingSwitch_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CHS_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::CHS_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        8, /* Number of members */
                        CHS_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CHS_Ctrl_struct*/

                if (is_initialized) {
                    return &CHS_Ctrl_struct_g_tc;
                }

                CHS_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                CHS_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CHS_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_Ctrl_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&CHS_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                CHS_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                CHS_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                CHS_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CHS_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CHS_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::CHS_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo CHS_Ctrl_struct_g_memberAccessInfos[8] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CHS_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CHS_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::CHS_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CHS_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HDCSw_Req() - (char *)sample);

                CHS_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EHBMBrkModeSet_Req() - (char *)sample);

                CHS_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CSTSw_Req() - (char *)sample);

                CHS_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TCSSw_Req() - (char *)sample);

                CHS_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AVHSw_Req() - (char *)sample);

                CHS_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ESCSw_Req() - (char *)sample);

                CHS_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ParkingSwitch_Req() - (char *)sample);

                CHS_Ctrl_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                CHS_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                CHS_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::CHS_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CHS_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CHS_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CHS_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CHS_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::CHS_Ctrl_struct >;

                CHS_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CHS_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CHS_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CHS_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::CHS_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::CHS_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::CHS_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member CHS_St_struct_g_tc_members[15]=
                {

                    {
                        (char *)"HDCAvail_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HDC_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BrakeModeEnable_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BrakeMode_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BoostDegrade_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CST_Rsp",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TCSSwAvail_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PataLamp_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AVHAvail_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AVH_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ESCSwAvail_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ESClamp_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EPB_St",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BU_EPB_St",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EPBSwAvail_St",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CHS_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::CHS_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        15, /* Number of members */
                        CHS_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CHS_St_struct*/

                if (is_initialized) {
                    return &CHS_St_struct_g_tc;
                }

                CHS_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CHS_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHS_St_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                CHS_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                CHS_St_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_St_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_St_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CHS_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CHS_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::CHS_St_struct *sample;

                static RTIXCdrMemberAccessInfo CHS_St_struct_g_memberAccessInfos[15] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CHS_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CHS_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::CHS_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CHS_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HDCAvail_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HDC_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BrakeModeEnable_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BrakeMode_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BoostDegrade_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CST_Rsp() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TCSSwAvail_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PataLamp_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AVHAvail_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AVH_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ESCSwAvail_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ESClamp_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EPB_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BU_EPB_St() - (char *)sample);

                CHS_St_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EPBSwAvail_St() - (char *)sample);

                CHS_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                CHS_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::CHS_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CHS_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CHS_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CHS_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CHS_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::CHS_St_struct >;

                CHS_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CHS_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CHS_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CHS_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::CHS_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::CHS_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< PTDomain::CHS_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member CHS_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"CHS_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CHS_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"PTDomain::CHS_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        CHS_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CHS_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &CHS_Ctrl_SOA_struct_g_tc;
                }

                CHS_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CHS_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                CHS_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CHS_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHS_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHS_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHS_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CHS_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CHS_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                PTDomain::CHS_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo CHS_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CHS_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CHS_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    PTDomain::CHS_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CHS_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CHS_Ctrl_SOA_u8() - (char *)sample);

                CHS_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                CHS_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(PTDomain::CHS_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CHS_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CHS_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CHS_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CHS_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< PTDomain::CHS_Ctrl_SOA_struct >;

                CHS_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CHS_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CHS_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CHS_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< PTDomain::CHS_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< PTDomain::CHS_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< EnergyDomain::AC_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode AC_Ctrl_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member AC_Ctrl_struct_g_tc_members[34]=
                {

                    {
                        (char *)"ACCycleMode_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACAirFlowLevel_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACMode_Req",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACSwitch_Req",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FrontDeFrostFog_Req",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLeftTempSet_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRightTempSet_Req",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FTempAreaSynd_Req",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FCoolOrHeatOrVent_Req",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ACOperationMode_Cmd",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FAutoAC_Req",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AirFragranceSwitchEnable",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragranceConcentration_Req",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AirFragranceChannel1",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AirFragranceChannel2",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AirFragranceChannel3",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"IONSet_Cmd",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PM25Set_Cmd",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AQSSet_Cmd",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLeftAirOutletMode_Cmd",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRightAirOutletMode_Cmd",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLOutletSwitch_Cmd",/* Member name */
                        {
                            21,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LCOutletSwitch_Cmd",/* Member name */
                        {
                            22,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RCOutletSwitch_Cmd",/* Member name */
                        {
                            23,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FROutletSwitch_Cmd",/* Member name */
                        {
                            24,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLOutletLeftRightAngle",/* Member name */
                        {
                            25,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLOutletUpDownAngle",/* Member name */
                        {
                            26,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LCOutletUpDownAngle",/* Member name */
                        {
                            27,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LCOutletLeftRightAngle",/* Member name */
                        {
                            28,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RCOutletUpDownAngle",/* Member name */
                        {
                            29,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RCOutletLeftRightAngle",/* Member name */
                        {
                            30,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FROutletUpDownAngle",/* Member name */
                        {
                            31,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FROutletLeftRightAngle",/* Member name */
                        {
                            32,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            33,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AC_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"EnergyDomain::AC_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        34, /* Number of members */
                        AC_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AC_Ctrl_struct*/

                if (is_initialized) {
                    return &AC_Ctrl_struct_g_tc;
                }

                AC_Ctrl_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                AC_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AC_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[26]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[27]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[28]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[29]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[30]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[31]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[32]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_Ctrl_struct_g_tc_members[33]._representation._typeCode = (RTICdrTypeCode *)&AC_Ctrl_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                AC_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[20]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[20]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[20]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[20]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[20]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[20]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[21]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[21]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[21]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[21]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[21]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[21]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[22]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[22]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[22]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[22]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[22]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[22]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[23]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[23]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[23]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[23]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[23]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[23]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[24]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[24]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[24]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[24]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[24]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[24]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[25]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[25]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[25]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[25]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[25]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[25]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[26]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[26]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[26]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[26]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[26]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[26]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[27]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[27]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[27]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[27]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[27]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[27]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[28]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[28]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[28]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[28]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[28]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[28]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[29]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[29]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[29]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[29]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[29]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[29]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[30]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[30]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[30]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[30]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[30]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[30]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[31]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[31]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[31]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[31]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[31]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[31]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[32]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[32]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_struct_g_tc_members[32]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[32]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_struct_g_tc_members[32]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_struct_g_tc_members[32]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_struct_g_tc_members[33]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                AC_Ctrl_struct_g_tc_members[33]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                AC_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                AC_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AC_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                EnergyDomain::AC_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo AC_Ctrl_struct_g_memberAccessInfos[34] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AC_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AC_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    EnergyDomain::AC_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                AC_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ACCycleMode_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACAirFlowLevel_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACMode_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACSwitch_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FrontDeFrostFog_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLeftTempSet_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRightTempSet_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FTempAreaSynd_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FCoolOrHeatOrVent_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ACOperationMode_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FAutoAC_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AirFragranceSwitchEnable() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragranceConcentration_Req() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AirFragranceChannel1() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AirFragranceChannel2() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AirFragranceChannel3() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->IONSet_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PM25Set_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AQSSet_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLeftAirOutletMode_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRightAirOutletMode_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[21].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLOutletSwitch_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[22].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LCOutletSwitch_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[23].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RCOutletSwitch_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[24].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FROutletSwitch_Cmd() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[25].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLOutletLeftRightAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[26].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLOutletUpDownAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[27].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LCOutletUpDownAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[28].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LCOutletLeftRightAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[29].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RCOutletUpDownAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[30].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RCOutletLeftRightAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[31].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FROutletUpDownAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[32].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FROutletLeftRightAngle() - (char *)sample);

                AC_Ctrl_struct_g_memberAccessInfos[33].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                AC_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                AC_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(EnergyDomain::AC_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AC_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AC_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AC_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AC_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< EnergyDomain::AC_Ctrl_struct >;

                AC_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AC_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AC_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AC_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< EnergyDomain::AC_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< EnergyDomain::AC_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< EnergyDomain::AC_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member AC_St_struct_g_tc_members[52]=
                {

                    {
                        (char *)"ACCycleMode_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACAirFlowLevel_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACMode_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACSwitch_Rsp",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FDeiceDefrost_Rsp",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLeftTempSet_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRightTempSet_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FTempAreaSync_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FAcCoolOrHeatOrVent_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ACOperateMode_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACAuto_Rsp",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACAirFlowLevelAuto_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACAirFlowModeAuto_St",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACCoolOrHeatOrVentAuto_St",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EnvirTemp_Val",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragSwitchEN_Rsp",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragConcLevel_Rsp",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannel1Switch_St",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannel2Switch_St",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannel3Switch_St",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannelType",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannelIndex",/* Member name */
                        {
                            21,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannel1Life",/* Member name */
                        {
                            22,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannel2Life",/* Member name */
                        {
                            23,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FragChannel3Life",/* Member name */
                        {
                            24,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"IONSet_St",/* Member name */
                        {
                            25,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PM25Set_St",/* Member name */
                        {
                            26,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PM25Trigger_St",/* Member name */
                        {
                            27,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PM25CarConc",/* Member name */
                        {
                            28,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AQSSet_St",/* Member name */
                        {
                            29,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AQSTrigger_St",/* Member name */
                        {
                            30,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AQSAirQuality_Val",/* Member name */
                        {
                            31,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InFilterLifeRemind",/* Member name */
                        {
                            32,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OutsideFilterLifeRemind",/* Member name */
                        {
                            33,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLeftAirOutletMode_St",/* Member name */
                        {
                            34,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FRightAirOutletMode_St",/* Member name */
                        {
                            35,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFLAirOutletSwitch_Rsp",/* Member name */
                        {
                            36,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMLCAirOutletSwitch_Rsp",/* Member name */
                        {
                            37,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMRCAirOutletSwitch_Rsp",/* Member name */
                        {
                            38,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFRAirOutletSwitch_Rsp",/* Member name */
                        {
                            39,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFLMotorErrSt",/* Member name */
                        {
                            40,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMLCMotorErrSt",/* Member name */
                        {
                            41,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMRCMotorErrSt",/* Member name */
                        {
                            42,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFRMotorErrSt",/* Member name */
                        {
                            43,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFLAirOutletLeftRightAngle_Rsp",/* Member name */
                        {
                            44,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFLAirOutletUpDownAngle_Rsp",/* Member name */
                        {
                            45,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMLCAirOutletUpDownAngle_Rsp",/* Member name */
                        {
                            46,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMLCAirOutletLeftRightAngle_Rsp",/* Member name */
                        {
                            47,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMRCAirOutletLeftRightAngle_Rsp",/* Member name */
                        {
                            48,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMRCAirOutletUpDownAngle_Rsp",/* Member name */
                        {
                            49,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFRAirOutletUpDownAngle_Rsp",/* Member name */
                        {
                            50,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OLMFRAirOutletLeftRightAngle_Rsp",/* Member name */
                        {
                            51,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AC_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"EnergyDomain::AC_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        52, /* Number of members */
                        AC_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AC_St_struct*/

                if (is_initialized) {
                    return &AC_St_struct_g_tc;
                }

                AC_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AC_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AC_St_struct_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AC_St_struct_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AC_St_struct_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[26]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[27]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[28]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                AC_St_struct_g_tc_members[29]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[30]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[31]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[32]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[33]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[34]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[35]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[36]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[37]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[38]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[39]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[40]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[41]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[42]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[43]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[44]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[45]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[46]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[47]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[48]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[49]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[50]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                AC_St_struct_g_tc_members[51]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                AC_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[20]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[20]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[20]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[20]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[20]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[20]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[21]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[21]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[21]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[21]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[21]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[21]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[22]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[22]._annotations._defaultValue._u.ushort_value = 0;
                AC_St_struct_g_tc_members[22]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[22]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AC_St_struct_g_tc_members[22]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[22]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AC_St_struct_g_tc_members[23]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[23]._annotations._defaultValue._u.ushort_value = 0;
                AC_St_struct_g_tc_members[23]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[23]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AC_St_struct_g_tc_members[23]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[23]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AC_St_struct_g_tc_members[24]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[24]._annotations._defaultValue._u.ushort_value = 0;
                AC_St_struct_g_tc_members[24]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[24]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AC_St_struct_g_tc_members[24]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[24]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AC_St_struct_g_tc_members[25]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[25]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[25]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[25]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[25]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[25]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[26]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[26]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[26]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[26]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[26]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[26]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[27]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[27]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[27]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[27]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[27]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[27]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[28]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[28]._annotations._defaultValue._u.ushort_value = 0;
                AC_St_struct_g_tc_members[28]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[28]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                AC_St_struct_g_tc_members[28]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                AC_St_struct_g_tc_members[28]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                AC_St_struct_g_tc_members[29]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[29]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[29]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[29]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[29]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[29]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[30]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[30]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[30]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[30]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[30]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[30]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[31]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[31]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[31]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[31]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[31]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[31]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[32]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[32]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[32]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[32]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[32]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[32]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[33]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[33]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[33]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[33]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[33]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[33]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[34]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[34]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[34]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[34]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[34]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[34]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[35]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[35]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[35]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[35]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[35]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[35]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[36]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[36]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[36]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[36]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[36]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[36]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[37]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[37]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[37]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[37]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[37]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[37]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[38]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[38]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[38]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[38]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[38]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[38]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[39]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[39]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[39]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[39]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[39]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[39]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[40]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[40]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[40]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[40]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[40]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[40]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[41]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[41]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[41]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[41]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[41]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[41]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[42]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[42]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[42]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[42]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[42]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[42]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[43]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[43]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[43]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[43]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[43]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[43]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[44]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[44]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[44]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[44]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[44]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[44]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[45]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[45]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[45]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[45]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[45]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[45]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[46]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[46]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[46]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[46]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[46]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[46]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[47]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[47]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[47]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[47]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[47]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[47]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[48]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[48]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[48]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[48]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[48]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[48]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[49]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[49]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[49]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[49]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[49]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[49]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[50]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[50]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[50]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[50]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[50]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[50]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc_members[51]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[51]._annotations._defaultValue._u.octet_value = 0;
                AC_St_struct_g_tc_members[51]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[51]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_St_struct_g_tc_members[51]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_St_struct_g_tc_members[51]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                AC_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AC_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                EnergyDomain::AC_St_struct *sample;

                static RTIXCdrMemberAccessInfo AC_St_struct_g_memberAccessInfos[52] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AC_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AC_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    EnergyDomain::AC_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                AC_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ACCycleMode_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACAirFlowLevel_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACMode_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACSwitch_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FDeiceDefrost_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLeftTempSet_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRightTempSet_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FTempAreaSync_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FAcCoolOrHeatOrVent_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ACOperateMode_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACAuto_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACAirFlowLevelAuto_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACAirFlowModeAuto_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACCoolOrHeatOrVentAuto_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EnvirTemp_Val() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragSwitchEN_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragConcLevel_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannel1Switch_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannel2Switch_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannel3Switch_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannelType() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[21].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannelIndex() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[22].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannel1Life() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[23].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannel2Life() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[24].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FragChannel3Life() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[25].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->IONSet_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[26].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PM25Set_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[27].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PM25Trigger_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[28].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PM25CarConc() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[29].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AQSSet_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[30].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AQSTrigger_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[31].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AQSAirQuality_Val() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[32].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InFilterLifeRemind() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[33].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OutsideFilterLifeRemind() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[34].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLeftAirOutletMode_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[35].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FRightAirOutletMode_St() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[36].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFLAirOutletSwitch_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[37].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMLCAirOutletSwitch_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[38].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMRCAirOutletSwitch_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[39].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFRAirOutletSwitch_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[40].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFLMotorErrSt() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[41].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMLCMotorErrSt() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[42].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMRCMotorErrSt() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[43].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFRMotorErrSt() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[44].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFLAirOutletLeftRightAngle_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[45].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFLAirOutletUpDownAngle_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[46].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMLCAirOutletUpDownAngle_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[47].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMLCAirOutletLeftRightAngle_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[48].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMRCAirOutletLeftRightAngle_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[49].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMRCAirOutletUpDownAngle_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[50].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFRAirOutletUpDownAngle_Rsp() - (char *)sample);

                AC_St_struct_g_memberAccessInfos[51].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OLMFRAirOutletLeftRightAngle_Rsp() - (char *)sample);

                AC_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                AC_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(EnergyDomain::AC_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AC_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AC_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AC_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AC_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< EnergyDomain::AC_St_struct >;

                AC_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AC_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AC_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AC_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< EnergyDomain::AC_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< EnergyDomain::AC_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< EnergyDomain::Thermal_St_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode Thermal_St_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member Thermal_St_struct_g_tc_members[5]=
                {

                    {
                        (char *)"HeatLiquidtLackWarn_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ThermalLiquidLackWarn_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RefrigerantCheckRemind",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FACLimit_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode Thermal_St_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"EnergyDomain::Thermal_St_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        5, /* Number of members */
                        Thermal_St_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for Thermal_St_struct*/

                if (is_initialized) {
                    return &Thermal_St_struct_g_tc;
                }

                Thermal_St_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                Thermal_St_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                Thermal_St_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Thermal_St_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Thermal_St_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Thermal_St_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                Thermal_St_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&Thermal_St_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                Thermal_St_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                Thermal_St_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Thermal_St_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Thermal_St_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                Thermal_St_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Thermal_St_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Thermal_St_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                Thermal_St_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Thermal_St_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Thermal_St_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                Thermal_St_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                Thermal_St_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                Thermal_St_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                Thermal_St_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                Thermal_St_struct_g_tc_members[4]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                Thermal_St_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                Thermal_St_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &Thermal_St_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                EnergyDomain::Thermal_St_struct *sample;

                static RTIXCdrMemberAccessInfo Thermal_St_struct_g_memberAccessInfos[5] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo Thermal_St_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &Thermal_St_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    EnergyDomain::Thermal_St_struct);
                if (sample == NULL) {
                    return NULL;
                }

                Thermal_St_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HeatLiquidtLackWarn_St() - (char *)sample);

                Thermal_St_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ThermalLiquidLackWarn_St() - (char *)sample);

                Thermal_St_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RefrigerantCheckRemind() - (char *)sample);

                Thermal_St_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FACLimit_St() - (char *)sample);

                Thermal_St_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                Thermal_St_struct_g_sampleAccessInfo.memberAccessInfos = 
                Thermal_St_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(EnergyDomain::Thermal_St_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        Thermal_St_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        Thermal_St_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                Thermal_St_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                Thermal_St_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< EnergyDomain::Thermal_St_struct >;

                Thermal_St_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &Thermal_St_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin Thermal_St_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &Thermal_St_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< EnergyDomain::Thermal_St_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< EnergyDomain::Thermal_St_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< EnergyDomain::AC_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member AC_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"AC_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode AC_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"EnergyDomain::AC_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        AC_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for AC_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &AC_Ctrl_SOA_struct_g_tc;
                }

                AC_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                AC_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                AC_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                AC_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                AC_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                AC_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                AC_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                AC_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &AC_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                EnergyDomain::AC_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo AC_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo AC_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &AC_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    EnergyDomain::AC_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                AC_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AC_Ctrl_SOA_u8() - (char *)sample);

                AC_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                AC_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(EnergyDomain::AC_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        AC_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        AC_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                AC_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                AC_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< EnergyDomain::AC_Ctrl_SOA_struct >;

                AC_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &AC_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin AC_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &AC_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< EnergyDomain::AC_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< EnergyDomain::AC_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< Temporary::GeneralVehSt_Struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member GeneralVehSt_Struct_g_tc_members[12]=
                {

                    {
                        (char *)"SOCDisplay_Val",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DCCharge_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ACCharge_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FLSeatOcp_St",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ActlGear_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ActlGearVaild_St",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Ready_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrvrSeatBeltValid_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DrvrSeatBelt_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VehSpdValid_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"VehSpd_Val",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EPB_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode GeneralVehSt_Struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"Temporary::GeneralVehSt_Struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        12, /* Number of members */
                        GeneralVehSt_Struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for GeneralVehSt_Struct*/

                if (is_initialized) {
                    return &GeneralVehSt_Struct_g_tc;
                }

                GeneralVehSt_Struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                GeneralVehSt_Struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                GeneralVehSt_Struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                GeneralVehSt_Struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                GeneralVehSt_Struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                GeneralVehSt_Struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                GeneralVehSt_Struct_g_tc_members[0]._annotations._defaultValue._u.ushort_value = 0;
                GeneralVehSt_Struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                GeneralVehSt_Struct_g_tc_members[0]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                GeneralVehSt_Struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                GeneralVehSt_Struct_g_tc_members[0]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                GeneralVehSt_Struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                GeneralVehSt_Struct_g_tc_members[10]._annotations._defaultValue._u.ushort_value = 0;
                GeneralVehSt_Struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                GeneralVehSt_Struct_g_tc_members[10]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                GeneralVehSt_Struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                GeneralVehSt_Struct_g_tc_members[10]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                GeneralVehSt_Struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                GeneralVehSt_Struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                GeneralVehSt_Struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                GeneralVehSt_Struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                GeneralVehSt_Struct_g_tc._data._sampleAccessInfo = sample_access_info();
                GeneralVehSt_Struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &GeneralVehSt_Struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                Temporary::GeneralVehSt_Struct *sample;

                static RTIXCdrMemberAccessInfo GeneralVehSt_Struct_g_memberAccessInfos[12] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo GeneralVehSt_Struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &GeneralVehSt_Struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    Temporary::GeneralVehSt_Struct);
                if (sample == NULL) {
                    return NULL;
                }

                GeneralVehSt_Struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SOCDisplay_Val() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DCCharge_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ACCharge_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FLSeatOcp_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ActlGear_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ActlGearVaild_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Ready_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrvrSeatBeltValid_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DrvrSeatBelt_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VehSpdValid_St() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->VehSpd_Val() - (char *)sample);

                GeneralVehSt_Struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EPB_St() - (char *)sample);

                GeneralVehSt_Struct_g_sampleAccessInfo.memberAccessInfos = 
                GeneralVehSt_Struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(Temporary::GeneralVehSt_Struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        GeneralVehSt_Struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        GeneralVehSt_Struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                GeneralVehSt_Struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                GeneralVehSt_Struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< Temporary::GeneralVehSt_Struct >;

                GeneralVehSt_Struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &GeneralVehSt_Struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin GeneralVehSt_Struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &GeneralVehSt_Struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< Temporary::GeneralVehSt_Struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< Temporary::GeneralVehSt_Struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< Temporary::PTHMI_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member PTHMI_struct_g_tc_members[26]=
                {

                    {
                        (char *)"OBCACChrgCnctor_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OBCACSocketLock_St",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"AbnormalShiftInfo",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DriveConflictRemindInfo",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Shift_Err",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"HVOffConfirm_Req",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LimpHomeRmnd_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LowVoltSys_Err",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"LowVoltSysWarnStop_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"Motorovertemp_St",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PTFaultLgtClr_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PTHMI_Req",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PTThmlLiquidLackWarn_St",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"PullOver_St",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"RegenAvail_St",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ServiceReminder_St",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"StdSenarioMileage_Val",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ThmlRunawayWarn_St",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TractionModeAvail_St",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TractionModeRemaind_St",/* Member name */
                        {
                            19,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"TractionModeSet_Rsp",/* Member name */
                        {
                            20,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ACCharge_St",/* Member name */
                        {
                            21,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CellOverTemp_St",/* Member name */
                        {
                            22,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ChrgDischrgCnct_St",/* Member name */
                        {
                            23,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"DCCharge_St",/* Member name */
                        {
                            24,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FastChrgCnctor_St",/* Member name */
                        {
                            25,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode PTHMI_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"Temporary::PTHMI_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        26, /* Number of members */
                        PTHMI_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for PTHMI_struct*/

                if (is_initialized) {
                    return &PTHMI_struct_g_tc;
                }

                PTHMI_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                PTHMI_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ulong;
                PTHMI_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                PTHMI_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[19]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[20]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[21]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[22]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[23]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[24]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                PTHMI_struct_g_tc_members[25]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                PTHMI_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[9]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[9]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[9]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_ULONG;
                PTHMI_struct_g_tc_members[11]._annotations._defaultValue._u.ulong_value = 0u;
                PTHMI_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_ULONG;
                PTHMI_struct_g_tc_members[11]._annotations._minValue._u.ulong_value = RTIXCdrUnsignedLong_MIN;
                PTHMI_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_ULONG;
                PTHMI_struct_g_tc_members[11]._annotations._maxValue._u.ulong_value = RTIXCdrUnsignedLong_MAX;

                PTHMI_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                PTHMI_struct_g_tc_members[16]._annotations._defaultValue._u.ushort_value = 0;
                PTHMI_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                PTHMI_struct_g_tc_members[16]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                PTHMI_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                PTHMI_struct_g_tc_members[16]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                PTHMI_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[19]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[19]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[19]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[19]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[19]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[19]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[20]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[20]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[20]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[20]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[20]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[20]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[21]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[21]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[21]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[21]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[21]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[21]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[22]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[22]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[22]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[22]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[22]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[22]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[23]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[23]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[23]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[23]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[23]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[23]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[24]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[24]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[24]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[24]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[24]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[24]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc_members[25]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[25]._annotations._defaultValue._u.octet_value = 0;
                PTHMI_struct_g_tc_members[25]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[25]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                PTHMI_struct_g_tc_members[25]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                PTHMI_struct_g_tc_members[25]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                PTHMI_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                PTHMI_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &PTHMI_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                Temporary::PTHMI_struct *sample;

                static RTIXCdrMemberAccessInfo PTHMI_struct_g_memberAccessInfos[26] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo PTHMI_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &PTHMI_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    Temporary::PTHMI_struct);
                if (sample == NULL) {
                    return NULL;
                }

                PTHMI_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OBCACChrgCnctor_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OBCACSocketLock_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AbnormalShiftInfo() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DriveConflictRemindInfo() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Shift_Err() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->HVOffConfirm_Req() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LimpHomeRmnd_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LowVoltSys_Err() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->LowVoltSysWarnStop_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Motorovertemp_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PTFaultLgtClr_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PTHMI_Req() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PTThmlLiquidLackWarn_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->PullOver_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->RegenAvail_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ServiceReminder_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->StdSenarioMileage_Val() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ThmlRunawayWarn_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TractionModeAvail_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[19].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TractionModeRemaind_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[20].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->TractionModeSet_Rsp() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[21].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ACCharge_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[22].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CellOverTemp_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[23].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ChrgDischrgCnct_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[24].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->DCCharge_St() - (char *)sample);

                PTHMI_struct_g_memberAccessInfos[25].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FastChrgCnctor_St() - (char *)sample);

                PTHMI_struct_g_sampleAccessInfo.memberAccessInfos = 
                PTHMI_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(Temporary::PTHMI_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        PTHMI_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        PTHMI_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                PTHMI_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                PTHMI_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< Temporary::PTHMI_struct >;

                PTHMI_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &PTHMI_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin PTHMI_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &PTHMI_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< Temporary::PTHMI_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< Temporary::PTHMI_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< Temporary::CHSHMI_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member CHSHMI_struct_g_tc_members[19]=
                {

                    {
                        (char *)"AirbagWarnLamp_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EPSSystem_Err",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ABSIntv_St",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ABS_Err",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EBDIntv_St",/* Member name */
                        {
                            4,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EBD_Err",/* Member name */
                        {
                            5,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BrakeFluidLvl_St",/* Member name */
                        {
                            6,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BrakePedal_St",/* Member name */
                        {
                            7,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InputRodStroke_St",/* Member name */
                        {
                            8,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"InputRodStroke_Val",/* Member name */
                        {
                            9,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EPBFunctionLamp_St",/* Member name */
                        {
                            10,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"EPBFailLamp_St",/* Member name */
                        {
                            11,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CapacityLimitWarn_UI",/* Member name */
                        {
                            12,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"OperationReminder_UI",/* Member name */
                        {
                            13,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BU_CapacityLimitWarn_UI",/* Member name */
                        {
                            14,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BU_OperationReminder_UI",/* Member name */
                        {
                            15,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BU_EPBFunctionLamp_St",/* Member name */
                        {
                            16,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BU_EPBFailLamp_St",/* Member name */
                        {
                            17,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"BU_EPBHardSwitch_St",/* Member name */
                        {
                            18,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode CHSHMI_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"Temporary::CHSHMI_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        19, /* Number of members */
                        CHSHMI_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for CHSHMI_struct*/

                if (is_initialized) {
                    return &CHSHMI_struct_g_tc;
                }

                CHSHMI_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                CHSHMI_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[3]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[4]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[5]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[6]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[7]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[8]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[9]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                CHSHMI_struct_g_tc_members[10]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[11]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[12]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[13]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[14]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[15]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[16]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[17]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                CHSHMI_struct_g_tc_members[18]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                CHSHMI_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[2]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[2]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[2]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[2]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[2]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[3]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[3]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[3]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[3]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[3]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[3]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[4]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[4]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[4]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[4]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[4]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[4]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[5]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[5]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[5]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[5]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[5]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[5]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[6]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[6]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[6]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[6]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[6]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[6]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[7]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[7]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[7]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[7]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[7]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[7]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[8]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[8]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[8]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[8]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[8]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[8]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[9]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                CHSHMI_struct_g_tc_members[9]._annotations._defaultValue._u.ushort_value = 0;
                CHSHMI_struct_g_tc_members[9]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                CHSHMI_struct_g_tc_members[9]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                CHSHMI_struct_g_tc_members[9]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                CHSHMI_struct_g_tc_members[9]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                CHSHMI_struct_g_tc_members[10]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[10]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[10]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[10]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[10]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[10]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[11]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[11]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[11]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[11]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[11]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[11]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[12]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[12]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[12]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[12]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[12]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[12]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[13]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[13]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[13]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[13]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[13]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[13]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[14]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[14]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[14]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[14]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[14]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[14]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[15]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[15]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[15]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[15]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[15]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[15]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[16]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[16]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[16]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[16]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[16]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[16]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[17]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[17]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[17]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[17]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[17]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[17]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc_members[18]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[18]._annotations._defaultValue._u.octet_value = 0;
                CHSHMI_struct_g_tc_members[18]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[18]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                CHSHMI_struct_g_tc_members[18]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                CHSHMI_struct_g_tc_members[18]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                CHSHMI_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                CHSHMI_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &CHSHMI_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                Temporary::CHSHMI_struct *sample;

                static RTIXCdrMemberAccessInfo CHSHMI_struct_g_memberAccessInfos[19] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo CHSHMI_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &CHSHMI_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    Temporary::CHSHMI_struct);
                if (sample == NULL) {
                    return NULL;
                }

                CHSHMI_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->AirbagWarnLamp_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EPSSystem_Err() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ABSIntv_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ABS_Err() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[4].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EBDIntv_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[5].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EBD_Err() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[6].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BrakeFluidLvl_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[7].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BrakePedal_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[8].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InputRodStroke_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[9].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->InputRodStroke_Val() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[10].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EPBFunctionLamp_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[11].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->EPBFailLamp_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[12].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CapacityLimitWarn_UI() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[13].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->OperationReminder_UI() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[14].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BU_CapacityLimitWarn_UI() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[15].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BU_OperationReminder_UI() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[16].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BU_EPBFunctionLamp_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[17].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BU_EPBFailLamp_St() - (char *)sample);

                CHSHMI_struct_g_memberAccessInfos[18].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->BU_EPBHardSwitch_St() - (char *)sample);

                CHSHMI_struct_g_sampleAccessInfo.memberAccessInfos = 
                CHSHMI_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(Temporary::CHSHMI_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        CHSHMI_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        CHSHMI_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                CHSHMI_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                CHSHMI_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< Temporary::CHSHMI_struct >;

                CHSHMI_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &CHSHMI_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin CHSHMI_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &CHSHMI_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< Temporary::CHSHMI_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< Temporary::CHSHMI_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< Temporary::WiperWash_Ctrl_Struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode WiperWash_Ctrl_Struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member WiperWash_Ctrl_Struct_g_tc_members[3]=
                {

                    {
                        (char *)"Fwiper_Req",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"FMistWash_Req",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode WiperWash_Ctrl_Struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"Temporary::WiperWash_Ctrl_Struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        WiperWash_Ctrl_Struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for WiperWash_Ctrl_Struct*/

                if (is_initialized) {
                    return &WiperWash_Ctrl_Struct_g_tc;
                }

                WiperWash_Ctrl_Struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                WiperWash_Ctrl_Struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                WiperWash_Ctrl_Struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                WiperWash_Ctrl_Struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                WiperWash_Ctrl_Struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&WiperWash_Ctrl_Struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                WiperWash_Ctrl_Struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WiperWash_Ctrl_Struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                WiperWash_Ctrl_Struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WiperWash_Ctrl_Struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WiperWash_Ctrl_Struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WiperWash_Ctrl_Struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WiperWash_Ctrl_Struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                WiperWash_Ctrl_Struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                WiperWash_Ctrl_Struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                WiperWash_Ctrl_Struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                WiperWash_Ctrl_Struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                WiperWash_Ctrl_Struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                WiperWash_Ctrl_Struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                WiperWash_Ctrl_Struct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                WiperWash_Ctrl_Struct_g_tc._data._sampleAccessInfo = sample_access_info();
                WiperWash_Ctrl_Struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &WiperWash_Ctrl_Struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                Temporary::WiperWash_Ctrl_Struct *sample;

                static RTIXCdrMemberAccessInfo WiperWash_Ctrl_Struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo WiperWash_Ctrl_Struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &WiperWash_Ctrl_Struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    Temporary::WiperWash_Ctrl_Struct);
                if (sample == NULL) {
                    return NULL;
                }

                WiperWash_Ctrl_Struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->Fwiper_Req() - (char *)sample);

                WiperWash_Ctrl_Struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->FMistWash_Req() - (char *)sample);

                WiperWash_Ctrl_Struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                WiperWash_Ctrl_Struct_g_sampleAccessInfo.memberAccessInfos = 
                WiperWash_Ctrl_Struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(Temporary::WiperWash_Ctrl_Struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        WiperWash_Ctrl_Struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        WiperWash_Ctrl_Struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                WiperWash_Ctrl_Struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                WiperWash_Ctrl_Struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< Temporary::WiperWash_Ctrl_Struct >;

                WiperWash_Ctrl_Struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &WiperWash_Ctrl_Struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin WiperWash_Ctrl_Struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &WiperWash_Ctrl_Struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< Temporary::WiperWash_Ctrl_Struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< Temporary::WiperWash_Ctrl_Struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< Temporary::SN_info_string > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode SN_info_string_g_tc_SN_info_String_string;

                static DDS_TypeCode_Member SN_info_string_g_tc_members[1]=
                {

                    {
                        (char *)"SN_info_String",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode SN_info_string_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"Temporary::SN_info_string", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        SN_info_string_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for SN_info_string*/

                if (is_initialized) {
                    return &SN_info_string_g_tc;
                }

                SN_info_string_g_tc_SN_info_String_string = initialize_string_typecode((18L));

                SN_info_string_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                SN_info_string_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&SN_info_string_g_tc_SN_info_String_string;

                /* Initialize the values for member annotations. */
                SN_info_string_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                SN_info_string_g_tc_members[0]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                SN_info_string_g_tc._data._sampleAccessInfo = sample_access_info();
                SN_info_string_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &SN_info_string_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                Temporary::SN_info_string *sample;

                static RTIXCdrMemberAccessInfo SN_info_string_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo SN_info_string_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &SN_info_string_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    Temporary::SN_info_string);
                if (sample == NULL) {
                    return NULL;
                }

                SN_info_string_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SN_info_String() - (char *)sample);

                SN_info_string_g_sampleAccessInfo.memberAccessInfos = 
                SN_info_string_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(Temporary::SN_info_string);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        SN_info_string_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        SN_info_string_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                SN_info_string_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                SN_info_string_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< Temporary::SN_info_string >;

                SN_info_string_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &SN_info_string_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin SN_info_string_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &SN_info_string_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< Temporary::SN_info_string >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< Temporary::SN_info_string >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NMService_Set_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NMService_Set_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member NMService_Set_struct_g_tc_members[3]=
                {

                    {
                        (char *)"SceneID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SceneStateReq",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NMService_Set_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NMService_Set_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        NMService_Set_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NMService_Set_struct*/

                if (is_initialized) {
                    return &NMService_Set_struct_g_tc;
                }

                NMService_Set_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                NMService_Set_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NMService_Set_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                NMService_Set_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NMService_Set_struct_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&NMService_Set_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                NMService_Set_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                NMService_Set_struct_g_tc_members[0]._annotations._defaultValue._u.ushort_value = 0;
                NMService_Set_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                NMService_Set_struct_g_tc_members[0]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                NMService_Set_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                NMService_Set_struct_g_tc_members[0]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                NMService_Set_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NMService_Set_struct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                NMService_Set_struct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NMService_Set_struct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NMService_Set_struct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NMService_Set_struct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NMService_Set_struct_g_tc_members[2]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NMService_Set_struct_g_tc_members[2]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NMService_Set_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NMService_Set_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NMService_Set_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NMService_Set_struct *sample;

                static RTIXCdrMemberAccessInfo NMService_Set_struct_g_memberAccessInfos[3] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NMService_Set_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NMService_Set_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NMService_Set_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NMService_Set_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SceneID() - (char *)sample);

                NMService_Set_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SceneStateReq() - (char *)sample);

                NMService_Set_struct_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                NMService_Set_struct_g_sampleAccessInfo.memberAccessInfos = 
                NMService_Set_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NMService_Set_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NMService_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NMService_Set_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NMService_Set_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NMService_Set_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NMService_Set_struct >;

                NMService_Set_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NMService_Set_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NMService_Set_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NMService_Set_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NMService_Set_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NMService_Set_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NMService_Set_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member NMService_Set_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"NMService_Set_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NMService_Set_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NMService_Set_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NMService_Set_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NMService_Set_SOA_struct*/

                if (is_initialized) {
                    return &NMService_Set_SOA_struct_g_tc;
                }

                NMService_Set_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NMService_Set_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                NMService_Set_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NMService_Set_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NMService_Set_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NMService_Set_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NMService_Set_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NMService_Set_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NMService_Set_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NMService_Set_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NMService_Set_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NMService_Set_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo NMService_Set_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NMService_Set_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NMService_Set_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NMService_Set_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NMService_Set_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NMService_Set_SOA_u8() - (char *)sample);

                NMService_Set_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                NMService_Set_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NMService_Set_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NMService_Set_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NMService_Set_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NMService_Set_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NMService_Set_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NMService_Set_SOA_struct >;

                NMService_Set_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NMService_Set_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NMService_Set_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NMService_Set_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NMService_Set_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NMService_Set_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NmXService_Ctrl_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NmXService_Ctrl_struct_g_tc_ECUName_string;

                static DDS_TypeCode_Member NmXService_Ctrl_struct_g_tc_members[2]=
                {

                    {
                        (char *)"NMStateReq",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"ECUName",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NmXService_Ctrl_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NmXService_Ctrl_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        NmXService_Ctrl_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NmXService_Ctrl_struct*/

                if (is_initialized) {
                    return &NmXService_Ctrl_struct_g_tc;
                }

                NmXService_Ctrl_struct_g_tc_ECUName_string = initialize_string_typecode((10L));

                NmXService_Ctrl_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NmXService_Ctrl_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NmXService_Ctrl_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&NmXService_Ctrl_struct_g_tc_ECUName_string;

                /* Initialize the values for member annotations. */
                NmXService_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NmXService_Ctrl_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NmXService_Ctrl_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NmXService_Ctrl_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NmXService_Ctrl_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NmXService_Ctrl_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NmXService_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NmXService_Ctrl_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NmXService_Ctrl_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NmXService_Ctrl_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NmXService_Ctrl_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NmXService_Ctrl_struct *sample;

                static RTIXCdrMemberAccessInfo NmXService_Ctrl_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NmXService_Ctrl_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NmXService_Ctrl_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NmXService_Ctrl_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NmXService_Ctrl_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NMStateReq() - (char *)sample);

                NmXService_Ctrl_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->ECUName() - (char *)sample);

                NmXService_Ctrl_struct_g_sampleAccessInfo.memberAccessInfos = 
                NmXService_Ctrl_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NmXService_Ctrl_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NmXService_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NmXService_Ctrl_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NmXService_Ctrl_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NmXService_Ctrl_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NmXService_Ctrl_struct >;

                NmXService_Ctrl_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NmXService_Ctrl_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NmXService_Ctrl_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NmXService_Ctrl_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NmXService_Ctrl_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NmXService_Ctrl_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NmXService_Ctrl_Array > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NmXService_Ctrl_Array_g_tc_NmXService_Ctrl_sequence;

                static DDS_TypeCode_Member NmXService_Ctrl_Array_g_tc_members[1]=
                {

                    {
                        (char *)"NmXService_Ctrl",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NmXService_Ctrl_Array_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NmXService_Ctrl_Array", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NmXService_Ctrl_Array_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NmXService_Ctrl_Array*/

                if (is_initialized) {
                    return &NmXService_Ctrl_Array_g_tc;
                }

                NmXService_Ctrl_Array_g_tc_NmXService_Ctrl_sequence = initialize_sequence_typecode< ::rti::core::bounded_sequence< bottomtotop::NmXService_Ctrl_struct, 50L > >((50L));

                NmXService_Ctrl_Array_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NmXService_Ctrl_Array_g_tc_NmXService_Ctrl_sequence._data._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NmXService_Ctrl_struct>::get().native();
                NmXService_Ctrl_Array_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& NmXService_Ctrl_Array_g_tc_NmXService_Ctrl_sequence;

                /* Initialize the values for member annotations. */

                NmXService_Ctrl_Array_g_tc._data._sampleAccessInfo = sample_access_info();
                NmXService_Ctrl_Array_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NmXService_Ctrl_Array_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NmXService_Ctrl_Array *sample;

                static RTIXCdrMemberAccessInfo NmXService_Ctrl_Array_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NmXService_Ctrl_Array_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NmXService_Ctrl_Array_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NmXService_Ctrl_Array);
                if (sample == NULL) {
                    return NULL;
                }

                NmXService_Ctrl_Array_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NmXService_Ctrl() - (char *)sample);

                NmXService_Ctrl_Array_g_sampleAccessInfo.memberAccessInfos = 
                NmXService_Ctrl_Array_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NmXService_Ctrl_Array);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NmXService_Ctrl_Array_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NmXService_Ctrl_Array_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NmXService_Ctrl_Array_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NmXService_Ctrl_Array_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NmXService_Ctrl_Array >;

                NmXService_Ctrl_Array_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NmXService_Ctrl_Array_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NmXService_Ctrl_Array_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NmXService_Ctrl_Array_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NmXService_Ctrl_Array >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NmXService_Ctrl_Array >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NmXService_Ctrl_SOA_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member NmXService_Ctrl_SOA_struct_g_tc_members[1]=
                {

                    {
                        (char *)"NmXService_Ctrl_SOA_u8",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NmXService_Ctrl_SOA_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NmXService_Ctrl_SOA_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NmXService_Ctrl_SOA_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NmXService_Ctrl_SOA_struct*/

                if (is_initialized) {
                    return &NmXService_Ctrl_SOA_struct_g_tc;
                }

                NmXService_Ctrl_SOA_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NmXService_Ctrl_SOA_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                NmXService_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NmXService_Ctrl_SOA_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NmXService_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NmXService_Ctrl_SOA_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NmXService_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NmXService_Ctrl_SOA_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NmXService_Ctrl_SOA_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NmXService_Ctrl_SOA_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NmXService_Ctrl_SOA_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NmXService_Ctrl_SOA_struct *sample;

                static RTIXCdrMemberAccessInfo NmXService_Ctrl_SOA_struct_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NmXService_Ctrl_SOA_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NmXService_Ctrl_SOA_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NmXService_Ctrl_SOA_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NmXService_Ctrl_SOA_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NmXService_Ctrl_SOA_u8() - (char *)sample);

                NmXService_Ctrl_SOA_struct_g_sampleAccessInfo.memberAccessInfos = 
                NmXService_Ctrl_SOA_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NmXService_Ctrl_SOA_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NmXService_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NmXService_Ctrl_SOA_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NmXService_Ctrl_SOA_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NmXService_Ctrl_SOA_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NmXService_Ctrl_SOA_struct >;

                NmXService_Ctrl_SOA_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NmXService_Ctrl_SOA_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NmXService_Ctrl_SOA_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NmXService_Ctrl_SOA_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NmXService_Ctrl_SOA_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NmXService_Ctrl_SOA_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NmService_Get_struct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NmService_Get_struct_g_tc_CtrlSource_string;

                static DDS_TypeCode_Member NmService_Get_struct_g_tc_members[2]=
                {

                    {
                        (char *)"NMTypeReq",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"CtrlSource",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NmService_Get_struct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NmService_Get_struct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        NmService_Get_struct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NmService_Get_struct*/

                if (is_initialized) {
                    return &NmService_Get_struct_g_tc;
                }

                NmService_Get_struct_g_tc_CtrlSource_string = initialize_string_typecode((10L));

                NmService_Get_struct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NmService_Get_struct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;
                NmService_Get_struct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&NmService_Get_struct_g_tc_CtrlSource_string;

                /* Initialize the values for member annotations. */
                NmService_Get_struct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NmService_Get_struct_g_tc_members[0]._annotations._defaultValue._u.octet_value = 0;
                NmService_Get_struct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NmService_Get_struct_g_tc_members[0]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NmService_Get_struct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NmService_Get_struct_g_tc_members[0]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NmService_Get_struct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_STRING;
                NmService_Get_struct_g_tc_members[1]._annotations._defaultValue._u.string_value = (DDS_Char *) "";

                NmService_Get_struct_g_tc._data._sampleAccessInfo = sample_access_info();
                NmService_Get_struct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NmService_Get_struct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NmService_Get_struct *sample;

                static RTIXCdrMemberAccessInfo NmService_Get_struct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NmService_Get_struct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NmService_Get_struct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NmService_Get_struct);
                if (sample == NULL) {
                    return NULL;
                }

                NmService_Get_struct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NMTypeReq() - (char *)sample);

                NmService_Get_struct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->CtrlSource() - (char *)sample);

                NmService_Get_struct_g_sampleAccessInfo.memberAccessInfos = 
                NmService_Get_struct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NmService_Get_struct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NmService_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NmService_Get_struct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NmService_Get_struct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NmService_Get_struct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NmService_Get_struct >;

                NmService_Get_struct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NmService_Get_struct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NmService_Get_struct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NmService_Get_struct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NmService_Get_struct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NmService_Get_struct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NMService_St_substruct > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member NMService_St_substruct_g_tc_members[2]=
                {

                    {
                        (char *)"SceneID",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"SceneState",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NMService_St_substruct_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NMService_St_substruct", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        2, /* Number of members */
                        NMService_St_substruct_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NMService_St_substruct*/

                if (is_initialized) {
                    return &NMService_St_substruct_g_tc;
                }

                NMService_St_substruct_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NMService_St_substruct_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_ushort;
                NMService_St_substruct_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                /* Initialize the values for member annotations. */
                NMService_St_substruct_g_tc_members[0]._annotations._defaultValue._d = RTI_XCDR_TK_USHORT;
                NMService_St_substruct_g_tc_members[0]._annotations._defaultValue._u.ushort_value = 0;
                NMService_St_substruct_g_tc_members[0]._annotations._minValue._d = RTI_XCDR_TK_USHORT;
                NMService_St_substruct_g_tc_members[0]._annotations._minValue._u.ushort_value = RTIXCdrUnsignedShort_MIN;
                NMService_St_substruct_g_tc_members[0]._annotations._maxValue._d = RTI_XCDR_TK_USHORT;
                NMService_St_substruct_g_tc_members[0]._annotations._maxValue._u.ushort_value = RTIXCdrUnsignedShort_MAX;

                NMService_St_substruct_g_tc_members[1]._annotations._defaultValue._d = RTI_XCDR_TK_OCTET;
                NMService_St_substruct_g_tc_members[1]._annotations._defaultValue._u.octet_value = 0;
                NMService_St_substruct_g_tc_members[1]._annotations._minValue._d = RTI_XCDR_TK_OCTET;
                NMService_St_substruct_g_tc_members[1]._annotations._minValue._u.octet_value = RTIXCdrOctet_MIN;
                NMService_St_substruct_g_tc_members[1]._annotations._maxValue._d = RTI_XCDR_TK_OCTET;
                NMService_St_substruct_g_tc_members[1]._annotations._maxValue._u.octet_value = RTIXCdrOctet_MAX;

                NMService_St_substruct_g_tc._data._sampleAccessInfo = sample_access_info();
                NMService_St_substruct_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NMService_St_substruct_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NMService_St_substruct *sample;

                static RTIXCdrMemberAccessInfo NMService_St_substruct_g_memberAccessInfos[2] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NMService_St_substruct_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NMService_St_substruct_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NMService_St_substruct);
                if (sample == NULL) {
                    return NULL;
                }

                NMService_St_substruct_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SceneID() - (char *)sample);

                NMService_St_substruct_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->SceneState() - (char *)sample);

                NMService_St_substruct_g_sampleAccessInfo.memberAccessInfos = 
                NMService_St_substruct_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NMService_St_substruct);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NMService_St_substruct_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NMService_St_substruct_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NMService_St_substruct_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NMService_St_substruct_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NMService_St_substruct >;

                NMService_St_substruct_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NMService_St_substruct_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NMService_St_substruct_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NMService_St_substruct_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NMService_St_substruct >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NMService_St_substruct >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NMService_St_array > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode NMService_St_array_g_tc_NMService_St_sequence;

                static DDS_TypeCode_Member NMService_St_array_g_tc_members[1]=
                {

                    {
                        (char *)"NMService_St",/* Member name */
                        {
                            0,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NMService_St_array_g_tc =
                {{
                        DDS_TK_STRUCT, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NMService_St_array", /* Name */
                        NULL, /* Ignored */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        1, /* Number of members */
                        NMService_St_array_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NMService_St_array*/

                if (is_initialized) {
                    return &NMService_St_array_g_tc;
                }

                NMService_St_array_g_tc_NMService_St_sequence = initialize_sequence_typecode< ::rti::core::bounded_sequence< bottomtotop::NMService_St_substruct, 255L > >((255L));

                NMService_St_array_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NMService_St_array_g_tc_NMService_St_sequence._data._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NMService_St_substruct>::get().native();
                NMService_St_array_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)& NMService_St_array_g_tc_NMService_St_sequence;

                /* Initialize the values for member annotations. */

                NMService_St_array_g_tc._data._sampleAccessInfo = sample_access_info();
                NMService_St_array_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NMService_St_array_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NMService_St_array *sample;

                static RTIXCdrMemberAccessInfo NMService_St_array_g_memberAccessInfos[1] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NMService_St_array_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NMService_St_array_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NMService_St_array);
                if (sample == NULL) {
                    return NULL;
                }

                NMService_St_array_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NMService_St() - (char *)sample);

                NMService_St_array_g_sampleAccessInfo.memberAccessInfos = 
                NMService_St_array_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NMService_St_array);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NMService_St_array_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NMService_St_array_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NMService_St_array_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NMService_St_array_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NMService_St_array >;

                NMService_St_array_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NMService_St_array_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NMService_St_array_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NMService_St_array_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::StructType& dynamic_type< bottomtotop::NMService_St_array >::get()
        {
            return static_cast<const ::dds::core::xtypes::StructType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NMService_St_array >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NMService_Srv_Req_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member NMService_Srv_Req_Union_g_tc_members[3]=
                {

                    {
                        (char *)"NMService_Set",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NmXService_Ctrl",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NmService_Get",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NMService_Srv_Req_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NMService_Srv_Req_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        NMService_Srv_Req_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NMService_Srv_Req_Union*/

                if (is_initialized) {
                    return &NMService_Srv_Req_Union_g_tc;
                }

                NMService_Srv_Req_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NMService_Srv_Req_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NMService_Set_struct>::get().native();
                NMService_Srv_Req_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NmXService_Ctrl_Array>::get().native();
                NMService_Srv_Req_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NmService_Get_struct>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                NMService_Srv_Req_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                NMService_Srv_Req_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                NMService_Srv_Req_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NMService_Srv_Req_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NMService_Srv_Req_Union *sample;

                static RTIXCdrMemberAccessInfo NMService_Srv_Req_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NMService_Srv_Req_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NMService_Srv_Req_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NMService_Srv_Req_Union);
                if (sample == NULL) {
                    return NULL;
                }

                NMService_Srv_Req_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                NMService_Srv_Req_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NMService_Set() - (char *)sample);

                sample->_d() = 1;
                NMService_Srv_Req_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NmXService_Ctrl() - (char *)sample);

                sample->_d() = 2;
                NMService_Srv_Req_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NmService_Get() - (char *)sample);

                NMService_Srv_Req_Union_g_sampleAccessInfo.memberAccessInfos = 
                NMService_Srv_Req_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NMService_Srv_Req_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NMService_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NMService_Srv_Req_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NMService_Srv_Req_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NMService_Srv_Req_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NMService_Srv_Req_Union >;

                NMService_Srv_Req_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NMService_Srv_Req_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NMService_Srv_Req_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NMService_Srv_Req_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< bottomtotop::NMService_Srv_Req_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NMService_Srv_Req_Union >::get())));
        }

        #ifndef NDDS_STANDALONE_TYPE
        template<>
        struct native_type_code< bottomtotop::NMService_Srv_Resp_Union > {
            static DDS_TypeCode * get()
            {
                using namespace ::rti::topic::interpreter;

                static RTIBool is_initialized = RTI_FALSE;

                static DDS_TypeCode_Member NMService_Srv_Resp_Union_g_tc_members[3]=
                {

                    {
                        (char *)"NMService_Set_SOA",/* Member name */
                        {
                            1,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(0),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NmXService_Ctrl_SOA",/* Member name */
                        {
                            2,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(1),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }, 
                    {
                        (char *)"NmService_Get_SOA",/* Member name */
                        {
                            3,/* Representation ID */
                            DDS_BOOLEAN_FALSE,/* Is a pointer? */
                            -1, /* Bitfield bits */
                            NULL/* Member type code is assigned later */
                        },
                        0, /* Ignored */
                        1, /* Number of labels */
                        static_cast<int>(2),
                        NULL, /* Labels (it is NULL when there is only one label)*/
                        RTI_CDR_NONKEY_MEMBER, /* Is a key? */
                        DDS_PUBLIC_MEMBER,/* Member visibility */
                        1,
                        NULL, /* Ignored */
                        RTICdrTypeCodeAnnotations_INITIALIZER
                    }
                };

                static DDS_TypeCode NMService_Srv_Resp_Union_g_tc =
                {{
                        DDS_TK_UNION, /* Kind */
                        DDS_BOOLEAN_FALSE, /* Ignored */
                        -1, /*Ignored*/
                        (char *)"bottomtotop::NMService_Srv_Resp_Union", /* Name */
                        NULL,     /* Base class type code is assigned later */      
                        0, /* Ignored */
                        0, /* Ignored */
                        NULL, /* Ignored */
                        3, /* Number of members */
                        NMService_Srv_Resp_Union_g_tc_members, /* Members */
                        DDS_VM_NONE, /* Type Modifier */
                        RTICdrTypeCodeAnnotations_INITIALIZER,
                        DDS_BOOLEAN_TRUE, /* _isCopyable */
                        NULL, /* _sampleAccessInfo: assigned later */
                        NULL /* _typePlugin: assigned later */
                    }}; /* Type code for NMService_Srv_Resp_Union*/

                if (is_initialized) {
                    return &NMService_Srv_Resp_Union_g_tc;
                }

                NMService_Srv_Resp_Union_g_tc._data._annotations._allowedDataRepresentationMask = 5;

                NMService_Srv_Resp_Union_g_tc_members[0]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NMService_Set_SOA_struct>::get().native();
                NMService_Srv_Resp_Union_g_tc_members[1]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NmXService_Ctrl_SOA_struct>::get().native();
                NMService_Srv_Resp_Union_g_tc_members[2]._representation._typeCode = (RTICdrTypeCode *)&::rti::topic::dynamic_type< bottomtotop::NMService_St_array>::get().native();

                /* Initialize the values for member annotations. */

                /* Discriminator type code */
                NMService_Srv_Resp_Union_g_tc._data._typeCode = (RTICdrTypeCode *)&DDS_g_tc_octet;

                NMService_Srv_Resp_Union_g_tc._data._sampleAccessInfo = sample_access_info();
                NMService_Srv_Resp_Union_g_tc._data._typePlugin = type_plugin_info();    

                is_initialized = RTI_TRUE;

                return &NMService_Srv_Resp_Union_g_tc;
            }

            static RTIXCdrSampleAccessInfo * sample_access_info()
            {
                static RTIBool is_initialized = RTI_FALSE;

                bottomtotop::NMService_Srv_Resp_Union *sample;

                static RTIXCdrMemberAccessInfo NMService_Srv_Resp_Union_g_memberAccessInfos[4] =
                {RTIXCdrMemberAccessInfo_INITIALIZER};

                static RTIXCdrSampleAccessInfo NMService_Srv_Resp_Union_g_sampleAccessInfo = 
                RTIXCdrSampleAccessInfo_INITIALIZER;

                if (is_initialized) {
                    return (RTIXCdrSampleAccessInfo*) &NMService_Srv_Resp_Union_g_sampleAccessInfo;
                }

                RTIXCdrHeap_allocateStruct(
                    &sample, 
                    bottomtotop::NMService_Srv_Resp_Union);
                if (sample == NULL) {
                    return NULL;
                }

                NMService_Srv_Resp_Union_g_memberAccessInfos[0].bindingMemberValueOffset[0] =
                (RTIXCdrUnsignedLong) ((char *)&sample->_d() - (char *)sample);

                sample->_d() = 0;
                NMService_Srv_Resp_Union_g_memberAccessInfos[1].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NMService_Set_SOA() - (char *)sample);

                sample->_d() = 1;
                NMService_Srv_Resp_Union_g_memberAccessInfos[2].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NmXService_Ctrl_SOA() - (char *)sample);

                sample->_d() = 2;
                NMService_Srv_Resp_Union_g_memberAccessInfos[3].bindingMemberValueOffset[0] = 
                (RTIXCdrUnsignedLong) ((char *)&sample->NmService_Get_SOA() - (char *)sample);

                NMService_Srv_Resp_Union_g_sampleAccessInfo.memberAccessInfos = 
                NMService_Srv_Resp_Union_g_memberAccessInfos;

                {
                    size_t candidateTypeSize = sizeof(bottomtotop::NMService_Srv_Resp_Union);

                    if (candidateTypeSize > RTIXCdrLong_MAX) {
                        NMService_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        RTIXCdrLong_MAX;
                    } else {
                        NMService_Srv_Resp_Union_g_sampleAccessInfo.typeSize[0] =
                        (RTIXCdrUnsignedLong) candidateTypeSize;
                    }
                }

                NMService_Srv_Resp_Union_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
                RTI_XCDR_TRUE;

                NMService_Srv_Resp_Union_g_sampleAccessInfo.getMemberValuePointerFcn = 
                interpreter::get_aggregation_value_pointer< bottomtotop::NMService_Srv_Resp_Union >;

                NMService_Srv_Resp_Union_g_sampleAccessInfo.languageBinding = 
                RTI_XCDR_TYPE_BINDING_CPP_11_STL ;

                RTIXCdrHeap_freeStruct(sample);
                is_initialized = RTI_TRUE;
                return (RTIXCdrSampleAccessInfo*) &NMService_Srv_Resp_Union_g_sampleAccessInfo;
            }

            static RTIXCdrTypePlugin * type_plugin_info()
            {
                static RTIXCdrTypePlugin NMService_Srv_Resp_Union_g_typePlugin = 
                {
                    NULL, /* serialize */
                    NULL, /* serialize_key */
                    NULL, /* deserialize_sample */
                    NULL, /* deserialize_key_sample */
                    NULL, /* skip */
                    NULL, /* get_serialized_sample_size */
                    NULL, /* get_serialized_sample_max_size_ex */
                    NULL, /* get_serialized_key_max_size_ex */
                    NULL, /* get_serialized_sample_min_size */
                    NULL, /* serialized_sample_to_key */
                    NULL,
                    NULL,
                    NULL,
                    NULL
                };

                return &NMService_Srv_Resp_Union_g_typePlugin;
            }
        }; // native_type_code
        #endif

        const ::dds::core::xtypes::UnionType& dynamic_type< bottomtotop::NMService_Srv_Resp_Union >::get()
        {
            return static_cast<const ::dds::core::xtypes::UnionType&>(
                ::rti::core::native_conversions::cast_from_native< ::dds::core::xtypes::DynamicType >(
                    *(native_type_code< bottomtotop::NMService_Srv_Resp_Union >::get())));
        }

    }
}

namespace dds { 
    namespace topic {
        void topic_type_support< BodyDomain::BdArm_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_Set_structPlugin_new,
                BodyDomain::BdArm_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_Set_struct >::from_cdr_buffer(BodyDomain::BdArm_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_Set_struct >::reset_sample(BodyDomain::BdArm_Set_struct& sample) 
        {
            sample.VehicleUnlock_Set(0);
            sample.ReturnPUnlock_Set(0);
            sample.AwayVclLck_Set(0);
            sample.CloseVclUnlck_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdArm_Set_struct >::allocate_sample(BodyDomain::BdArm_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdArm_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_Get_structPlugin_new,
                BodyDomain::BdArm_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_Get_struct >::from_cdr_buffer(BodyDomain::BdArm_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_Get_struct >::reset_sample(BodyDomain::BdArm_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdArm_Get_struct >::allocate_sample(BodyDomain::BdArm_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdArm_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_Rsp_structPlugin_new,
                BodyDomain::BdArm_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_Rsp_struct >::from_cdr_buffer(BodyDomain::BdArm_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_Rsp_struct >::reset_sample(BodyDomain::BdArm_Rsp_struct& sample) 
        {
            sample.VehicleUnlock_Rsp(0);
            sample.ReturnPUnlock_Rsp(0);
            sample.AwayVclLck_Rsp(0);
            sample.CloseVclUnlck_Rsp(0);
        }

        void topic_type_support< BodyDomain::BdArm_Rsp_struct >::allocate_sample(BodyDomain::BdArm_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdArm_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_St_structPlugin_new,
                BodyDomain::BdArm_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_St_struct >::from_cdr_buffer(BodyDomain::BdArm_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_St_struct >::reset_sample(BodyDomain::BdArm_St_struct& sample) 
        {
            sample.CenterLck_St(0);
            sample.BodyBglAlarm_St(0);
            sample.ExLckReq_St(0);
        }

        void topic_type_support< BodyDomain::BdArm_St_struct >::allocate_sample(BodyDomain::BdArm_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdArm_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_St_Get_structPlugin_new,
                BodyDomain::BdArm_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_St_Get_struct >::from_cdr_buffer(BodyDomain::BdArm_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_St_Get_struct >::reset_sample(BodyDomain::BdArm_St_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdArm_St_Get_struct >::allocate_sample(BodyDomain::BdArm_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_Ctrl_structPlugin_new,
                BodyDomain::BdArm_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_struct >::from_cdr_buffer(BodyDomain::BdArm_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_struct >::reset_sample(BodyDomain::BdArm_Ctrl_struct& sample) 
        {
            sample.CenterLck_Act(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_struct >::allocate_sample(BodyDomain::BdArm_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_Ctrl_SOA_structPlugin_new,
                BodyDomain::BdArm_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::BdArm_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_SOA_struct >::reset_sample(BodyDomain::BdArm_Ctrl_SOA_struct& sample) 
        {
            sample.BdArm_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::BdArm_Ctrl_SOA_struct >::allocate_sample(BodyDomain::BdArm_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_Srv_Req_UnionPlugin_new,
                BodyDomain::BdArm_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Req_Union >::from_cdr_buffer(BodyDomain::BdArm_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Req_Union >::reset_sample(BodyDomain::BdArm_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BdArm_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BdArm_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BdArm_Ctrl());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.BdArm_St_Get());

            sample._d() = BodyDomain::BdArm_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Req_Union >::allocate_sample(BodyDomain::BdArm_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BdArm_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BdArm_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BdArm_Ctrl(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.BdArm_St_Get(),  -1, -1);

            sample._d() = BodyDomain::BdArm_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdArm_Srv_Resp_UnionPlugin_new,
                BodyDomain::BdArm_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdArm_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdArm_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdArm_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdArm_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::BdArm_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdArm_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdArm_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Resp_Union >::reset_sample(BodyDomain::BdArm_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BdArm_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BdArm_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BdArm_Ctrl_SOA());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.BdArm_St_Get_struct());

            sample._d() = BodyDomain::BdArm_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdArm_Srv_Resp_Union >::allocate_sample(BodyDomain::BdArm_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BdArm_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BdArm_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BdArm_Ctrl_SOA(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.BdArm_St_Get_struct(),  -1, -1);

            sample._d() = BodyDomain::BdArm_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::VsWsh_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_Set_structPlugin_new,
                BodyDomain::VsWsh_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_Set_struct >::from_cdr_buffer(BodyDomain::VsWsh_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_Set_struct >::reset_sample(BodyDomain::VsWsh_Set_struct& sample) 
        {
            sample.FwiperSW_Set(0);
            sample.FwiperAutoSenst_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::VsWsh_Set_struct >::allocate_sample(BodyDomain::VsWsh_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::VsWsh_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_Get_structPlugin_new,
                BodyDomain::VsWsh_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_Get_struct >::from_cdr_buffer(BodyDomain::VsWsh_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_Get_struct >::reset_sample(BodyDomain::VsWsh_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::VsWsh_Get_struct >::allocate_sample(BodyDomain::VsWsh_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::VsWsh_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_Rsp_structPlugin_new,
                BodyDomain::VsWsh_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_Rsp_struct >::from_cdr_buffer(BodyDomain::VsWsh_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_Rsp_struct >::reset_sample(BodyDomain::VsWsh_Rsp_struct& sample) 
        {
            sample.FwiperSW_Rsp(0);
            sample.FwiperAutoSenst_Rsp(0);
        }

        void topic_type_support< BodyDomain::VsWsh_Rsp_struct >::allocate_sample(BodyDomain::VsWsh_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::VsWsh_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_St_Get_structPlugin_new,
                BodyDomain::VsWsh_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_St_Get_struct >::from_cdr_buffer(BodyDomain::VsWsh_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_St_Get_struct >::reset_sample(BodyDomain::VsWsh_St_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::VsWsh_St_Get_struct >::allocate_sample(BodyDomain::VsWsh_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::VsWsh_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_St_structPlugin_new,
                BodyDomain::VsWsh_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_St_struct >::from_cdr_buffer(BodyDomain::VsWsh_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_St_struct >::reset_sample(BodyDomain::VsWsh_St_struct& sample) 
        {
            sample.Fwiper_St(0);
            sample.WashLqdHgtWarn_St(0);
            sample.ExMirHt_Rsp(0);
            sample.FwiperSWDisplay_st(0);
            sample.RWndShldHt_Rsp(0);
        }

        void topic_type_support< BodyDomain::VsWsh_St_struct >::allocate_sample(BodyDomain::VsWsh_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_Ctrl_structPlugin_new,
                BodyDomain::VsWsh_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_struct >::from_cdr_buffer(BodyDomain::VsWsh_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_struct >::reset_sample(BodyDomain::VsWsh_Ctrl_struct& sample) 
        {
            sample.FWiperSvcSW_Req(0);
            sample.ExMirHt_Req(0);
            sample.RWndShldHt_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_struct >::allocate_sample(BodyDomain::VsWsh_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_Ctrl_SOA_structPlugin_new,
                BodyDomain::VsWsh_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::VsWsh_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_SOA_struct >::reset_sample(BodyDomain::VsWsh_Ctrl_SOA_struct& sample) 
        {
            sample.VsWsh_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::VsWsh_Ctrl_SOA_struct >::allocate_sample(BodyDomain::VsWsh_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_Srv_Req_UnionPlugin_new,
                BodyDomain::VsWsh_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Req_Union >::from_cdr_buffer(BodyDomain::VsWsh_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Req_Union >::reset_sample(BodyDomain::VsWsh_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.VsWsh_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.VsWsh_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.VsWsh_Ctrl());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.VsWsh_St_Get());

            sample._d() = BodyDomain::VsWsh_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Req_Union >::allocate_sample(BodyDomain::VsWsh_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.VsWsh_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.VsWsh_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.VsWsh_Ctrl(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.VsWsh_St_Get(),  -1, -1);

            sample._d() = BodyDomain::VsWsh_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::VsWsh_Srv_Resp_UnionPlugin_new,
                BodyDomain::VsWsh_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::VsWsh_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::VsWsh_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VsWsh_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VsWsh_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::VsWsh_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VsWsh_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::VsWsh_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Resp_Union >::reset_sample(BodyDomain::VsWsh_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.VsWsh_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.VsWsh_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.VsWsh_Ctrl_SOA());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.VsWsh_St_Get_SOA());

            sample._d() = BodyDomain::VsWsh_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::VsWsh_Srv_Resp_Union >::allocate_sample(BodyDomain::VsWsh_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.VsWsh_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.VsWsh_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.VsWsh_Ctrl_SOA(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.VsWsh_St_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::VsWsh_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::SSd_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SSd_Set_structPlugin_new,
                BodyDomain::SSd_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SSd_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SSd_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SSd_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SSd_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SSd_Set_struct >::from_cdr_buffer(BodyDomain::SSd_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SSd_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SSd_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SSd_Set_struct >::reset_sample(BodyDomain::SSd_Set_struct& sample) 
        {
            sample.LockVoiWarn_Req(0);
            sample.LowSpdVoi_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::SSd_Set_struct >::allocate_sample(BodyDomain::SSd_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::SSd_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SSd_Get_structPlugin_new,
                BodyDomain::SSd_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SSd_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SSd_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SSd_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SSd_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SSd_Get_struct >::from_cdr_buffer(BodyDomain::SSd_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SSd_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SSd_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SSd_Get_struct >::reset_sample(BodyDomain::SSd_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::SSd_Get_struct >::allocate_sample(BodyDomain::SSd_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::SSd_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SSd_Rsp_structPlugin_new,
                BodyDomain::SSd_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SSd_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SSd_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SSd_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SSd_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SSd_Rsp_struct >::from_cdr_buffer(BodyDomain::SSd_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SSd_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SSd_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SSd_Rsp_struct >::reset_sample(BodyDomain::SSd_Rsp_struct& sample) 
        {
            sample.LockVoiWarn_Rsp(0);
            sample.LowSpdVoi_Rsp(0);
        }

        void topic_type_support< BodyDomain::SSd_Rsp_struct >::allocate_sample(BodyDomain::SSd_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::SSd_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SSd_Srv_Req_UnionPlugin_new,
                BodyDomain::SSd_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SSd_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SSd_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SSd_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SSd_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SSd_Srv_Req_Union >::from_cdr_buffer(BodyDomain::SSd_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SSd_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SSd_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::SSd_Srv_Req_Union >::reset_sample(BodyDomain::SSd_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.SSd_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.SSd_Get());

            sample._d() = BodyDomain::SSd_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::SSd_Srv_Req_Union >::allocate_sample(BodyDomain::SSd_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.SSd_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.SSd_Get(),  -1, -1);

            sample._d() = BodyDomain::SSd_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::SSd_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SSd_Srv_Resp_UnionPlugin_new,
                BodyDomain::SSd_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SSd_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SSd_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SSd_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SSd_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SSd_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::SSd_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SSd_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SSd_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::SSd_Srv_Resp_Union >::reset_sample(BodyDomain::SSd_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.SSd_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.SSd_Get_SOA());

            sample._d() = BodyDomain::SSd_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::SSd_Srv_Resp_Union >::allocate_sample(BodyDomain::SSd_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.SSd_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.SSd_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::SSd_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Win_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Win_Set_structPlugin_new,
                BodyDomain::Win_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Win_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Win_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Win_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Win_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Win_Set_struct >::from_cdr_buffer(BodyDomain::Win_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Win_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Win_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::Win_Set_struct >::reset_sample(BodyDomain::Win_Set_struct& sample) 
        {
            sample.LckCloseWin_Set(0);
            sample.RainCloseWin_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::Win_Set_struct >::allocate_sample(BodyDomain::Win_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::Win_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Win_Get_structPlugin_new,
                BodyDomain::Win_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Win_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Win_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Win_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Win_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Win_Get_struct >::from_cdr_buffer(BodyDomain::Win_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Win_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Win_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::Win_Get_struct >::reset_sample(BodyDomain::Win_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::Win_Get_struct >::allocate_sample(BodyDomain::Win_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::Win_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Win_Rsp_structPlugin_new,
                BodyDomain::Win_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Win_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Win_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Win_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Win_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Win_Rsp_struct >::from_cdr_buffer(BodyDomain::Win_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Win_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Win_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::Win_Rsp_struct >::reset_sample(BodyDomain::Win_Rsp_struct& sample) 
        {
            sample.LckCloseWin_Rsp(0);
            sample.RainCloseWin_Rsp(0);
        }

        void topic_type_support< BodyDomain::Win_Rsp_struct >::allocate_sample(BodyDomain::Win_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::WinPct_Ctrl_structPlugin_new,
                BodyDomain::WinPct_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::WinPct_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::WinPct_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = WinPct_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = WinPct_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_struct >::from_cdr_buffer(BodyDomain::WinPct_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = WinPct_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::WinPct_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_struct >::reset_sample(BodyDomain::WinPct_Ctrl_struct& sample) 
        {
            sample.FLWinPst_Act(0);
            sample.FRWinPst_Act(0);
            sample.RLWinPst_Act(0);
            sample.RRWinPst_Act(0);
            sample.WinFastCtl_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_struct >::allocate_sample(BodyDomain::WinPct_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::WinPct_Ctrl_SOA_structPlugin_new,
                BodyDomain::WinPct_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::WinPct_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::WinPct_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = WinPct_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = WinPct_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::WinPct_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = WinPct_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::WinPct_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_SOA_struct >::reset_sample(BodyDomain::WinPct_Ctrl_SOA_struct& sample) 
        {
            sample.WinPct_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::WinPct_Ctrl_SOA_struct >::allocate_sample(BodyDomain::WinPct_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::Win_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Win_St_Get_structPlugin_new,
                BodyDomain::Win_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Win_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Win_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Win_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Win_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Win_St_Get_struct >::from_cdr_buffer(BodyDomain::Win_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Win_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Win_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::Win_St_Get_struct >::reset_sample(BodyDomain::Win_St_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::Win_St_Get_struct >::allocate_sample(BodyDomain::Win_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::Win_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Win_St_structPlugin_new,
                BodyDomain::Win_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Win_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Win_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Win_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Win_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Win_St_struct >::from_cdr_buffer(BodyDomain::Win_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Win_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Win_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::Win_St_struct >::reset_sample(BodyDomain::Win_St_struct& sample) 
        {
            sample.FLWinPst_St(0);
            sample.FRWinPst_St(0);
            sample.RLWinPst_St(0);
            sample.RRWinPst_St(0);
            sample.FLWdwMov_St(0);
            sample.FRWdwMov_St(0);
            sample.RLWdwMov_St(0);
            sample.RRWdwMov_St(0);
            sample.FLWinStpRsn_St(0);
            sample.FRWinStpRsn_St(0);
            sample.RLWinStpRsn_St(0);
            sample.RRWinStpRsn_St(0);
            sample.AllWinClose_St(0);
            sample.AllWinOpen_St(0);
            sample.AllWinFrshAir_St(0);
            sample.WinVent_St(0);
        }

        void topic_type_support< BodyDomain::Win_St_struct >::allocate_sample(BodyDomain::Win_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::Win_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Win_Srv_Req_UnionPlugin_new,
                BodyDomain::Win_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Win_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Win_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Win_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Win_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Win_Srv_Req_Union >::from_cdr_buffer(BodyDomain::Win_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Win_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Win_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::Win_Srv_Req_Union >::reset_sample(BodyDomain::Win_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.Win_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.Win_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.WinPct_Ctrl());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.Win_St_Get());

            sample._d() = BodyDomain::Win_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Win_Srv_Req_Union >::allocate_sample(BodyDomain::Win_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.Win_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.Win_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.WinPct_Ctrl(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.Win_St_Get(),  -1, -1);

            sample._d() = BodyDomain::Win_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Win_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Win_Srv_Resp_UnionPlugin_new,
                BodyDomain::Win_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Win_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Win_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Win_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Win_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Win_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::Win_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Win_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Win_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::Win_Srv_Resp_Union >::reset_sample(BodyDomain::Win_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.Win_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.Win_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.WinPct_Ctrl_SOA());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.Win_St_Get_SOA());

            sample._d() = BodyDomain::Win_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Win_Srv_Resp_Union >::allocate_sample(BodyDomain::Win_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.Win_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.Win_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.WinPct_Ctrl_SOA(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.Win_St_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::Win_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdPst_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_Set_structPlugin_new,
                BodyDomain::BdPst_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_Set_struct >::from_cdr_buffer(BodyDomain::BdPst_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_Set_struct >::reset_sample(BodyDomain::BdPst_Set_struct& sample) 
        {
            sample.ExMirAutoTurnOver_Set(0);
            sample.ExMirFoldEn_Set(0);
            sample.ExMirUnfoldAlt_Set(0);
            sample.FLSeatWelcome_Set(0);
            sample.ExitVehicleMemory_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdPst_Set_struct >::allocate_sample(BodyDomain::BdPst_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdPst_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_Get_structPlugin_new,
                BodyDomain::BdPst_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_Get_struct >::from_cdr_buffer(BodyDomain::BdPst_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_Get_struct >::reset_sample(BodyDomain::BdPst_Get_struct& sample) 
        {
            sample.BdPstSetBit(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdPst_Get_struct >::allocate_sample(BodyDomain::BdPst_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_Rsp_structPlugin_new,
                BodyDomain::BdPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_Rsp_struct >::from_cdr_buffer(BodyDomain::BdPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_Rsp_struct >::reset_sample(BodyDomain::BdPst_Rsp_struct& sample) 
        {
            sample.ExMirAutoTurnOverSet_Rsp(0);
            sample.ExMirFoldEn_Rsp(0);
            sample.ExMirUnfoldAlt_Rsp(0);
            sample.FLSeatWelcome_Rsp(0);
            sample.ExitVehicleMemory_Rsp(0);
        }

        void topic_type_support< BodyDomain::BdPst_Rsp_struct >::allocate_sample(BodyDomain::BdPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_Ctrl_structPlugin_new,
                BodyDomain::BdPst_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_struct >::from_cdr_buffer(BodyDomain::BdPst_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_struct >::reset_sample(BodyDomain::BdPst_Ctrl_struct& sample) 
        {
            sample.ExMirCtrl_Act(0);
            sample.LExMirUDAdj_Act(0);
            sample.LExMirLRAdj_Act(0);
            sample.RExMirUDAdj_Act(0);
            sample.RExMirLRAdj_Act(0);
            sample.SteerTiltAdj_Act(0);
            sample.SteerTeleAdj_Act(0);
            sample.SteerLongStroke_Req(0);
            sample.FLMemPstExport_req(0);
            sample.FRMemPstExPort_req(0);
            sample.FLSeatPstMem_Req(0);
            sample.FRSeatPstMem_Req(0);
            sample.SteerTiltPst_Req(0);
            sample.SteerTelePst_Req(0);
            sample.LExMirUDPst_Req(0);
            sample.LExMirLRPst_Req(0);
            sample.RExMirUDPst_Req(0);
            sample.RExMirLRPst_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_struct >::allocate_sample(BodyDomain::BdPst_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_Ctrl_SOA_structPlugin_new,
                BodyDomain::BdPst_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::BdPst_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_SOA_struct >::reset_sample(BodyDomain::BdPst_Ctrl_SOA_struct& sample) 
        {
            sample.BdPst_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::BdPst_Ctrl_SOA_struct >::allocate_sample(BodyDomain::BdPst_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdPst_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_St_Get_structPlugin_new,
                BodyDomain::BdPst_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_St_Get_struct >::from_cdr_buffer(BodyDomain::BdPst_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_St_Get_struct >::reset_sample(BodyDomain::BdPst_St_Get_struct& sample) 
        {
            sample.BdPstBit(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdPst_St_Get_struct >::allocate_sample(BodyDomain::BdPst_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::FLMemPstExportRsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::FLMemPstExportRsp_structPlugin_new,
                BodyDomain::FLMemPstExportRsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::FLMemPstExportRsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::FLMemPstExportRsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = FLMemPstExportRsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = FLMemPstExportRsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::FLMemPstExportRsp_struct >::from_cdr_buffer(BodyDomain::FLMemPstExportRsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = FLMemPstExportRsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::FLMemPstExportRsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::FLMemPstExportRsp_struct >::reset_sample(BodyDomain::FLMemPstExportRsp_struct& sample) 
        {
            sample.FLSeatExportPst(0);
            sample.FLMemPstExportSt_Rsp(0);
            sample.FLMemPstExportMvSt_Rsp(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::FLMemPstExportRsp_struct >::allocate_sample(BodyDomain::FLMemPstExportRsp_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::FRMemPstExportRsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::FRMemPstExportRsp_structPlugin_new,
                BodyDomain::FRMemPstExportRsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::FRMemPstExportRsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::FRMemPstExportRsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = FRMemPstExportRsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = FRMemPstExportRsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::FRMemPstExportRsp_struct >::from_cdr_buffer(BodyDomain::FRMemPstExportRsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = FRMemPstExportRsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::FRMemPstExportRsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::FRMemPstExportRsp_struct >::reset_sample(BodyDomain::FRMemPstExportRsp_struct& sample) 
        {
            sample.FRSeatExportPst(0);
            sample.FRMemPstExportSt_Rsp(0);
            sample.FRMemPstExportMvSt_Rsp(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::FRMemPstExportRsp_struct >::allocate_sample(BodyDomain::FRMemPstExportRsp_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdPst_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_St_structPlugin_new,
                BodyDomain::BdPst_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_St_struct >::from_cdr_buffer(BodyDomain::BdPst_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_St_struct >::reset_sample(BodyDomain::BdPst_St_struct& sample) 
        {
            sample.ExMirCtrl_St(0);
            sample.LExMirUDMv_St(0);
            sample.LExMirLRMv_St(0);
            sample.RExMirUDMv_St(0);
            sample.RExMirLRMv_St(0);
            sample.SteerTiltMv_St(0);
            sample.SteerTeleMv_St(0);
            sample.LExMirCtrlMv_St(0);
            sample.RExMirCtrlMv_St(0);
            sample.SteerLongStrokeSt_Rsp(0);
            sample.SteerLongStrokeMoveSt_Rsp(0);
            sample.SteerLongStrokeStpRsn_Rsp(0);
            sample.FLSeatPstMemWin_Req(0);
            sample.FRSeatPstMemWin_Req(0);
            sample.SteerTiltPst_Rsp(0);
            sample.SteerTelePst_Rsp(0);
            sample.LExMirUDPst_Rsp(0);
            sample.LExMirLRPst_Rsp(0);
            sample.RExMirUDPst_Rsp(0);
            sample.RExMirLRPst_Rsp(0);
            ::rti::topic::reset_sample(sample.FLMemPstExportRsp());
            ::rti::topic::reset_sample(sample.FRMemPstExportRsp());
        }

        void topic_type_support< BodyDomain::BdPst_St_struct >::allocate_sample(BodyDomain::BdPst_St_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.FLMemPstExportRsp(),  -1, -1);
            ::rti::topic::allocate_sample(sample.FRMemPstExportRsp(),  -1, -1);
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Req_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::FLSeatMemPst_Req_structPlugin_new,
                BodyDomain::FLSeatMemPst_Req_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::FLSeatMemPst_Req_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::FLSeatMemPst_Req_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = FLSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = FLSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Req_struct >::from_cdr_buffer(BodyDomain::FLSeatMemPst_Req_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = FLSeatMemPst_Req_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::FLSeatMemPst_Req_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Req_struct >::reset_sample(BodyDomain::FLSeatMemPst_Req_struct& sample) 
        {
            sample.FLSeatMemPstPurpose_Req(0);
            sample.FLSeatMemFBPst_Req(0);
            sample.FLSeatMemBackrestPst_Req(0);
            sample.FLSeatMemHgtPst_Req(0);
            sample.FLSeatMemCshnAngPst_Req(0);
            sample.FLMemLegAngCshnExtPst_Req(0);
            sample.FLSeatMemLegLengthPst_Req(0);
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Req_struct >::allocate_sample(BodyDomain::FLSeatMemPst_Req_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Req_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::FRSeatMemPst_Req_structPlugin_new,
                BodyDomain::FRSeatMemPst_Req_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::FRSeatMemPst_Req_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::FRSeatMemPst_Req_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = FRSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = FRSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Req_struct >::from_cdr_buffer(BodyDomain::FRSeatMemPst_Req_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = FRSeatMemPst_Req_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::FRSeatMemPst_Req_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Req_struct >::reset_sample(BodyDomain::FRSeatMemPst_Req_struct& sample) 
        {
            sample.FRSeatPstPurpose_Req(0);
            sample.FRSeatMemFBPst_Req(0);
            sample.FRSeatMemBackrestPst_Req(0);
            sample.FRSeatMemHgtPst_Req(0);
            sample.FRSeatMemCshnAngPst_Req(0);
            sample.FRSeatMemLegAngCshnExtPst_Req(0);
            sample.FRSeatMemLegLengthPst_Req(0);
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Req_struct >::allocate_sample(BodyDomain::FRSeatMemPst_Req_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Req_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SRLSeatMemPst_Req_structPlugin_new,
                BodyDomain::SRLSeatMemPst_Req_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SRLSeatMemPst_Req_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SRLSeatMemPst_Req_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SRLSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SRLSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Req_struct >::from_cdr_buffer(BodyDomain::SRLSeatMemPst_Req_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SRLSeatMemPst_Req_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SRLSeatMemPst_Req_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Req_struct >::reset_sample(BodyDomain::SRLSeatMemPst_Req_struct& sample) 
        {
            sample.SRLSeatMemPstPurpose_Req(0);
            sample.SRLSeatMemFBPst_Req(0);
            sample.SRLSeatMemBackrestPst_Req(0);
            sample.SRLSeatMemHgtPst_Req(0);
            sample.SRLSeatMemCshnAngPst_Req(0);
            sample.SRLSeatMemLegAngCshnExtPst_Req(0);
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Req_struct >::allocate_sample(BodyDomain::SRLSeatMemPst_Req_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Req_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SRRSeatMemPst_Req_structPlugin_new,
                BodyDomain::SRRSeatMemPst_Req_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SRRSeatMemPst_Req_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SRRSeatMemPst_Req_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SRRSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SRRSeatMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Req_struct >::from_cdr_buffer(BodyDomain::SRRSeatMemPst_Req_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SRRSeatMemPst_Req_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SRRSeatMemPst_Req_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Req_struct >::reset_sample(BodyDomain::SRRSeatMemPst_Req_struct& sample) 
        {
            sample.SRRSeatMemPstPurpose_Req(0);
            sample.SRRSeatMemFBPst_Req(0);
            sample.SRRSeatMemBackrestPst_Req(0);
            sample.SRRSeatMemHgtPst_Req(0);
            sample.SRRSeatMemCshnAngPst_Req(0);
            sample.SRRSeatMemLegAngCshnExtPst_Req(0);
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Req_struct >::allocate_sample(BodyDomain::SRRSeatMemPst_Req_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::SteerMemPst_Req_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SteerMemPst_Req_structPlugin_new,
                BodyDomain::SteerMemPst_Req_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SteerMemPst_Req_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SteerMemPst_Req_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SteerMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SteerMemPst_Req_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SteerMemPst_Req_struct >::from_cdr_buffer(BodyDomain::SteerMemPst_Req_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SteerMemPst_Req_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SteerMemPst_Req_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SteerMemPst_Req_struct >::reset_sample(BodyDomain::SteerMemPst_Req_struct& sample) 
        {
            sample.SteerMemPstPurpose_Req(0);
            sample.SteerMemTiltPst_Req(0);
            sample.SteerMemTelePst_Req(0);
        }

        void topic_type_support< BodyDomain::SteerMemPst_Req_struct >::allocate_sample(BodyDomain::SteerMemPst_Req_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Req_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::LExMirMemLRPst_Req_structPlugin_new,
                BodyDomain::LExMirMemLRPst_Req_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::LExMirMemLRPst_Req_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::LExMirMemLRPst_Req_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = LExMirMemLRPst_Req_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = LExMirMemLRPst_Req_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Req_struct >::from_cdr_buffer(BodyDomain::LExMirMemLRPst_Req_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = LExMirMemLRPst_Req_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::LExMirMemLRPst_Req_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Req_struct >::reset_sample(BodyDomain::LExMirMemLRPst_Req_struct& sample) 
        {
            sample.LExMirMemUDPst_Req(0);
            sample.LExMirMemLRPst_Req(0);
            sample.LExMirMemLRPstPurpose_Req(0);
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Req_struct >::allocate_sample(BodyDomain::LExMirMemLRPst_Req_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Req_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::RExMirMemLRPst_Req_structPlugin_new,
                BodyDomain::RExMirMemLRPst_Req_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::RExMirMemLRPst_Req_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::RExMirMemLRPst_Req_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = RExMirMemLRPst_Req_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = RExMirMemLRPst_Req_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Req_struct >::from_cdr_buffer(BodyDomain::RExMirMemLRPst_Req_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = RExMirMemLRPst_Req_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::RExMirMemLRPst_Req_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Req_struct >::reset_sample(BodyDomain::RExMirMemLRPst_Req_struct& sample) 
        {
            sample.RExMirMemUDPst_Req(0);
            sample.RExMirMemLRPst_Req(0);
            sample.RExMirMemLRPstPurpose_Req(0);
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Req_struct >::allocate_sample(BodyDomain::RExMirMemLRPst_Req_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdMemPst_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdMemPst_Set_structPlugin_new,
                BodyDomain::BdMemPst_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdMemPst_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdMemPst_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdMemPst_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdMemPst_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdMemPst_Set_struct >::from_cdr_buffer(BodyDomain::BdMemPst_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdMemPst_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdMemPst_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdMemPst_Set_struct >::reset_sample(BodyDomain::BdMemPst_Set_struct& sample) 
        {
            ::rti::topic::reset_sample(sample.FLSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.FRSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.SRLSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.SRRSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.SteerMemPst_Req());
            ::rti::topic::reset_sample(sample.LExMirMemLRPst_Req());
            ::rti::topic::reset_sample(sample.RExMirMemLRPst_Req());
        }

        void topic_type_support< BodyDomain::BdMemPst_Set_struct >::allocate_sample(BodyDomain::BdMemPst_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.FLSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.FRSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.SRLSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.SRRSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.SteerMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.LExMirMemLRPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.RExMirMemLRPst_Req(),  -1, -1);
        }

        void topic_type_support< BodyDomain::BdMemPst_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdMemPst_Get_structPlugin_new,
                BodyDomain::BdMemPst_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdMemPst_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdMemPst_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdMemPst_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdMemPst_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdMemPst_Get_struct >::from_cdr_buffer(BodyDomain::BdMemPst_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdMemPst_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdMemPst_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdMemPst_Get_struct >::reset_sample(BodyDomain::BdMemPst_Get_struct& sample) 
        {
            sample.FLSeatMemPstGet_Req(0);
            sample.FRSeatMemPstGet_Req(0);
            sample.SRLSeatMemPstGet_Req(0);
            sample.SRRSeatMemPstGet_Req(0);
            sample.SteerMemPstGet_Req(0);
            sample.LExMirMemLRPstGet_Req(0);
            sample.RExMirMemLRPstGet_Req(0);
        }

        void topic_type_support< BodyDomain::BdMemPst_Get_struct >::allocate_sample(BodyDomain::BdMemPst_Get_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::FLSeatMemPst_Rsp_structPlugin_new,
                BodyDomain::FLSeatMemPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::FLSeatMemPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::FLSeatMemPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = FLSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = FLSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Rsp_struct >::from_cdr_buffer(BodyDomain::FLSeatMemPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = FLSeatMemPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::FLSeatMemPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Rsp_struct >::reset_sample(BodyDomain::FLSeatMemPst_Rsp_struct& sample) 
        {
            sample.FLSeatMemPstPurpose_Rsp(0);
            sample.FLSeatMemFBPst_Rsp(0);
            sample.FLSeatMemBackrestPst_Rsp(0);
            sample.FLSeatMemHgtPst_Rsp(0);
            sample.FLSeatMemCshnAngPst_Rsp(0);
            sample.FLSeatMemLegAngCshnExtPst_Rsp(0);
            sample.FLSeatMemLegLengthPst_Rsp(0);
        }

        void topic_type_support< BodyDomain::FLSeatMemPst_Rsp_struct >::allocate_sample(BodyDomain::FLSeatMemPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::FRSeatMemPst_Rsp_structPlugin_new,
                BodyDomain::FRSeatMemPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::FRSeatMemPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::FRSeatMemPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = FRSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = FRSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Rsp_struct >::from_cdr_buffer(BodyDomain::FRSeatMemPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = FRSeatMemPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::FRSeatMemPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Rsp_struct >::reset_sample(BodyDomain::FRSeatMemPst_Rsp_struct& sample) 
        {
            sample.FRSeatMemPstPurpose_Rsp(0);
            sample.FRSeatMemFBPst_Rsp(0);
            sample.FRSeatMemBackrestPst_Rsp(0);
            sample.FRSeatMemHgtPst_Rsp(0);
            sample.FRSeatMemCshnAngPst_Rsp(0);
            sample.FRSeatMemLegAngCshnExtPst_Rsp(0);
            sample.FRSeatMemLegLengthPst_Rsp(0);
        }

        void topic_type_support< BodyDomain::FRSeatMemPst_Rsp_struct >::allocate_sample(BodyDomain::FRSeatMemPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SRLSeatMemPst_Rsp_structPlugin_new,
                BodyDomain::SRLSeatMemPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SRLSeatMemPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SRLSeatMemPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SRLSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SRLSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Rsp_struct >::from_cdr_buffer(BodyDomain::SRLSeatMemPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SRLSeatMemPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SRLSeatMemPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Rsp_struct >::reset_sample(BodyDomain::SRLSeatMemPst_Rsp_struct& sample) 
        {
            sample.SRLSeatMemPstPurpose_Rsp(0);
            sample.SRLSeatMemFBPst_Rsp(0);
            sample.SRLSeatMemBackrestPst_Rsp(0);
            sample.SRLSeatMemHgtPst_Rsp(0);
            sample.SRLSeatMemCshnAngPst_Rsp(0);
            sample.SRLSeatMemLegAngCshnExtPst_Rsp(0);
        }

        void topic_type_support< BodyDomain::SRLSeatMemPst_Rsp_struct >::allocate_sample(BodyDomain::SRLSeatMemPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SRRSeatMemPst_Rsp_structPlugin_new,
                BodyDomain::SRRSeatMemPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SRRSeatMemPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SRRSeatMemPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SRRSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SRRSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Rsp_struct >::from_cdr_buffer(BodyDomain::SRRSeatMemPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SRRSeatMemPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SRRSeatMemPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Rsp_struct >::reset_sample(BodyDomain::SRRSeatMemPst_Rsp_struct& sample) 
        {
            sample.SRRSeatMemPstPurpose_Rsp(0);
            sample.SRRSeatMemFBPst_Rsp(0);
            sample.SRRSeatMemBackrestPst_Rsp(0);
            sample.SRRSeatMemHgtPst_Rsp(0);
            sample.SRRSeatMemCshnAngPst_Rsp(0);
            sample.SRRSeatMemLegAngCshnExtPst_Rsp(0);
        }

        void topic_type_support< BodyDomain::SRRSeatMemPst_Rsp_struct >::allocate_sample(BodyDomain::SRRSeatMemPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::SteerSeatMemPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::SteerSeatMemPst_Rsp_structPlugin_new,
                BodyDomain::SteerSeatMemPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::SteerSeatMemPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::SteerSeatMemPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SteerSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SteerSeatMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::SteerSeatMemPst_Rsp_struct >::from_cdr_buffer(BodyDomain::SteerSeatMemPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SteerSeatMemPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::SteerSeatMemPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::SteerSeatMemPst_Rsp_struct >::reset_sample(BodyDomain::SteerSeatMemPst_Rsp_struct& sample) 
        {
            sample.SteerMemPstPurpose_Rsp(0);
            sample.SteerMemTiltPst_Rsp(0);
            sample.SteerMemTelePst_Rsp(0);
        }

        void topic_type_support< BodyDomain::SteerSeatMemPst_Rsp_struct >::allocate_sample(BodyDomain::SteerSeatMemPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::LExMirMemLRPst_Rsp_structPlugin_new,
                BodyDomain::LExMirMemLRPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::LExMirMemLRPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::LExMirMemLRPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = LExMirMemLRPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = LExMirMemLRPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Rsp_struct >::from_cdr_buffer(BodyDomain::LExMirMemLRPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = LExMirMemLRPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::LExMirMemLRPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Rsp_struct >::reset_sample(BodyDomain::LExMirMemLRPst_Rsp_struct& sample) 
        {
            sample.LExMirMemUDPst_Rsp(0);
            sample.LExMirMemLRPst_Rsp(0);
            sample.LExMirMemLRPstPurpose_Rsp(0);
        }

        void topic_type_support< BodyDomain::LExMirMemLRPst_Rsp_struct >::allocate_sample(BodyDomain::LExMirMemLRPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::RExMirMemLRPst_Rsp_structPlugin_new,
                BodyDomain::RExMirMemLRPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::RExMirMemLRPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::RExMirMemLRPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = RExMirMemLRPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = RExMirMemLRPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Rsp_struct >::from_cdr_buffer(BodyDomain::RExMirMemLRPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = RExMirMemLRPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::RExMirMemLRPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Rsp_struct >::reset_sample(BodyDomain::RExMirMemLRPst_Rsp_struct& sample) 
        {
            sample.RExMirMemUDPst_Rsp(0);
            sample.RExMirMemLRPst_Rsp(0);
            sample.RExMirMemLRPstPurpose_Rsp(0);
        }

        void topic_type_support< BodyDomain::RExMirMemLRPst_Rsp_struct >::allocate_sample(BodyDomain::RExMirMemLRPst_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdMemPst_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdMemPst_Rsp_structPlugin_new,
                BodyDomain::BdMemPst_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdMemPst_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdMemPst_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdMemPst_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdMemPst_Rsp_struct >::from_cdr_buffer(BodyDomain::BdMemPst_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdMemPst_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdMemPst_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdMemPst_Rsp_struct >::reset_sample(BodyDomain::BdMemPst_Rsp_struct& sample) 
        {
            ::rti::topic::reset_sample(sample.FLSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.FRSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.SRLSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.SRRSeatMemPst_Req());
            ::rti::topic::reset_sample(sample.SteerMemPst_Req());
            ::rti::topic::reset_sample(sample.LExMirMemLRPst_Req());
            ::rti::topic::reset_sample(sample.RExMirMemLRPst_Req());
        }

        void topic_type_support< BodyDomain::BdMemPst_Rsp_struct >::allocate_sample(BodyDomain::BdMemPst_Rsp_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.FLSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.FRSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.SRLSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.SRRSeatMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.SteerMemPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.LExMirMemLRPst_Req(),  -1, -1);
            ::rti::topic::allocate_sample(sample.RExMirMemLRPst_Req(),  -1, -1);
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_Srv_Req_UnionPlugin_new,
                BodyDomain::BdPst_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Req_Union >::from_cdr_buffer(BodyDomain::BdPst_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Req_Union >::reset_sample(BodyDomain::BdPst_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BdPst_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BdPst_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BdPst_Ctrl());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.BdPst_St_Get());
            sample._d() = 4;
            ::rti::topic::reset_sample(sample.BdMemPst_Set());
            sample._d() = 5;
            ::rti::topic::reset_sample(sample.BdMemPst_Get());

            sample._d() = BodyDomain::BdPst_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Req_Union >::allocate_sample(BodyDomain::BdPst_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BdPst_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BdPst_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BdPst_Ctrl(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.BdPst_St_Get(),  -1, -1);
            sample._d() = 4;
            ::rti::topic::allocate_sample(sample.BdMemPst_Set(),  -1, -1);
            sample._d() = 5;
            ::rti::topic::allocate_sample(sample.BdMemPst_Get(),  -1, -1);

            sample._d() = BodyDomain::BdPst_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdPst_Srv_Resp_UnionPlugin_new,
                BodyDomain::BdPst_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdPst_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdPst_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdPst_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdPst_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::BdPst_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdPst_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdPst_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Resp_Union >::reset_sample(BodyDomain::BdPst_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BdPst_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BdPst_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BdPst_Ctrl_SOA());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.BdPst_St_Get_SOA());
            sample._d() = 4;
            ::rti::topic::reset_sample(sample.BdMemPst_Set_SOA());
            sample._d() = 5;
            ::rti::topic::reset_sample(sample.BdMemPst_Get_SOA());

            sample._d() = BodyDomain::BdPst_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdPst_Srv_Resp_Union >::allocate_sample(BodyDomain::BdPst_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BdPst_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BdPst_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BdPst_Ctrl_SOA(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.BdPst_St_Get_SOA(),  -1, -1);
            sample._d() = 4;
            ::rti::topic::allocate_sample(sample.BdMemPst_Set_SOA(),  -1, -1);
            sample._d() = 5;
            ::rti::topic::allocate_sample(sample.BdMemPst_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::BdPst_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::StAdj_Ctrl_structPlugin_new,
                BodyDomain::StAdj_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::StAdj_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::StAdj_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = StAdj_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = StAdj_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_struct >::from_cdr_buffer(BodyDomain::StAdj_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = StAdj_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::StAdj_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_struct >::reset_sample(BodyDomain::StAdj_Ctrl_struct& sample) 
        {
            sample.FLSeatFBAdj_Act(0);
            sample.FLSeatBackrestAdj_Act(0);
            sample.FLSeatHgtAdj_Act(0);
            sample.FLSeatCshnAngAdj_Act(0);
            sample.FLLegAngCshnExtAdj_Act(0);
            sample.FLSeatLegLengthAdj_Act(0);
            sample.FRSeatFBAdj_Act(0);
            sample.FRSeatBackrestAdj_Act(0);
            sample.FRSeatHgtAdj_Act(0);
            sample.FRSeatCshnAngAdj_Act(0);
            sample.FRLegAngCshnExtAdj_Act(0);
            sample.FRSeatLegLengthAdj_Act(0);
            sample.FLSeatFBPst_Req(0);
            sample.FLSeatBackresPst_Req(0);
            sample.FLSeatHgtPst_Req(0);
            sample.FLSeatCshnAngPst_Req(0);
            sample.FLLegAngCshnExtPst_Req(0);
            sample.FLSeatLegLengthPst_Req(0);
            sample.FRSeatFBPst_Req(0);
            sample.FRSeatBackrestPst_Req(0);
            sample.FRSeatHgtPst_Req(0);
            sample.FRSeatCshnAngPst_Req(0);
            sample.FRLegAngCshnExtPst_Req(0);
            sample.FRSeatLegLengthPst_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_struct >::allocate_sample(BodyDomain::StAdj_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::StAdj_Ctrl_SOA_structPlugin_new,
                BodyDomain::StAdj_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::StAdj_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::StAdj_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = StAdj_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = StAdj_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::StAdj_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = StAdj_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::StAdj_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_SOA_struct >::reset_sample(BodyDomain::StAdj_Ctrl_SOA_struct& sample) 
        {
            sample.StAdj_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::StAdj_Ctrl_SOA_struct >::allocate_sample(BodyDomain::StAdj_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::StAdj_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::StAdj_St_structPlugin_new,
                BodyDomain::StAdj_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::StAdj_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::StAdj_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = StAdj_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = StAdj_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::StAdj_St_struct >::from_cdr_buffer(BodyDomain::StAdj_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = StAdj_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::StAdj_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::StAdj_St_struct >::reset_sample(BodyDomain::StAdj_St_struct& sample) 
        {
            sample.FLSeatFBMv_St(0);
            sample.FLSeatBackrestMv_St(0);
            sample.FLSeatHgtMv_St(0);
            sample.FLSeatCshnAngMv_St(0);
            sample.FLLegAngCshnExtMv_St(0);
            sample.FLSeatLegLengthMv_St(0);
            sample.FRSeatFBMv_St(0);
            sample.FRSeatBackrestMv_St(0);
            sample.FRSeatHgtMv_St(0);
            sample.FRSeatCshnAngMv_St(0);
            sample.FRLegAngCshnExtMv_St(0);
            sample.FRSeatLegLengthMv_St(0);
            sample.FLSeatFBPst_Val(0);
            sample.FLSeatBackrestPst_Val(0);
            sample.FLSeatHgtPst_Val(0);
            sample.FLSeatCshnAngPst_Val(0);
            sample.FLLegAngCshnExtPst_Val(0);
            sample.FLSeatLegLengthPst_Val(0);
            sample.FRSeatFBPst_Val(0);
            sample.FRSeatBackrestPst_Val(0);
            sample.FRSeatHgtPst_Val(0);
            sample.FRSeatCshnAngPst_Val(0);
            sample.FRLegAngCshnExtPst_Val(0);
            sample.FRSeatLegLengthPst_Val(0);
        }

        void topic_type_support< BodyDomain::StAdj_St_struct >::allocate_sample(BodyDomain::StAdj_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::StAdj_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::StAdj_St_Get_structPlugin_new,
                BodyDomain::StAdj_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::StAdj_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::StAdj_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = StAdj_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = StAdj_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::StAdj_St_Get_struct >::from_cdr_buffer(BodyDomain::StAdj_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = StAdj_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::StAdj_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::StAdj_St_Get_struct >::reset_sample(BodyDomain::StAdj_St_Get_struct& sample) 
        {
            sample.StPstBit(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::StAdj_St_Get_struct >::allocate_sample(BodyDomain::StAdj_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::StAdj_Srv_Req_UnionPlugin_new,
                BodyDomain::StAdj_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::StAdj_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::StAdj_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = StAdj_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = StAdj_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Req_Union >::from_cdr_buffer(BodyDomain::StAdj_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = StAdj_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::StAdj_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Req_Union >::reset_sample(BodyDomain::StAdj_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.StAdj_Ctrl());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.StAdj_St_Get());

            sample._d() = BodyDomain::StAdj_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Req_Union >::allocate_sample(BodyDomain::StAdj_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.StAdj_Ctrl(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.StAdj_St_Get(),  -1, -1);

            sample._d() = BodyDomain::StAdj_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::StAdj_Srv_Resp_UnionPlugin_new,
                BodyDomain::StAdj_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::StAdj_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::StAdj_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = StAdj_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = StAdj_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::StAdj_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = StAdj_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::StAdj_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Resp_Union >::reset_sample(BodyDomain::StAdj_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.StAdj_Ctrl_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.StAdj_St_Get_SOA());

            sample._d() = BodyDomain::StAdj_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::StAdj_Srv_Resp_Union >::allocate_sample(BodyDomain::StAdj_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.StAdj_Ctrl_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.StAdj_St_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::StAdj_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::DrLth_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_Set_structPlugin_new,
                BodyDomain::DrLth_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_Set_struct >::from_cdr_buffer(BodyDomain::DrLth_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_Set_struct >::reset_sample(BodyDomain::DrLth_Set_struct& sample) 
        {
            sample.TDrOpenAngSet_Act(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::DrLth_Set_struct >::allocate_sample(BodyDomain::DrLth_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::DrLth_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_Get_structPlugin_new,
                BodyDomain::DrLth_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_Get_struct >::from_cdr_buffer(BodyDomain::DrLth_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_Get_struct >::reset_sample(BodyDomain::DrLth_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::DrLth_Get_struct >::allocate_sample(BodyDomain::DrLth_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::DrLth_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_Rsp_structPlugin_new,
                BodyDomain::DrLth_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_Rsp_struct >::from_cdr_buffer(BodyDomain::DrLth_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_Rsp_struct >::reset_sample(BodyDomain::DrLth_Rsp_struct& sample) 
        {
            sample.TDrOpenAngSet_Rsp(0);
        }

        void topic_type_support< BodyDomain::DrLth_Rsp_struct >::allocate_sample(BodyDomain::DrLth_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::DrLth_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_St_Get_structPlugin_new,
                BodyDomain::DrLth_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_St_Get_struct >::from_cdr_buffer(BodyDomain::DrLth_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_St_Get_struct >::reset_sample(BodyDomain::DrLth_St_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::DrLth_St_Get_struct >::allocate_sample(BodyDomain::DrLth_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_Ctrl_structPlugin_new,
                BodyDomain::DrLth_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_struct >::from_cdr_buffer(BodyDomain::DrLth_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_struct >::reset_sample(BodyDomain::DrLth_Ctrl_struct& sample) 
        {
            sample.TDoorBtn_Act(0);
            sample.TDoorPos_Act(0);
            sample.FLDoorBtn_Act(0);
            sample.RLDoorBtn_Act(0);
            sample.FRDoorBtn_Act(0);
            sample.RRDoorBtn_Act(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_struct >::allocate_sample(BodyDomain::DrLth_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_Ctrl_SOA_structPlugin_new,
                BodyDomain::DrLth_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::DrLth_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_SOA_struct >::reset_sample(BodyDomain::DrLth_Ctrl_SOA_struct& sample) 
        {
            sample.DrLth_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::DrLth_Ctrl_SOA_struct >::allocate_sample(BodyDomain::DrLth_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::DrLth_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_St_structPlugin_new,
                BodyDomain::DrLth_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_St_struct >::from_cdr_buffer(BodyDomain::DrLth_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_St_struct >::reset_sample(BodyDomain::DrLth_St_struct& sample) 
        {
            sample.FLDoor_st(0);
            sample.RLDoor_st(0);
            sample.FRDoor_st(0);
            sample.RRDoor_st(0);
            sample.TDoor_st(0);
            sample.FLNomDoor_St(0);
            sample.RLNomDoor_St(0);
            sample.FRNomDoor_St(0);
            sample.RRNomDoor_St(0);
            sample.TDoorNominal_St(0);
            sample.TDrWrk_St(0);
            sample.TDrTripPst_Val(0);
            sample.FLDrStpRsn_st(0);
            sample.RLDrStpRsn_st(0);
            sample.FRDrStpRsn_st(0);
            sample.RRDrStpRsn_st(0);
            sample.TDrStpRsn_st(0);
            sample.TDoorTip_St(0);
            sample.HoodLatch_St(0);
        }

        void topic_type_support< BodyDomain::DrLth_St_struct >::allocate_sample(BodyDomain::DrLth_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_Srv_Req_UnionPlugin_new,
                BodyDomain::DrLth_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Req_Union >::from_cdr_buffer(BodyDomain::DrLth_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Req_Union >::reset_sample(BodyDomain::DrLth_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.DrLth_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.DrLth_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.DrLth_Ctrl());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.DrLth_St_Get());

            sample._d() = BodyDomain::DrLth_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Req_Union >::allocate_sample(BodyDomain::DrLth_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.DrLth_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.DrLth_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.DrLth_Ctrl(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.DrLth_St_Get(),  -1, -1);

            sample._d() = BodyDomain::DrLth_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DrLth_Srv_Resp_UnionPlugin_new,
                BodyDomain::DrLth_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DrLth_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DrLth_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrLth_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrLth_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::DrLth_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrLth_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DrLth_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Resp_Union >::reset_sample(BodyDomain::DrLth_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.DrLth_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.DrLth_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.DrLth_Ctrl_SOA());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.DrLth_St_Get_SOA());

            sample._d() = BodyDomain::DrLth_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::DrLth_Srv_Resp_Union >::allocate_sample(BodyDomain::DrLth_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.DrLth_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.DrLth_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.DrLth_Ctrl_SOA(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.DrLth_St_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::DrLth_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Hdl_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Hdl_St_Get_structPlugin_new,
                BodyDomain::Hdl_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Hdl_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Hdl_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Hdl_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Hdl_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Hdl_St_Get_struct >::from_cdr_buffer(BodyDomain::Hdl_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Hdl_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Hdl_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::Hdl_St_Get_struct >::reset_sample(BodyDomain::Hdl_St_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::Hdl_St_Get_struct >::allocate_sample(BodyDomain::Hdl_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::Hdl_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Hdl_St_structPlugin_new,
                BodyDomain::Hdl_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Hdl_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Hdl_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Hdl_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Hdl_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Hdl_St_struct >::from_cdr_buffer(BodyDomain::Hdl_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Hdl_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Hdl_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::Hdl_St_struct >::reset_sample(BodyDomain::Hdl_St_struct& sample) 
        {
            sample.FLHdlPst_St(0);
            sample.RLHdlPst_St(0);
            sample.FRHdlPst_St(0);
            sample.RRHdlPst_St(0);
            sample.FLHdlStpRsn_St(0);
            sample.RLHdlStpRsn_St(0);
            sample.FRHdlStpRsn_St(0);
            sample.RRHdlStpRsn_St(0);
        }

        void topic_type_support< BodyDomain::Hdl_St_struct >::allocate_sample(BodyDomain::Hdl_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::InLt_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_Set_structPlugin_new,
                BodyDomain::InLt_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_Set_struct >::from_cdr_buffer(BodyDomain::InLt_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_Set_struct >::reset_sample(BodyDomain::InLt_Set_struct& sample) 
        {
            sample.TpLtAutoSet_Req(0);
            sample.TpLtClrSet_Req(0);
            sample.TpLtBrtSet_Req(0);
            sample.BckLtBrtSet_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::InLt_Set_struct >::allocate_sample(BodyDomain::InLt_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::InLt_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_Get_structPlugin_new,
                BodyDomain::InLt_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_Get_struct >::from_cdr_buffer(BodyDomain::InLt_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_Get_struct >::reset_sample(BodyDomain::InLt_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::InLt_Get_struct >::allocate_sample(BodyDomain::InLt_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::InLt_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_Rsp_structPlugin_new,
                BodyDomain::InLt_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_Rsp_struct >::from_cdr_buffer(BodyDomain::InLt_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_Rsp_struct >::reset_sample(BodyDomain::InLt_Rsp_struct& sample) 
        {
            sample.TpLtAutoSet_Rsp(0);
            sample.TpLtClrSet_Rsp(0);
            sample.TpLtBrtSet_Rsp(0);
            sample.BckLtBrtSet_Rsp(0);
        }

        void topic_type_support< BodyDomain::InLt_Rsp_struct >::allocate_sample(BodyDomain::InLt_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_Ctrl_structPlugin_new,
                BodyDomain::InLt_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_struct >::from_cdr_buffer(BodyDomain::InLt_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_struct >::reset_sample(BodyDomain::InLt_Ctrl_struct& sample) 
        {
            sample.TpLtBtn_Act(0);
            sample.TpLtSearch_Act(0);
            sample.FLTpLtRead_Act(0);
            sample.RLTpLtRead_Act(0);
            sample.FRTpLtRead_Act(0);
            sample.RRTpLtRead_Act(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_struct >::allocate_sample(BodyDomain::InLt_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_Ctrl_SOA_structPlugin_new,
                BodyDomain::InLt_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::InLt_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_SOA_struct >::reset_sample(BodyDomain::InLt_Ctrl_SOA_struct& sample) 
        {
            sample.InLt_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::InLt_Ctrl_SOA_struct >::allocate_sample(BodyDomain::InLt_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::InLt_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_St_Get_structPlugin_new,
                BodyDomain::InLt_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_St_Get_struct >::from_cdr_buffer(BodyDomain::InLt_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_St_Get_struct >::reset_sample(BodyDomain::InLt_St_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::InLt_St_Get_struct >::allocate_sample(BodyDomain::InLt_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::InLt_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_St_structPlugin_new,
                BodyDomain::InLt_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_St_struct >::from_cdr_buffer(BodyDomain::InLt_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_St_struct >::reset_sample(BodyDomain::InLt_St_struct& sample) 
        {
            sample.TpLtWrk_St(0);
            sample.TpLtSearch_St(0);
            sample.FLTpLtRead_St(0);
            sample.RLTpLtRead_St(0);
            sample.FRTpLtRead_St(0);
            sample.RRTpLtRead_St(0);
        }

        void topic_type_support< BodyDomain::InLt_St_struct >::allocate_sample(BodyDomain::InLt_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::InLt_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_Srv_Req_UnionPlugin_new,
                BodyDomain::InLt_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_Srv_Req_Union >::from_cdr_buffer(BodyDomain::InLt_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_Srv_Req_Union >::reset_sample(BodyDomain::InLt_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.InLt_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.InLt_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.InLt_Ctrl());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.InLt_St_Get());

            sample._d() = BodyDomain::InLt_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::InLt_Srv_Req_Union >::allocate_sample(BodyDomain::InLt_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.InLt_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.InLt_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.InLt_Ctrl(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.InLt_St_Get(),  -1, -1);

            sample._d() = BodyDomain::InLt_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::InLt_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::InLt_Srv_Resp_UnionPlugin_new,
                BodyDomain::InLt_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::InLt_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::InLt_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = InLt_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = InLt_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::InLt_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::InLt_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = InLt_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::InLt_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::InLt_Srv_Resp_Union >::reset_sample(BodyDomain::InLt_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.InLt_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.InLt_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.InLt_Ctrl_SOA());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.InLt_St_Get_SOA());

            sample._d() = BodyDomain::InLt_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::InLt_Srv_Resp_Union >::allocate_sample(BodyDomain::InLt_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.InLt_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.InLt_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.InLt_Ctrl_SOA(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.InLt_St_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::InLt_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::AmLt_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::AmLt_Set_structPlugin_new,
                BodyDomain::AmLt_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::AmLt_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::AmLt_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AmLt_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AmLt_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::AmLt_Set_struct >::from_cdr_buffer(BodyDomain::AmLt_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AmLt_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::AmLt_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::AmLt_Set_struct >::reset_sample(BodyDomain::AmLt_Set_struct& sample) 
        {
            sample.AmLtBtn_Set(0);
            sample.AmLtBrt_Set(0);
            sample.AmLtMode_Set(0);
            sample.AmLtCustomClr_Set(0);
            sample.AmLtAutoBrt_Set(0);
            sample.AmLtBrtFollow_Set(0);
            sample.AmLtVoice_Set(0);
            sample.Welcome_Set(0);
            sample.AmLtMusic_Set(0);
            sample.AmLtTemp_Set(0);
            sample.AmLtMedRedVal_Set(0);
            sample.AmLtMedGreenVal_Set(0);
            sample.AmLtMedBlueVal_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::AmLt_Set_struct >::allocate_sample(BodyDomain::AmLt_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::AmLt_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::AmLt_Get_structPlugin_new,
                BodyDomain::AmLt_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::AmLt_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::AmLt_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AmLt_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AmLt_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::AmLt_Get_struct >::from_cdr_buffer(BodyDomain::AmLt_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AmLt_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::AmLt_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::AmLt_Get_struct >::reset_sample(BodyDomain::AmLt_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::AmLt_Get_struct >::allocate_sample(BodyDomain::AmLt_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::AmLt_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::AmLt_Rsp_structPlugin_new,
                BodyDomain::AmLt_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::AmLt_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::AmLt_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AmLt_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AmLt_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::AmLt_Rsp_struct >::from_cdr_buffer(BodyDomain::AmLt_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AmLt_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::AmLt_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::AmLt_Rsp_struct >::reset_sample(BodyDomain::AmLt_Rsp_struct& sample) 
        {
            sample.AmLtBtn_Rsp(0);
            sample.AmLtBrt_Rsp(0);
            sample.AmLtMode_Rsp(0);
            sample.AmLtCustomClr_Rsp(0);
            sample.AmLtAutoBrt_Rsp(0);
            sample.AmLtBrtFollow_Rsp(0);
            sample.AmLtVoice_Rsp(0);
            sample.AmLtWelcome_Rsp(0);
            sample.AmLtMusic_Rsp(0);
            sample.AmLtTemp_Rsp(0);
        }

        void topic_type_support< BodyDomain::AmLt_Rsp_struct >::allocate_sample(BodyDomain::AmLt_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::AmLt_Srv_Req_UnionPlugin_new,
                BodyDomain::AmLt_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::AmLt_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::AmLt_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AmLt_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AmLt_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Req_Union >::from_cdr_buffer(BodyDomain::AmLt_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AmLt_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::AmLt_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Req_Union >::reset_sample(BodyDomain::AmLt_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.AmLt_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.AmLt_Get());

            sample._d() = BodyDomain::AmLt_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Req_Union >::allocate_sample(BodyDomain::AmLt_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.AmLt_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.AmLt_Get(),  -1, -1);

            sample._d() = BodyDomain::AmLt_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::AmLt_Srv_Resp_UnionPlugin_new,
                BodyDomain::AmLt_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::AmLt_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::AmLt_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AmLt_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AmLt_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::AmLt_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AmLt_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::AmLt_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Resp_Union >::reset_sample(BodyDomain::AmLt_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.AmLt_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.AmLt_Get_SOA());

            sample._d() = BodyDomain::AmLt_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::AmLt_Srv_Resp_Union >::allocate_sample(BodyDomain::AmLt_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.AmLt_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.AmLt_Get_SOA(),  -1, -1);

            sample._d() = BodyDomain::AmLt_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_Struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::ExtLt_Ctrl_StructPlugin_new,
                BodyDomain::ExtLt_Ctrl_StructPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::ExtLt_Ctrl_Struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::ExtLt_Ctrl_Struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = ExtLt_Ctrl_StructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = ExtLt_Ctrl_StructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_Struct >::from_cdr_buffer(BodyDomain::ExtLt_Ctrl_Struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = ExtLt_Ctrl_StructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::ExtLt_Ctrl_Struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_Struct >::reset_sample(BodyDomain::ExtLt_Ctrl_Struct& sample) 
        {
            sample.TurnLight_Req(0);
            sample.EtnlLgt_Req(0);
            sample.HighBeam_Req(0);
            sample.HDBI_RearFogBm_Req(0);
            sample.FollowMeHome_Req(0);
            sample.LgtHeightAdjSet_Req(0);
            sample.AHB_Req(0);
            sample.HzrdSW_St(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_Struct >::allocate_sample(BodyDomain::ExtLt_Ctrl_Struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::ExtLt_Ctrl_SOA_structPlugin_new,
                BodyDomain::ExtLt_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::ExtLt_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::ExtLt_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = ExtLt_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = ExtLt_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::ExtLt_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = ExtLt_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::ExtLt_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_SOA_struct >::reset_sample(BodyDomain::ExtLt_Ctrl_SOA_struct& sample) 
        {
            sample.ExtLt_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::ExtLt_Ctrl_SOA_struct >::allocate_sample(BodyDomain::ExtLt_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::ExtLt_St_Struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::ExtLt_St_StructPlugin_new,
                BodyDomain::ExtLt_St_StructPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::ExtLt_St_Struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::ExtLt_St_Struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = ExtLt_St_StructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = ExtLt_St_StructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::ExtLt_St_Struct >::from_cdr_buffer(BodyDomain::ExtLt_St_Struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = ExtLt_St_StructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::ExtLt_St_Struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::ExtLt_St_Struct >::reset_sample(BodyDomain::ExtLt_St_Struct& sample) 
        {
            sample.LeftTurnLgt_Req(0);
            sample.RgtTurnLgt_Req(0);
            sample.FLPstnLgt_Req(0);
            sample.FRPstnLgt_Req(0);
            sample.RLPstnLgt_Req(0);
            sample.RRPstnLgt_Req(0);
            sample.HighLgt_Req(0);
            sample.LwLgt_Req(0);
            sample.HDBM_RearFogBm_Req(0);
            sample.EtnlLgt_Rsp(0);
            sample.FollowMeHome_Rsp(0);
            sample.LgtHeightAdjSet_Rsp(0);
            sample.AHB_Rsp(0);
        }

        void topic_type_support< BodyDomain::ExtLt_St_Struct >::allocate_sample(BodyDomain::ExtLt_St_Struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdSf_Ctrl_structPlugin_new,
                BodyDomain::BdSf_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdSf_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdSf_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdSf_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdSf_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_struct >::from_cdr_buffer(BodyDomain::BdSf_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdSf_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdSf_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_struct >::reset_sample(BodyDomain::BdSf_Ctrl_struct& sample) 
        {
            sample.LChdlock_Req(0);
            sample.RChdlock_Req(0);
            sample.ChdLockMode_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_struct >::allocate_sample(BodyDomain::BdSf_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdSf_Ctrl_SOA_structPlugin_new,
                BodyDomain::BdSf_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdSf_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdSf_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdSf_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdSf_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::BdSf_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdSf_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdSf_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_SOA_struct >::reset_sample(BodyDomain::BdSf_Ctrl_SOA_struct& sample) 
        {
            sample.BdSf_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::BdSf_Ctrl_SOA_struct >::allocate_sample(BodyDomain::BdSf_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdSf_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdSf_St_structPlugin_new,
                BodyDomain::BdSf_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdSf_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdSf_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdSf_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdSf_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdSf_St_struct >::from_cdr_buffer(BodyDomain::BdSf_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdSf_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdSf_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdSf_St_struct >::reset_sample(BodyDomain::BdSf_St_struct& sample) 
        {
            sample.LChdlock_st(0);
            sample.RChdlock_st(0);
            sample.ChdLockMode_st(0);
        }

        void topic_type_support< BodyDomain::BdSf_St_struct >::allocate_sample(BodyDomain::BdSf_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::CgC_Ctrl_structPlugin_new,
                BodyDomain::CgC_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::CgC_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::CgC_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CgC_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CgC_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_struct >::from_cdr_buffer(BodyDomain::CgC_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CgC_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::CgC_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_struct >::reset_sample(BodyDomain::CgC_Ctrl_struct& sample) 
        {
            sample.ChrgCapCtrlSW_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_struct >::allocate_sample(BodyDomain::CgC_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::CgC_Ctrl_SOA_structPlugin_new,
                BodyDomain::CgC_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::CgC_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::CgC_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CgC_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CgC_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::CgC_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CgC_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::CgC_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_SOA_struct >::reset_sample(BodyDomain::CgC_Ctrl_SOA_struct& sample) 
        {
            sample.CgC_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::CgC_Ctrl_SOA_struct >::allocate_sample(BodyDomain::CgC_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::CgC_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::CgC_St_structPlugin_new,
                BodyDomain::CgC_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::CgC_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::CgC_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CgC_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CgC_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::CgC_St_struct >::from_cdr_buffer(BodyDomain::CgC_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CgC_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::CgC_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::CgC_St_struct >::reset_sample(BodyDomain::CgC_St_struct& sample) 
        {
            sample.ChrgCap_St(0);
            sample.ChrgCapMv_St(0);
            sample.ChrgCapPst_St(0);
            sample.ChrgCapStpRsn_St(0);
        }

        void topic_type_support< BodyDomain::CgC_St_struct >::allocate_sample(BodyDomain::CgC_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_Ctrl_structPlugin_new,
                BodyDomain::BdCft_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_struct >::from_cdr_buffer(BodyDomain::BdCft_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_struct >::reset_sample(BodyDomain::BdCft_Ctrl_struct& sample) 
        {
            sample.FLLumbSuppUDAdj_Act(0);
            sample.FLLumbSuppFBAdj_Act(0);
            sample.FRLumbSuppUDAdj_Act(0);
            sample.FRLumbSuppFBAdj_Act(0);
            sample.FLSeatShoulderAdj_Act(0);
            sample.FRSeatShoulderAdj_Act(0);
            sample.FLSeatMsg_Act(0);
            sample.FLSeatMsgMode_Act(0);
            sample.FLSeatMsgStrth_Act(0);
            sample.FRSeatMsg_Act(0);
            sample.FRSeatMsgMode_Act(0);
            sample.FRSeatMsgStrth_Act(0);
            sample.FLSeatHt_Act(0);
            sample.FRSeatHt_Act(0);
            sample.SRLSeatHt_Act(0);
            sample.SRRSeatHt_Act(0);
            sample.FLSeatVtlt_Act(0);
            sample.FRSeatVtlt_Act(0);
            sample.SRLSeatVtlt_Act(0);
            sample.SRRSeatVtlt_Act(0);
            sample.SteerHt_Act(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_struct >::allocate_sample(BodyDomain::BdCft_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_Ctrl_SOA_structPlugin_new,
                BodyDomain::BdCft_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::BdCft_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_SOA_struct >::reset_sample(BodyDomain::BdCft_Ctrl_SOA_struct& sample) 
        {
            sample.BdCft_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::BdCft_Ctrl_SOA_struct >::allocate_sample(BodyDomain::BdCft_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdCft_St_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_St_Get_structPlugin_new,
                BodyDomain::BdCft_St_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_St_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_St_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_St_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_St_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_St_Get_struct >::from_cdr_buffer(BodyDomain::BdCft_St_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_St_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_St_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_St_Get_struct >::reset_sample(BodyDomain::BdCft_St_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdCft_St_Get_struct >::allocate_sample(BodyDomain::BdCft_St_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdCft_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_St_structPlugin_new,
                BodyDomain::BdCft_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_St_struct >::from_cdr_buffer(BodyDomain::BdCft_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_St_struct >::reset_sample(BodyDomain::BdCft_St_struct& sample) 
        {
            sample.FLLumbSuppFBMv_St(0);
            sample.FLLumbSuppUDMv_St(0);
            sample.FRLumbSuppFBMv_St(0);
            sample.FRLumbSuppUDMv_St(0);
            sample.FLSeatShoulderAdj_St(0);
            sample.FRSeatShoulderAdj_St(0);
            sample.FLSeatMsg_St(0);
            sample.FLSeatMsgMode_St(0);
            sample.FLSeatMsgStrth_St(0);
            sample.FRSeatMsg_St(0);
            sample.FRSeatMsgMode_St(0);
            sample.FRSeatMsgStrth_St(0);
            sample.FLSeatHt_St(0);
            sample.FRSeatHt_St(0);
            sample.SRLSeatHt_St(0);
            sample.SRRSeatHt_St(0);
            sample.FLSeatVtlt_St(0);
            sample.FRSeatVtlt_St(0);
            sample.SRLSeatVtlt_St(0);
            sample.SRRSeatVtlt_St(0);
            sample.SteerHt_St(0);
        }

        void topic_type_support< BodyDomain::BdCft_St_struct >::allocate_sample(BodyDomain::BdCft_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdCft_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_Set_structPlugin_new,
                BodyDomain::BdCft_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_Set_struct >::from_cdr_buffer(BodyDomain::BdCft_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_Set_struct >::reset_sample(BodyDomain::BdCft_Set_struct& sample) 
        {
            sample.SeatAutoHeat_Set(0);
            sample.StreeAutoHeat_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BdCft_Set_struct >::allocate_sample(BodyDomain::BdCft_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BdCft_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_Rsp_structPlugin_new,
                BodyDomain::BdCft_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_Rsp_struct >::from_cdr_buffer(BodyDomain::BdCft_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_Rsp_struct >::reset_sample(BodyDomain::BdCft_Rsp_struct& sample) 
        {
            sample.SeatAutoHeat_Rsp(0);
            sample.StreeAutoHeat_Rsp(0);
        }

        void topic_type_support< BodyDomain::BdCft_Rsp_struct >::allocate_sample(BodyDomain::BdCft_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_Srv_Req_UnionPlugin_new,
                BodyDomain::BdCft_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Req_Union >::from_cdr_buffer(BodyDomain::BdCft_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Req_Union >::reset_sample(BodyDomain::BdCft_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BdCft_Ctrl());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BdCft_St_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BdCft_Set());

            sample._d() = BodyDomain::BdCft_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Req_Union >::allocate_sample(BodyDomain::BdCft_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BdCft_Ctrl(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BdCft_St_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BdCft_Set(),  -1, -1);

            sample._d() = BodyDomain::BdCft_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BdCft_Srv_Resp_UnionPlugin_new,
                BodyDomain::BdCft_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BdCft_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BdCft_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BdCft_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BdCft_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::BdCft_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BdCft_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BdCft_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Resp_Union >::reset_sample(BodyDomain::BdCft_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BdCft_Ctrl_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BdCft_St_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BdCft_Set_SOA());

            sample._d() = BodyDomain::BdCft_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BdCft_Srv_Resp_Union >::allocate_sample(BodyDomain::BdCft_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BdCft_Ctrl_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BdCft_St_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BdCft_Set_SOA(),  -1, -1);

            sample._d() = BodyDomain::BdCft_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::BotSeatSync_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotSeatSync_Set_structPlugin_new,
                BodyDomain::BotSeatSync_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotSeatSync_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotSeatSync_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotSeatSync_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotSeatSync_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotSeatSync_Set_struct >::from_cdr_buffer(BodyDomain::BotSeatSync_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotSeatSync_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotSeatSync_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotSeatSync_Set_struct >::reset_sample(BodyDomain::BotSeatSync_Set_struct& sample) 
        {
            sample.SeatSync_Set(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BotSeatSync_Set_struct >::allocate_sample(BodyDomain::BotSeatSync_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BotSeatSync_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotSeatSync_Get_structPlugin_new,
                BodyDomain::BotSeatSync_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotSeatSync_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotSeatSync_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotSeatSync_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotSeatSync_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotSeatSync_Get_struct >::from_cdr_buffer(BodyDomain::BotSeatSync_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotSeatSync_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotSeatSync_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotSeatSync_Get_struct >::reset_sample(BodyDomain::BotSeatSync_Get_struct& sample) 
        {
            sample.constant(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BotSeatSync_Get_struct >::allocate_sample(BodyDomain::BotSeatSync_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BotSeatSync_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotSeatSync_Rsp_structPlugin_new,
                BodyDomain::BotSeatSync_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotSeatSync_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotSeatSync_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotSeatSync_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotSeatSync_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotSeatSync_Rsp_struct >::from_cdr_buffer(BodyDomain::BotSeatSync_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotSeatSync_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotSeatSync_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotSeatSync_Rsp_struct >::reset_sample(BodyDomain::BotSeatSync_Rsp_struct& sample) 
        {
            sample.SeatSync_Rsp(0);
        }

        void topic_type_support< BodyDomain::BotSeatSync_Rsp_struct >::allocate_sample(BodyDomain::BotSeatSync_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::TargetPointSubstruct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::TargetPointSubstructPlugin_new,
                BodyDomain::TargetPointSubstructPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::TargetPointSubstruct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::TargetPointSubstruct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = TargetPointSubstructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = TargetPointSubstructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::TargetPointSubstruct >::from_cdr_buffer(BodyDomain::TargetPointSubstruct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = TargetPointSubstructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::TargetPointSubstruct from cdr buffer");
        }

        void topic_type_support< BodyDomain::TargetPointSubstruct >::reset_sample(BodyDomain::TargetPointSubstruct& sample) 
        {
            sample.TargetPoint_Num(0);
            sample.MovePosition_Rz(0);
            sample.TargetPointTime_Increase(0);
        }

        void topic_type_support< BodyDomain::TargetPointSubstruct >::allocate_sample(BodyDomain::TargetPointSubstruct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BotScript_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotScript_Ctrl_structPlugin_new,
                BodyDomain::BotScript_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotScript_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotScript_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotScript_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotScript_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotScript_Ctrl_struct >::from_cdr_buffer(BodyDomain::BotScript_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotScript_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotScript_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotScript_Ctrl_struct >::reset_sample(BodyDomain::BotScript_Ctrl_struct& sample) 
        {
            sample.ScriptID(0);
            sample.MotionScript(0);
            ::rti::topic::reset_sample(sample.TargetPointSequence());
        }

        void topic_type_support< BodyDomain::BotScript_Ctrl_struct >::allocate_sample(BodyDomain::BotScript_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.TargetPointSequence(),  252L, -1);
        }

        void topic_type_support< BodyDomain::BotScript_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotScript_St_structPlugin_new,
                BodyDomain::BotScript_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotScript_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotScript_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotScript_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotScript_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotScript_St_struct >::from_cdr_buffer(BodyDomain::BotScript_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotScript_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotScript_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotScript_St_struct >::reset_sample(BodyDomain::BotScript_St_struct& sample) 
        {
            sample.TransScript_st(0);
        }

        void topic_type_support< BodyDomain::BotScript_St_struct >::allocate_sample(BodyDomain::BotScript_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotMotion_Ctrl_structPlugin_new,
                BodyDomain::BotMotion_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotMotion_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotMotion_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotMotion_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotMotion_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_struct >::from_cdr_buffer(BodyDomain::BotMotion_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotMotion_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotMotion_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_struct >::reset_sample(BodyDomain::BotMotion_Ctrl_struct& sample) 
        {
            sample.RelCallMotionScript_Ctrl(0);
            sample.AbsCallMotionScript_Ctrl(0);
            sample.JogRight_Ctrl(0);
            sample.JogLeft_Ctrl(0);
            sample.ComfortPosition_Ctrl(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_struct >::allocate_sample(BodyDomain::BotMotion_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotMotion_Ctrl_SOA_structPlugin_new,
                BodyDomain::BotMotion_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotMotion_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotMotion_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotMotion_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotMotion_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_SOA_struct >::from_cdr_buffer(BodyDomain::BotMotion_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotMotion_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotMotion_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_SOA_struct >::reset_sample(BodyDomain::BotMotion_Ctrl_SOA_struct& sample) 
        {
            sample.BotMotion_Ctrl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::BotMotion_Ctrl_SOA_struct >::allocate_sample(BodyDomain::BotMotion_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::BotMotion_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::BotMotion_St_structPlugin_new,
                BodyDomain::BotMotion_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::BotMotion_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::BotMotion_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = BotMotion_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = BotMotion_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::BotMotion_St_struct >::from_cdr_buffer(BodyDomain::BotMotion_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = BotMotion_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::BotMotion_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::BotMotion_St_struct >::reset_sample(BodyDomain::BotMotion_St_struct& sample) 
        {
            sample.Main_St(0);
            sample.Sub_St(0);
            sample.RotationAngle_Z_St(0);
            sample.MotionCommand_St(0);
            sample.ComfortPosition_St(0);
            sample.ScriptExeFinish_Rsp(0);
        }

        void topic_type_support< BodyDomain::BotMotion_St_struct >::allocate_sample(BodyDomain::BotMotion_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::Bot_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Bot_Srv_Req_UnionPlugin_new,
                BodyDomain::Bot_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Bot_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Bot_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Bot_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Bot_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Bot_Srv_Req_Union >::from_cdr_buffer(BodyDomain::Bot_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Bot_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Bot_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::Bot_Srv_Req_Union >::reset_sample(BodyDomain::Bot_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BotSeatSync_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BotSeatSync_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BotMotion_Ctrl());

            sample._d() = BodyDomain::Bot_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Bot_Srv_Req_Union >::allocate_sample(BodyDomain::Bot_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BotSeatSync_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BotSeatSync_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BotMotion_Ctrl(),  -1, -1);

            sample._d() = BodyDomain::Bot_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Bot_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Bot_Srv_Resp_UnionPlugin_new,
                BodyDomain::Bot_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Bot_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Bot_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Bot_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Bot_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Bot_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::Bot_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Bot_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Bot_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::Bot_Srv_Resp_Union >::reset_sample(BodyDomain::Bot_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.BotSeatSync_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.BotSeatSync_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.BotMotion_Ctrl_SOA());

            sample._d() = BodyDomain::Bot_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Bot_Srv_Resp_Union >::allocate_sample(BodyDomain::Bot_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.BotSeatSync_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.BotSeatSync_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.BotMotion_Ctrl_SOA(),  -1, -1);

            sample._d() = BodyDomain::Bot_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::DKLst_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DKLst_Get_structPlugin_new,
                BodyDomain::DKLst_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DKLst_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DKLst_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DKLst_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DKLst_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DKLst_Get_struct >::from_cdr_buffer(BodyDomain::DKLst_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DKLst_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DKLst_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DKLst_Get_struct >::reset_sample(BodyDomain::DKLst_Get_struct& sample) 
        {
            sample.DKLst_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::DKLst_Get_struct >::allocate_sample(BodyDomain::DKLst_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::DigitalKeyIDArray >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DigitalKeyIDArrayPlugin_new,
                BodyDomain::DigitalKeyIDArrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DigitalKeyIDArray >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DigitalKeyIDArray& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DigitalKeyIDArrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DigitalKeyIDArrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DigitalKeyIDArray >::from_cdr_buffer(BodyDomain::DigitalKeyIDArray& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DigitalKeyIDArrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DigitalKeyIDArray from cdr buffer");
        }

        void topic_type_support< BodyDomain::DigitalKeyIDArray >::reset_sample(BodyDomain::DigitalKeyIDArray& sample) 
        {
            ::rti::topic::reset_sample(sample.DigitalKeyID());
        }

        void topic_type_support< BodyDomain::DigitalKeyIDArray >::allocate_sample(BodyDomain::DigitalKeyIDArray& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.DigitalKeyID(),  -1, -1);
        }

        void topic_type_support< BodyDomain::DKLstSubstruct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DKLstSubstructPlugin_new,
                BodyDomain::DKLstSubstructPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DKLstSubstruct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DKLstSubstruct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DKLstSubstructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DKLstSubstructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DKLstSubstruct >::from_cdr_buffer(BodyDomain::DKLstSubstruct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DKLstSubstructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DKLstSubstruct from cdr buffer");
        }

        void topic_type_support< BodyDomain::DKLstSubstruct >::reset_sample(BodyDomain::DKLstSubstruct& sample) 
        {
            ::rti::topic::reset_sample(sample.DigitalKeyID());
            sample.DigitalKey_St(0);
            sample.DigitalKeyName("");
            sample.DigitalKeyAuth_St(0);
        }

        void topic_type_support< BodyDomain::DKLstSubstruct >::allocate_sample(BodyDomain::DKLstSubstruct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.DigitalKeyID(),  -1, -1);
            ::rti::topic::allocate_sample(sample.DigitalKeyName(),  -1, 20L);
        }

        void topic_type_support< BodyDomain::DKLst_Rsp_array >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::DKLst_Rsp_arrayPlugin_new,
                BodyDomain::DKLst_Rsp_arrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::DKLst_Rsp_array >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::DKLst_Rsp_array& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DKLst_Rsp_arrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DKLst_Rsp_arrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::DKLst_Rsp_array >::from_cdr_buffer(BodyDomain::DKLst_Rsp_array& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DKLst_Rsp_arrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::DKLst_Rsp_array from cdr buffer");
        }

        void topic_type_support< BodyDomain::DKLst_Rsp_array >::reset_sample(BodyDomain::DKLst_Rsp_array& sample) 
        {
            ::rti::topic::reset_sample(sample.DKLst());
        }

        void topic_type_support< BodyDomain::DKLst_Rsp_array >::allocate_sample(BodyDomain::DKLst_Rsp_array& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.DKLst(),  16L, -1);
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyLst_Get_structPlugin_new,
                BodyDomain::NFCKeyLst_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyLst_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyLst_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyLst_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyLst_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Get_struct >::from_cdr_buffer(BodyDomain::NFCKeyLst_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyLst_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyLst_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Get_struct >::reset_sample(BodyDomain::NFCKeyLst_Get_struct& sample) 
        {
            sample.NFCKeyLst_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Get_struct >::allocate_sample(BodyDomain::NFCKeyLst_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::NFCCardIDArray >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCCardIDArrayPlugin_new,
                BodyDomain::NFCCardIDArrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCCardIDArray >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCCardIDArray& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCCardIDArrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCCardIDArrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCCardIDArray >::from_cdr_buffer(BodyDomain::NFCCardIDArray& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCCardIDArrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCCardIDArray from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCCardIDArray >::reset_sample(BodyDomain::NFCCardIDArray& sample) 
        {
            ::rti::topic::reset_sample(sample.NFCCardID());
        }

        void topic_type_support< BodyDomain::NFCCardIDArray >::allocate_sample(BodyDomain::NFCCardIDArray& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.NFCCardID(),  -1, -1);
        }

        void topic_type_support< BodyDomain::NFCKeyLstSubstruct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyLstSubstructPlugin_new,
                BodyDomain::NFCKeyLstSubstructPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyLstSubstruct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyLstSubstruct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyLstSubstructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyLstSubstructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyLstSubstruct >::from_cdr_buffer(BodyDomain::NFCKeyLstSubstruct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyLstSubstructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyLstSubstruct from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyLstSubstruct >::reset_sample(BodyDomain::NFCKeyLstSubstruct& sample) 
        {
            ::rti::topic::reset_sample(sample.NFCCardID());
            sample.NFCCard1_St(0);
            sample.NFCCardName("");
            sample.NFCCardAuth_St(0);
        }

        void topic_type_support< BodyDomain::NFCKeyLstSubstruct >::allocate_sample(BodyDomain::NFCKeyLstSubstruct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.NFCCardID(),  -1, -1);
            ::rti::topic::allocate_sample(sample.NFCCardName(),  -1, 20L);
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Rsp_array >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyLst_Rsp_arrayPlugin_new,
                BodyDomain::NFCKeyLst_Rsp_arrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyLst_Rsp_array >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyLst_Rsp_array& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyLst_Rsp_arrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyLst_Rsp_arrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Rsp_array >::from_cdr_buffer(BodyDomain::NFCKeyLst_Rsp_array& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyLst_Rsp_arrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyLst_Rsp_array from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Rsp_array >::reset_sample(BodyDomain::NFCKeyLst_Rsp_array& sample) 
        {
            ::rti::topic::reset_sample(sample.NFCKeyLst());
        }

        void topic_type_support< BodyDomain::NFCKeyLst_Rsp_array >::allocate_sample(BodyDomain::NFCKeyLst_Rsp_array& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.NFCKeyLst(),  10L, -1);
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyRename_Set_structPlugin_new,
                BodyDomain::NFCKeyRename_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyRename_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyRename_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyRename_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyRename_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Set_struct >::from_cdr_buffer(BodyDomain::NFCKeyRename_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyRename_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyRename_Set_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Set_struct >::reset_sample(BodyDomain::NFCKeyRename_Set_struct& sample) 
        {
            ::rti::topic::reset_sample(sample.NFCCardID());
            sample.NFCCardName("");
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Set_struct >::allocate_sample(BodyDomain::NFCKeyRename_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.NFCCardID(),  -1, -1);
            ::rti::topic::allocate_sample(sample.NFCCardName(),  -1, 20L);
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Rsp_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyRename_Rsp_structPlugin_new,
                BodyDomain::NFCKeyRename_Rsp_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyRename_Rsp_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyRename_Rsp_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyRename_Rsp_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyRename_Rsp_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Rsp_struct >::from_cdr_buffer(BodyDomain::NFCKeyRename_Rsp_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyRename_Rsp_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyRename_Rsp_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Rsp_struct >::reset_sample(BodyDomain::NFCKeyRename_Rsp_struct& sample) 
        {
            sample.NFCCardRenameRslt(0);
        }

        void topic_type_support< BodyDomain::NFCKeyRename_Rsp_struct >::allocate_sample(BodyDomain::NFCKeyRename_Rsp_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::PhysicalKeyLst_Get_structPlugin_new,
                BodyDomain::PhysicalKeyLst_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::PhysicalKeyLst_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::PhysicalKeyLst_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PhysicalKeyLst_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PhysicalKeyLst_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Get_struct >::from_cdr_buffer(BodyDomain::PhysicalKeyLst_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PhysicalKeyLst_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::PhysicalKeyLst_Get_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Get_struct >::reset_sample(BodyDomain::PhysicalKeyLst_Get_struct& sample) 
        {
            sample.PhysicalKeyLst_Req(0);
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Get_struct >::allocate_sample(BodyDomain::PhysicalKeyLst_Get_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::PhysicalKeyMACArray >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::PhysicalKeyMACArrayPlugin_new,
                BodyDomain::PhysicalKeyMACArrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::PhysicalKeyMACArray >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::PhysicalKeyMACArray& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PhysicalKeyMACArrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PhysicalKeyMACArrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::PhysicalKeyMACArray >::from_cdr_buffer(BodyDomain::PhysicalKeyMACArray& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PhysicalKeyMACArrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::PhysicalKeyMACArray from cdr buffer");
        }

        void topic_type_support< BodyDomain::PhysicalKeyMACArray >::reset_sample(BodyDomain::PhysicalKeyMACArray& sample) 
        {
            ::rti::topic::reset_sample(sample.PhysicalKeyMACAddr());
        }

        void topic_type_support< BodyDomain::PhysicalKeyMACArray >::allocate_sample(BodyDomain::PhysicalKeyMACArray& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.PhysicalKeyMACAddr(),  -1, -1);
        }

        void topic_type_support< BodyDomain::PhysicalKeyLstSubstruct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::PhysicalKeyLstSubstructPlugin_new,
                BodyDomain::PhysicalKeyLstSubstructPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::PhysicalKeyLstSubstruct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::PhysicalKeyLstSubstruct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PhysicalKeyLstSubstructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PhysicalKeyLstSubstructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::PhysicalKeyLstSubstruct >::from_cdr_buffer(BodyDomain::PhysicalKeyLstSubstruct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PhysicalKeyLstSubstructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::PhysicalKeyLstSubstruct from cdr buffer");
        }

        void topic_type_support< BodyDomain::PhysicalKeyLstSubstruct >::reset_sample(BodyDomain::PhysicalKeyLstSubstruct& sample) 
        {
            ::rti::topic::reset_sample(sample.PhysicalKeyMACAddr());
            sample.PhysicalKeyAuth_St(0);
        }

        void topic_type_support< BodyDomain::PhysicalKeyLstSubstruct >::allocate_sample(BodyDomain::PhysicalKeyLstSubstruct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.PhysicalKeyMACAddr(),  -1, -1);
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Rsp_array >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::PhysicalKeyLst_Rsp_arrayPlugin_new,
                BodyDomain::PhysicalKeyLst_Rsp_arrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::PhysicalKeyLst_Rsp_array >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::PhysicalKeyLst_Rsp_array& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PhysicalKeyLst_Rsp_arrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PhysicalKeyLst_Rsp_arrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Rsp_array >::from_cdr_buffer(BodyDomain::PhysicalKeyLst_Rsp_array& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PhysicalKeyLst_Rsp_arrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::PhysicalKeyLst_Rsp_array from cdr buffer");
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Rsp_array >::reset_sample(BodyDomain::PhysicalKeyLst_Rsp_array& sample) 
        {
            ::rti::topic::reset_sample(sample.PhysicalKeyLst());
        }

        void topic_type_support< BodyDomain::PhysicalKeyLst_Rsp_array >::allocate_sample(BodyDomain::PhysicalKeyLst_Rsp_array& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.PhysicalKeyLst(),  2L, -1);
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyMag_Crtl_structPlugin_new,
                BodyDomain::NFCKeyMag_Crtl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyMag_Crtl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyMag_Crtl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyMag_Crtl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyMag_Crtl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_struct >::from_cdr_buffer(BodyDomain::NFCKeyMag_Crtl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyMag_Crtl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyMag_Crtl_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_struct >::reset_sample(BodyDomain::NFCKeyMag_Crtl_struct& sample) 
        {
            sample.NFCSKeyAuth_Set(0);
            sample.NFCKeyBind_Set(0);
            sample.NFCKeyDel_Set(0);
            sample.NFCKeyFrz_Set(0);
            sample.NFCKeyUnfrzAuth_Set(0);
            ::rti::topic::reset_sample(sample.NFCCardID());
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_struct >::allocate_sample(BodyDomain::NFCKeyMag_Crtl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.NFCCardID(),  -1, -1);
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyMag_Crtl_SOA_structPlugin_new,
                BodyDomain::NFCKeyMag_Crtl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyMag_Crtl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyMag_Crtl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyMag_Crtl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyMag_Crtl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_SOA_struct >::from_cdr_buffer(BodyDomain::NFCKeyMag_Crtl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyMag_Crtl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyMag_Crtl_SOA_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_SOA_struct >::reset_sample(BodyDomain::NFCKeyMag_Crtl_SOA_struct& sample) 
        {
            sample.NFCKeyMag_Crtl_SOA_u8(0);
        }

        void topic_type_support< BodyDomain::NFCKeyMag_Crtl_SOA_struct >::allocate_sample(BodyDomain::NFCKeyMag_Crtl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< BodyDomain::NFCKeyMag_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::NFCKeyMag_St_structPlugin_new,
                BodyDomain::NFCKeyMag_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::NFCKeyMag_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::NFCKeyMag_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NFCKeyMag_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NFCKeyMag_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::NFCKeyMag_St_struct >::from_cdr_buffer(BodyDomain::NFCKeyMag_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NFCKeyMag_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::NFCKeyMag_St_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::NFCKeyMag_St_struct >::reset_sample(BodyDomain::NFCKeyMag_St_struct& sample) 
        {
            sample.NFCKeyBindRslt_St(0);
            sample.NFCKeyBindFailRsn_St(0);
            sample.NFCKeyDelRslt_St(0);
            sample.NFCKeyDelFailRsn_St(0);
            sample.NFCKeyFrzRslt_St(0);
            sample.NFCKeyFrzFailRsn_St(0);
            sample.NFCKeyUnfrzAuthRslt_St(0);
            sample.NFCKeyUnfrzAuthFailRsn_St(0);
            sample.NFCKeyUnfrzRslt_St(0);
            sample.NFCKeyUnfrzFailRsn_St(0);
            sample.CtrlSource("");
        }

        void topic_type_support< BodyDomain::NFCKeyMag_St_struct >::allocate_sample(BodyDomain::NFCKeyMag_St_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< BodyDomain::TargetPointStruct_Array >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::TargetPointStruct_ArrayPlugin_new,
                BodyDomain::TargetPointStruct_ArrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::TargetPointStruct_Array >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::TargetPointStruct_Array& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = TargetPointStruct_ArrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = TargetPointStruct_ArrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::TargetPointStruct_Array >::from_cdr_buffer(BodyDomain::TargetPointStruct_Array& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = TargetPointStruct_ArrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::TargetPointStruct_Array from cdr buffer");
        }

        void topic_type_support< BodyDomain::TargetPointStruct_Array >::reset_sample(BodyDomain::TargetPointStruct_Array& sample) 
        {
            ::rti::topic::reset_sample(sample.TargetPoint());
        }

        void topic_type_support< BodyDomain::TargetPointStruct_Array >::allocate_sample(BodyDomain::TargetPointStruct_Array& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.TargetPoint(),  252L, -1);
        }

        void topic_type_support< BodyDomain::Key_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Key_Srv_Req_UnionPlugin_new,
                BodyDomain::Key_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Key_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Key_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Key_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Key_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Key_Srv_Req_Union >::from_cdr_buffer(BodyDomain::Key_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Key_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Key_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::Key_Srv_Req_Union >::reset_sample(BodyDomain::Key_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.DKLst_Get());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.NFCKeyLst_Get());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.NFCKeyRename_Set());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.PhysicalKeyLst_Get());
            sample._d() = 4;
            ::rti::topic::reset_sample(sample.NFCKeyMag_Crtl());

            sample._d() = BodyDomain::Key_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Key_Srv_Req_Union >::allocate_sample(BodyDomain::Key_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.DKLst_Get(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.NFCKeyLst_Get(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.NFCKeyRename_Set(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.PhysicalKeyLst_Get(),  -1, -1);
            sample._d() = 4;
            ::rti::topic::allocate_sample(sample.NFCKeyMag_Crtl(),  -1, -1);

            sample._d() = BodyDomain::Key_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Key_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::Key_Srv_Resp_UnionPlugin_new,
                BodyDomain::Key_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::Key_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::Key_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Key_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Key_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::Key_Srv_Resp_Union >::from_cdr_buffer(BodyDomain::Key_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Key_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::Key_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< BodyDomain::Key_Srv_Resp_Union >::reset_sample(BodyDomain::Key_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.DKLst_Get_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.NFCKeyLst_Get_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.NFCKeyRename_Set_SOA());
            sample._d() = 3;
            ::rti::topic::reset_sample(sample.PhysicalKeyLst_Get_SOA());
            sample._d() = 4;
            ::rti::topic::reset_sample(sample.NFCKeyMag_Crtl_SOA());

            sample._d() = BodyDomain::Key_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::Key_Srv_Resp_Union >::allocate_sample(BodyDomain::Key_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.DKLst_Get_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.NFCKeyLst_Get_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.NFCKeyRename_Set_SOA(),  -1, -1);
            sample._d() = 3;
            ::rti::topic::allocate_sample(sample.PhysicalKeyLst_Get_SOA(),  -1, -1);
            sample._d() = 4;
            ::rti::topic::allocate_sample(sample.NFCKeyMag_Crtl_SOA(),  -1, -1);

            sample._d() = BodyDomain::Key_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< BodyDomain::KeyInfo_Notify_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                BodyDomain::KeyInfo_Notify_structPlugin_new,
                BodyDomain::KeyInfo_Notify_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< BodyDomain::KeyInfo_Notify_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const BodyDomain::KeyInfo_Notify_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = KeyInfo_Notify_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = KeyInfo_Notify_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< BodyDomain::KeyInfo_Notify_struct >::from_cdr_buffer(BodyDomain::KeyInfo_Notify_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = KeyInfo_Notify_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create BodyDomain::KeyInfo_Notify_struct from cdr buffer");
        }

        void topic_type_support< BodyDomain::KeyInfo_Notify_struct >::reset_sample(BodyDomain::KeyInfo_Notify_struct& sample) 
        {
            sample.NFCDetRmdrSet_Req(0);
            sample.BleKeyDiscnctRmdr_Req(0);
            sample.OwnerKey_St(0);
        }

        void topic_type_support< BodyDomain::KeyInfo_Notify_struct >::allocate_sample(BodyDomain::KeyInfo_Notify_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::PowerMode_Ctrl_structPlugin_new,
                PTDomain::PowerMode_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::PowerMode_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::PowerMode_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PowerMode_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PowerMode_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_struct >::from_cdr_buffer(PTDomain::PowerMode_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PowerMode_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::PowerMode_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_struct >::reset_sample(PTDomain::PowerMode_Ctrl_struct& sample) 
        {
            sample.PowerMode_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_struct >::allocate_sample(PTDomain::PowerMode_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::PowerMode_Ctrl_SOA_structPlugin_new,
                PTDomain::PowerMode_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::PowerMode_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::PowerMode_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PowerMode_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PowerMode_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_SOA_struct >::from_cdr_buffer(PTDomain::PowerMode_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PowerMode_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::PowerMode_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_SOA_struct >::reset_sample(PTDomain::PowerMode_Ctrl_SOA_struct& sample) 
        {
            sample.PowerOn_Rsp(0);
            sample.PowerOff_Rsp(0);
        }

        void topic_type_support< PTDomain::PowerMode_Ctrl_SOA_struct >::allocate_sample(PTDomain::PowerMode_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::PowerMode_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::PowerMode_St_structPlugin_new,
                PTDomain::PowerMode_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::PowerMode_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::PowerMode_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PowerMode_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PowerMode_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::PowerMode_St_struct >::from_cdr_buffer(PTDomain::PowerMode_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PowerMode_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::PowerMode_St_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::PowerMode_St_struct >::reset_sample(PTDomain::PowerMode_St_struct& sample) 
        {
            sample.PowerMode_St(0);
            sample.PowerGoOff_St(0);
            sample.PowerOffAvl_St(0);
        }

        void topic_type_support< PTDomain::PowerMode_St_struct >::allocate_sample(PTDomain::PowerMode_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::CarMode_Ctrl_structPlugin_new,
                PTDomain::CarMode_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::CarMode_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::CarMode_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CarMode_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CarMode_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_struct >::from_cdr_buffer(PTDomain::CarMode_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CarMode_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::CarMode_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_struct >::reset_sample(PTDomain::CarMode_Ctrl_struct& sample) 
        {
            sample.CarMode_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_struct >::allocate_sample(PTDomain::CarMode_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::CarMode_Ctrl_SOA_structPlugin_new,
                PTDomain::CarMode_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::CarMode_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::CarMode_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CarMode_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CarMode_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_SOA_struct >::from_cdr_buffer(PTDomain::CarMode_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CarMode_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::CarMode_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_SOA_struct >::reset_sample(PTDomain::CarMode_Ctrl_SOA_struct& sample) 
        {
            sample.CarMode_Ctrl_SOA_u8(0);
        }

        void topic_type_support< PTDomain::CarMode_Ctrl_SOA_struct >::allocate_sample(PTDomain::CarMode_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::CarMode_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::CarMode_St_structPlugin_new,
                PTDomain::CarMode_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::CarMode_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::CarMode_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CarMode_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CarMode_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::CarMode_St_struct >::from_cdr_buffer(PTDomain::CarMode_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CarMode_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::CarMode_St_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::CarMode_St_struct >::reset_sample(PTDomain::CarMode_St_struct& sample) 
        {
            sample.CarMode_St(0);
        }

        void topic_type_support< PTDomain::CarMode_St_struct >::allocate_sample(PTDomain::CarMode_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::DrivingMode_Ctrl_structPlugin_new,
                PTDomain::DrivingMode_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::DrivingMode_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::DrivingMode_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrivingMode_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrivingMode_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_struct >::from_cdr_buffer(PTDomain::DrivingMode_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrivingMode_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::DrivingMode_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_struct >::reset_sample(PTDomain::DrivingMode_Ctrl_struct& sample) 
        {
            sample.EPSModeChange_Req(0);
            sample.TargVehicleMode_Req(0);
            sample.PTModeChange_Req(0);
            sample.LowConsumMode_Req(0);
            sample.ValetMode_Req(0);
            sample.OnePedalMode_Req(0);
            sample.CoastRegenStrg_Req(0);
            sample.SpdLimit_Req(0);
            sample.TrailMode_Req(0);
            sample.Salemode_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_struct >::allocate_sample(PTDomain::DrivingMode_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::DrivingMode_Ctrl_SOA_structPlugin_new,
                PTDomain::DrivingMode_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::DrivingMode_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::DrivingMode_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DrivingMode_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DrivingMode_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_SOA_struct >::from_cdr_buffer(PTDomain::DrivingMode_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DrivingMode_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::DrivingMode_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_SOA_struct >::reset_sample(PTDomain::DrivingMode_Ctrl_SOA_struct& sample) 
        {
            sample.DrivingMode_Ctrl_SOA_u8(0);
        }

        void topic_type_support< PTDomain::DrivingMode_Ctrl_SOA_struct >::allocate_sample(PTDomain::DrivingMode_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::DringMode_St_Struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::DringMode_St_StructPlugin_new,
                PTDomain::DringMode_St_StructPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::DringMode_St_Struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::DringMode_St_Struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = DringMode_St_StructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = DringMode_St_StructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::DringMode_St_Struct >::from_cdr_buffer(PTDomain::DringMode_St_Struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = DringMode_St_StructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::DringMode_St_Struct from cdr buffer");
        }

        void topic_type_support< PTDomain::DringMode_St_Struct >::reset_sample(PTDomain::DringMode_St_Struct& sample) 
        {
            sample.DMSEPSModeInfo_St(0);
            sample.DMSVehMode_St(0);
            sample.DMSModeChgEn_St(0);
            sample.DMSPTModeInfo_St(0);
            sample.DMSValetMode_St(0);
            sample.OnePedalMode_St(0);
            sample.OPMAvaliability_St(0);
            sample.RegenSetPct_Rsp(0);
            sample.RegenAvail_St(0);
            sample.RegenForDisp_UI(0);
            sample.DrvVehModAvaliability_St(0);
            sample.TrailMode_St(0);
            sample.TrailAvaliability_St(0);
            sample.TrailForDisp_UI(0);
            sample.SaleMode_St(0);
        }

        void topic_type_support< PTDomain::DringMode_St_Struct >::allocate_sample(PTDomain::DringMode_St_Struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::VehicleMode_Srv_Req_UnionPlugin_new,
                PTDomain::VehicleMode_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::VehicleMode_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::VehicleMode_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VehicleMode_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VehicleMode_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Req_Union >::from_cdr_buffer(PTDomain::VehicleMode_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VehicleMode_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::VehicleMode_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Req_Union >::reset_sample(PTDomain::VehicleMode_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.PowerMode_Ctrl());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.CarMode_Ctrl());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.DrivingMode_Ctrl());

            sample._d() = PTDomain::VehicleMode_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Req_Union >::allocate_sample(PTDomain::VehicleMode_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.PowerMode_Ctrl(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.CarMode_Ctrl(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.DrivingMode_Ctrl(),  -1, -1);

            sample._d() = PTDomain::VehicleMode_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::VehicleMode_Srv_Resp_UnionPlugin_new,
                PTDomain::VehicleMode_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::VehicleMode_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::VehicleMode_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = VehicleMode_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = VehicleMode_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Resp_Union >::from_cdr_buffer(PTDomain::VehicleMode_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = VehicleMode_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::VehicleMode_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Resp_Union >::reset_sample(PTDomain::VehicleMode_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.PowerMode_Ctrl_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.CarMode_Ctrl_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.DrivingMode_Ctrl_SOA());

            sample._d() = PTDomain::VehicleMode_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< PTDomain::VehicleMode_Srv_Resp_Union >::allocate_sample(PTDomain::VehicleMode_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.PowerMode_Ctrl_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.CarMode_Ctrl_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.DrivingMode_Ctrl_SOA(),  -1, -1);

            sample._d() = PTDomain::VehicleMode_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< PTDomain::CHS_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::CHS_Ctrl_structPlugin_new,
                PTDomain::CHS_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::CHS_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::CHS_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CHS_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CHS_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::CHS_Ctrl_struct >::from_cdr_buffer(PTDomain::CHS_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CHS_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::CHS_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::CHS_Ctrl_struct >::reset_sample(PTDomain::CHS_Ctrl_struct& sample) 
        {
            sample.HDCSw_Req(0);
            sample.EHBMBrkModeSet_Req(0);
            sample.CSTSw_Req(0);
            sample.TCSSw_Req(0);
            sample.AVHSw_Req(0);
            sample.ESCSw_Req(0);
            sample.ParkingSwitch_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< PTDomain::CHS_Ctrl_struct >::allocate_sample(PTDomain::CHS_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< PTDomain::CHS_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::CHS_St_structPlugin_new,
                PTDomain::CHS_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::CHS_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::CHS_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CHS_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CHS_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::CHS_St_struct >::from_cdr_buffer(PTDomain::CHS_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CHS_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::CHS_St_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::CHS_St_struct >::reset_sample(PTDomain::CHS_St_struct& sample) 
        {
            sample.HDCAvail_St(0);
            sample.HDC_St(0);
            sample.BrakeModeEnable_St(0);
            sample.BrakeMode_St(0);
            sample.BoostDegrade_St(0);
            sample.CST_Rsp(0);
            sample.TCSSwAvail_St(0);
            sample.PataLamp_St(0);
            sample.AVHAvail_St(0);
            sample.AVH_St(0);
            sample.ESCSwAvail_St(0);
            sample.ESClamp_St(0);
            sample.EPB_St(0);
            sample.BU_EPB_St(0);
            sample.EPBSwAvail_St(0);
        }

        void topic_type_support< PTDomain::CHS_St_struct >::allocate_sample(PTDomain::CHS_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< PTDomain::CHS_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                PTDomain::CHS_Ctrl_SOA_structPlugin_new,
                PTDomain::CHS_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< PTDomain::CHS_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const PTDomain::CHS_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CHS_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CHS_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< PTDomain::CHS_Ctrl_SOA_struct >::from_cdr_buffer(PTDomain::CHS_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CHS_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create PTDomain::CHS_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< PTDomain::CHS_Ctrl_SOA_struct >::reset_sample(PTDomain::CHS_Ctrl_SOA_struct& sample) 
        {
            sample.CHS_Ctrl_SOA_u8(0);
        }

        void topic_type_support< PTDomain::CHS_Ctrl_SOA_struct >::allocate_sample(PTDomain::CHS_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                EnergyDomain::AC_Ctrl_structPlugin_new,
                EnergyDomain::AC_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< EnergyDomain::AC_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const EnergyDomain::AC_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AC_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AC_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_struct >::from_cdr_buffer(EnergyDomain::AC_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AC_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create EnergyDomain::AC_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_struct >::reset_sample(EnergyDomain::AC_Ctrl_struct& sample) 
        {
            sample.ACCycleMode_Req(0);
            sample.FACAirFlowLevel_Req(0);
            sample.FACMode_Req(0);
            sample.FACSwitch_Req(0);
            sample.FrontDeFrostFog_Req(0);
            sample.FLeftTempSet_Req(0);
            sample.FRightTempSet_Req(0);
            sample.FTempAreaSynd_Req(0);
            sample.FCoolOrHeatOrVent_Req(0);
            sample.ACOperationMode_Cmd(0);
            sample.FAutoAC_Req(0);
            sample.AirFragranceSwitchEnable(0);
            sample.FragranceConcentration_Req(0);
            sample.AirFragranceChannel1(0);
            sample.AirFragranceChannel2(0);
            sample.AirFragranceChannel3(0);
            sample.IONSet_Cmd(0);
            sample.PM25Set_Cmd(0);
            sample.AQSSet_Cmd(0);
            sample.FLeftAirOutletMode_Cmd(0);
            sample.FRightAirOutletMode_Cmd(0);
            sample.FLOutletSwitch_Cmd(0);
            sample.LCOutletSwitch_Cmd(0);
            sample.RCOutletSwitch_Cmd(0);
            sample.FROutletSwitch_Cmd(0);
            sample.FLOutletLeftRightAngle(0);
            sample.FLOutletUpDownAngle(0);
            sample.LCOutletUpDownAngle(0);
            sample.LCOutletLeftRightAngle(0);
            sample.RCOutletUpDownAngle(0);
            sample.RCOutletLeftRightAngle(0);
            sample.FROutletUpDownAngle(0);
            sample.FROutletLeftRightAngle(0);
            sample.CtrlSource("");
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_struct >::allocate_sample(EnergyDomain::AC_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< EnergyDomain::AC_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                EnergyDomain::AC_St_structPlugin_new,
                EnergyDomain::AC_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< EnergyDomain::AC_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const EnergyDomain::AC_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AC_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AC_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< EnergyDomain::AC_St_struct >::from_cdr_buffer(EnergyDomain::AC_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AC_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create EnergyDomain::AC_St_struct from cdr buffer");
        }

        void topic_type_support< EnergyDomain::AC_St_struct >::reset_sample(EnergyDomain::AC_St_struct& sample) 
        {
            sample.ACCycleMode_St(0);
            sample.FACAirFlowLevel_St(0);
            sample.FACMode_St(0);
            sample.FACSwitch_Rsp(0);
            sample.FDeiceDefrost_Rsp(0);
            sample.FLeftTempSet_St(0);
            sample.FRightTempSet_St(0);
            sample.FTempAreaSync_St(0);
            sample.FAcCoolOrHeatOrVent_St(0);
            sample.ACOperateMode_St(0);
            sample.FACAuto_Rsp(0);
            sample.FACAirFlowLevelAuto_St(0);
            sample.FACAirFlowModeAuto_St(0);
            sample.FACCoolOrHeatOrVentAuto_St(0);
            sample.EnvirTemp_Val(0);
            sample.FragSwitchEN_Rsp(0);
            sample.FragConcLevel_Rsp(0);
            sample.FragChannel1Switch_St(0);
            sample.FragChannel2Switch_St(0);
            sample.FragChannel3Switch_St(0);
            sample.FragChannelType(0);
            sample.FragChannelIndex(0);
            sample.FragChannel1Life(0);
            sample.FragChannel2Life(0);
            sample.FragChannel3Life(0);
            sample.IONSet_St(0);
            sample.PM25Set_St(0);
            sample.PM25Trigger_St(0);
            sample.PM25CarConc(0);
            sample.AQSSet_St(0);
            sample.AQSTrigger_St(0);
            sample.AQSAirQuality_Val(0);
            sample.InFilterLifeRemind(0);
            sample.OutsideFilterLifeRemind(0);
            sample.FLeftAirOutletMode_St(0);
            sample.FRightAirOutletMode_St(0);
            sample.OLMFLAirOutletSwitch_Rsp(0);
            sample.OLMLCAirOutletSwitch_Rsp(0);
            sample.OLMRCAirOutletSwitch_Rsp(0);
            sample.OLMFRAirOutletSwitch_Rsp(0);
            sample.OLMFLMotorErrSt(0);
            sample.OLMLCMotorErrSt(0);
            sample.OLMRCMotorErrSt(0);
            sample.OLMFRMotorErrSt(0);
            sample.OLMFLAirOutletLeftRightAngle_Rsp(0);
            sample.OLMFLAirOutletUpDownAngle_Rsp(0);
            sample.OLMLCAirOutletUpDownAngle_Rsp(0);
            sample.OLMLCAirOutletLeftRightAngle_Rsp(0);
            sample.OLMRCAirOutletLeftRightAngle_Rsp(0);
            sample.OLMRCAirOutletUpDownAngle_Rsp(0);
            sample.OLMFRAirOutletUpDownAngle_Rsp(0);
            sample.OLMFRAirOutletLeftRightAngle_Rsp(0);
        }

        void topic_type_support< EnergyDomain::AC_St_struct >::allocate_sample(EnergyDomain::AC_St_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< EnergyDomain::Thermal_St_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                EnergyDomain::Thermal_St_structPlugin_new,
                EnergyDomain::Thermal_St_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< EnergyDomain::Thermal_St_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const EnergyDomain::Thermal_St_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = Thermal_St_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = Thermal_St_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< EnergyDomain::Thermal_St_struct >::from_cdr_buffer(EnergyDomain::Thermal_St_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = Thermal_St_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create EnergyDomain::Thermal_St_struct from cdr buffer");
        }

        void topic_type_support< EnergyDomain::Thermal_St_struct >::reset_sample(EnergyDomain::Thermal_St_struct& sample) 
        {
            sample.HeatLiquidtLackWarn_St(0);
            sample.ThermalLiquidLackWarn_St(0);
            sample.RefrigerantCheckRemind(0);
            sample.FACLimit_St(0);
            sample.CtrlSource("");
        }

        void topic_type_support< EnergyDomain::Thermal_St_struct >::allocate_sample(EnergyDomain::Thermal_St_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                EnergyDomain::AC_Ctrl_SOA_structPlugin_new,
                EnergyDomain::AC_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< EnergyDomain::AC_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const EnergyDomain::AC_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = AC_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = AC_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_SOA_struct >::from_cdr_buffer(EnergyDomain::AC_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = AC_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create EnergyDomain::AC_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_SOA_struct >::reset_sample(EnergyDomain::AC_Ctrl_SOA_struct& sample) 
        {
            sample.AC_Ctrl_SOA_u8(0);
        }

        void topic_type_support< EnergyDomain::AC_Ctrl_SOA_struct >::allocate_sample(EnergyDomain::AC_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< Temporary::GeneralVehSt_Struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                Temporary::GeneralVehSt_StructPlugin_new,
                Temporary::GeneralVehSt_StructPlugin_delete);
        }

        std::vector<char>& topic_type_support< Temporary::GeneralVehSt_Struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const Temporary::GeneralVehSt_Struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = GeneralVehSt_StructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = GeneralVehSt_StructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< Temporary::GeneralVehSt_Struct >::from_cdr_buffer(Temporary::GeneralVehSt_Struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = GeneralVehSt_StructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create Temporary::GeneralVehSt_Struct from cdr buffer");
        }

        void topic_type_support< Temporary::GeneralVehSt_Struct >::reset_sample(Temporary::GeneralVehSt_Struct& sample) 
        {
            sample.SOCDisplay_Val(0);
            sample.DCCharge_St(0);
            sample.ACCharge_St(0);
            sample.FLSeatOcp_St(0);
            sample.ActlGear_St(0);
            sample.ActlGearVaild_St(0);
            sample.Ready_St(0);
            sample.DrvrSeatBeltValid_St(0);
            sample.DrvrSeatBelt_St(0);
            sample.VehSpdValid_St(0);
            sample.VehSpd_Val(0);
            sample.EPB_St(0);
        }

        void topic_type_support< Temporary::GeneralVehSt_Struct >::allocate_sample(Temporary::GeneralVehSt_Struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< Temporary::PTHMI_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                Temporary::PTHMI_structPlugin_new,
                Temporary::PTHMI_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< Temporary::PTHMI_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const Temporary::PTHMI_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = PTHMI_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = PTHMI_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< Temporary::PTHMI_struct >::from_cdr_buffer(Temporary::PTHMI_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = PTHMI_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create Temporary::PTHMI_struct from cdr buffer");
        }

        void topic_type_support< Temporary::PTHMI_struct >::reset_sample(Temporary::PTHMI_struct& sample) 
        {
            sample.OBCACChrgCnctor_St(0);
            sample.OBCACSocketLock_St(0);
            sample.AbnormalShiftInfo(0);
            sample.DriveConflictRemindInfo(0);
            sample.Shift_Err(0);
            sample.HVOffConfirm_Req(0);
            sample.LimpHomeRmnd_St(0);
            sample.LowVoltSys_Err(0);
            sample.LowVoltSysWarnStop_St(0);
            sample.Motorovertemp_St(0);
            sample.PTFaultLgtClr_St(0);
            sample.PTHMI_Req(0u);
            sample.PTThmlLiquidLackWarn_St(0);
            sample.PullOver_St(0);
            sample.RegenAvail_St(0);
            sample.ServiceReminder_St(0);
            sample.StdSenarioMileage_Val(0);
            sample.ThmlRunawayWarn_St(0);
            sample.TractionModeAvail_St(0);
            sample.TractionModeRemaind_St(0);
            sample.TractionModeSet_Rsp(0);
            sample.ACCharge_St(0);
            sample.CellOverTemp_St(0);
            sample.ChrgDischrgCnct_St(0);
            sample.DCCharge_St(0);
            sample.FastChrgCnctor_St(0);
        }

        void topic_type_support< Temporary::PTHMI_struct >::allocate_sample(Temporary::PTHMI_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< Temporary::CHSHMI_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                Temporary::CHSHMI_structPlugin_new,
                Temporary::CHSHMI_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< Temporary::CHSHMI_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const Temporary::CHSHMI_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = CHSHMI_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = CHSHMI_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< Temporary::CHSHMI_struct >::from_cdr_buffer(Temporary::CHSHMI_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = CHSHMI_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create Temporary::CHSHMI_struct from cdr buffer");
        }

        void topic_type_support< Temporary::CHSHMI_struct >::reset_sample(Temporary::CHSHMI_struct& sample) 
        {
            sample.AirbagWarnLamp_St(0);
            sample.EPSSystem_Err(0);
            sample.ABSIntv_St(0);
            sample.ABS_Err(0);
            sample.EBDIntv_St(0);
            sample.EBD_Err(0);
            sample.BrakeFluidLvl_St(0);
            sample.BrakePedal_St(0);
            sample.InputRodStroke_St(0);
            sample.InputRodStroke_Val(0);
            sample.EPBFunctionLamp_St(0);
            sample.EPBFailLamp_St(0);
            sample.CapacityLimitWarn_UI(0);
            sample.OperationReminder_UI(0);
            sample.BU_CapacityLimitWarn_UI(0);
            sample.BU_OperationReminder_UI(0);
            sample.BU_EPBFunctionLamp_St(0);
            sample.BU_EPBFailLamp_St(0);
            sample.BU_EPBHardSwitch_St(0);
        }

        void topic_type_support< Temporary::CHSHMI_struct >::allocate_sample(Temporary::CHSHMI_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< Temporary::WiperWash_Ctrl_Struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                Temporary::WiperWash_Ctrl_StructPlugin_new,
                Temporary::WiperWash_Ctrl_StructPlugin_delete);
        }

        std::vector<char>& topic_type_support< Temporary::WiperWash_Ctrl_Struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const Temporary::WiperWash_Ctrl_Struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = WiperWash_Ctrl_StructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = WiperWash_Ctrl_StructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< Temporary::WiperWash_Ctrl_Struct >::from_cdr_buffer(Temporary::WiperWash_Ctrl_Struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = WiperWash_Ctrl_StructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create Temporary::WiperWash_Ctrl_Struct from cdr buffer");
        }

        void topic_type_support< Temporary::WiperWash_Ctrl_Struct >::reset_sample(Temporary::WiperWash_Ctrl_Struct& sample) 
        {
            sample.Fwiper_Req(0);
            sample.FMistWash_Req(0);
            sample.CtrlSource("");
        }

        void topic_type_support< Temporary::WiperWash_Ctrl_Struct >::allocate_sample(Temporary::WiperWash_Ctrl_Struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< Temporary::SN_info_string >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                Temporary::SN_info_stringPlugin_new,
                Temporary::SN_info_stringPlugin_delete);
        }

        std::vector<char>& topic_type_support< Temporary::SN_info_string >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const Temporary::SN_info_string& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = SN_info_stringPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = SN_info_stringPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< Temporary::SN_info_string >::from_cdr_buffer(Temporary::SN_info_string& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = SN_info_stringPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create Temporary::SN_info_string from cdr buffer");
        }

        void topic_type_support< Temporary::SN_info_string >::reset_sample(Temporary::SN_info_string& sample) 
        {
            sample.SN_info_String("");
        }

        void topic_type_support< Temporary::SN_info_string >::allocate_sample(Temporary::SN_info_string& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.SN_info_String(),  -1, 18L);
        }

        void topic_type_support< bottomtotop::NMService_Set_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NMService_Set_structPlugin_new,
                bottomtotop::NMService_Set_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NMService_Set_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NMService_Set_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NMService_Set_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NMService_Set_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NMService_Set_struct >::from_cdr_buffer(bottomtotop::NMService_Set_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NMService_Set_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NMService_Set_struct from cdr buffer");
        }

        void topic_type_support< bottomtotop::NMService_Set_struct >::reset_sample(bottomtotop::NMService_Set_struct& sample) 
        {
            sample.SceneID(0);
            sample.SceneStateReq(0);
            sample.CtrlSource("");
        }

        void topic_type_support< bottomtotop::NMService_Set_struct >::allocate_sample(bottomtotop::NMService_Set_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< bottomtotop::NMService_Set_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NMService_Set_SOA_structPlugin_new,
                bottomtotop::NMService_Set_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NMService_Set_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NMService_Set_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NMService_Set_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NMService_Set_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NMService_Set_SOA_struct >::from_cdr_buffer(bottomtotop::NMService_Set_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NMService_Set_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NMService_Set_SOA_struct from cdr buffer");
        }

        void topic_type_support< bottomtotop::NMService_Set_SOA_struct >::reset_sample(bottomtotop::NMService_Set_SOA_struct& sample) 
        {
            sample.NMService_Set_SOA_u8(0);
        }

        void topic_type_support< bottomtotop::NMService_Set_SOA_struct >::allocate_sample(bottomtotop::NMService_Set_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NmXService_Ctrl_structPlugin_new,
                bottomtotop::NmXService_Ctrl_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NmXService_Ctrl_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NmXService_Ctrl_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NmXService_Ctrl_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NmXService_Ctrl_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_struct >::from_cdr_buffer(bottomtotop::NmXService_Ctrl_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NmXService_Ctrl_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NmXService_Ctrl_struct from cdr buffer");
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_struct >::reset_sample(bottomtotop::NmXService_Ctrl_struct& sample) 
        {
            sample.NMStateReq(0);
            sample.ECUName("");
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_struct >::allocate_sample(bottomtotop::NmXService_Ctrl_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.ECUName(),  -1, 10L);
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_Array >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NmXService_Ctrl_ArrayPlugin_new,
                bottomtotop::NmXService_Ctrl_ArrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NmXService_Ctrl_Array >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NmXService_Ctrl_Array& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NmXService_Ctrl_ArrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NmXService_Ctrl_ArrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_Array >::from_cdr_buffer(bottomtotop::NmXService_Ctrl_Array& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NmXService_Ctrl_ArrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NmXService_Ctrl_Array from cdr buffer");
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_Array >::reset_sample(bottomtotop::NmXService_Ctrl_Array& sample) 
        {
            ::rti::topic::reset_sample(sample.NmXService_Ctrl());
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_Array >::allocate_sample(bottomtotop::NmXService_Ctrl_Array& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.NmXService_Ctrl(),  50L, -1);
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_SOA_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NmXService_Ctrl_SOA_structPlugin_new,
                bottomtotop::NmXService_Ctrl_SOA_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NmXService_Ctrl_SOA_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NmXService_Ctrl_SOA_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NmXService_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NmXService_Ctrl_SOA_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_SOA_struct >::from_cdr_buffer(bottomtotop::NmXService_Ctrl_SOA_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NmXService_Ctrl_SOA_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NmXService_Ctrl_SOA_struct from cdr buffer");
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_SOA_struct >::reset_sample(bottomtotop::NmXService_Ctrl_SOA_struct& sample) 
        {
            sample.NmXService_Ctrl_SOA_u8(0);
        }

        void topic_type_support< bottomtotop::NmXService_Ctrl_SOA_struct >::allocate_sample(bottomtotop::NmXService_Ctrl_SOA_struct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< bottomtotop::NmService_Get_struct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NmService_Get_structPlugin_new,
                bottomtotop::NmService_Get_structPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NmService_Get_struct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NmService_Get_struct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NmService_Get_structPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NmService_Get_structPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NmService_Get_struct >::from_cdr_buffer(bottomtotop::NmService_Get_struct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NmService_Get_structPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NmService_Get_struct from cdr buffer");
        }

        void topic_type_support< bottomtotop::NmService_Get_struct >::reset_sample(bottomtotop::NmService_Get_struct& sample) 
        {
            sample.NMTypeReq(0);
            sample.CtrlSource("");
        }

        void topic_type_support< bottomtotop::NmService_Get_struct >::allocate_sample(bottomtotop::NmService_Get_struct& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.CtrlSource(),  -1, 10L);
        }

        void topic_type_support< bottomtotop::NMService_St_substruct >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NMService_St_substructPlugin_new,
                bottomtotop::NMService_St_substructPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NMService_St_substruct >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NMService_St_substruct& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NMService_St_substructPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NMService_St_substructPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NMService_St_substruct >::from_cdr_buffer(bottomtotop::NMService_St_substruct& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NMService_St_substructPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NMService_St_substruct from cdr buffer");
        }

        void topic_type_support< bottomtotop::NMService_St_substruct >::reset_sample(bottomtotop::NMService_St_substruct& sample) 
        {
            sample.SceneID(0);
            sample.SceneState(0);
        }

        void topic_type_support< bottomtotop::NMService_St_substruct >::allocate_sample(bottomtotop::NMService_St_substruct& sample, int, int) 
        {
            RTIOsapiUtility_unusedParameter(sample);
        }

        void topic_type_support< bottomtotop::NMService_St_array >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NMService_St_arrayPlugin_new,
                bottomtotop::NMService_St_arrayPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NMService_St_array >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NMService_St_array& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NMService_St_arrayPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NMService_St_arrayPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NMService_St_array >::from_cdr_buffer(bottomtotop::NMService_St_array& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NMService_St_arrayPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NMService_St_array from cdr buffer");
        }

        void topic_type_support< bottomtotop::NMService_St_array >::reset_sample(bottomtotop::NMService_St_array& sample) 
        {
            ::rti::topic::reset_sample(sample.NMService_St());
        }

        void topic_type_support< bottomtotop::NMService_St_array >::allocate_sample(bottomtotop::NMService_St_array& sample, int, int) 
        {
            ::rti::topic::allocate_sample(sample.NMService_St(),  255L, -1);
        }

        void topic_type_support< bottomtotop::NMService_Srv_Req_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NMService_Srv_Req_UnionPlugin_new,
                bottomtotop::NMService_Srv_Req_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NMService_Srv_Req_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NMService_Srv_Req_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NMService_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NMService_Srv_Req_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NMService_Srv_Req_Union >::from_cdr_buffer(bottomtotop::NMService_Srv_Req_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NMService_Srv_Req_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NMService_Srv_Req_Union from cdr buffer");
        }

        void topic_type_support< bottomtotop::NMService_Srv_Req_Union >::reset_sample(bottomtotop::NMService_Srv_Req_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.NMService_Set());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.NmXService_Ctrl());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.NmService_Get());

            sample._d() = bottomtotop::NMService_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< bottomtotop::NMService_Srv_Req_Union >::allocate_sample(bottomtotop::NMService_Srv_Req_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.NMService_Set(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.NmXService_Ctrl(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.NmService_Get(),  -1, -1);

            sample._d() = bottomtotop::NMService_Srv_Req_Union::default_discriminator();
        }

        void topic_type_support< bottomtotop::NMService_Srv_Resp_Union >:: register_type(
            ::dds::domain::DomainParticipant& participant,
            const std::string& type_name) 
        {

            ::rti::domain::register_type_plugin(
                participant,
                type_name,
                bottomtotop::NMService_Srv_Resp_UnionPlugin_new,
                bottomtotop::NMService_Srv_Resp_UnionPlugin_delete);
        }

        std::vector<char>& topic_type_support< bottomtotop::NMService_Srv_Resp_Union >::to_cdr_buffer(
            std::vector<char>& buffer, 
            const bottomtotop::NMService_Srv_Resp_Union& sample,
            ::dds::core::policy::DataRepresentationId representation)
        {
            // First get the length of the buffer
            unsigned int length = 0;
            RTIBool ok = NMService_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                NULL, 
                &length,
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to calculate cdr buffer size");

            // Create a vector with that size and copy the cdr buffer into it
            buffer.resize(length);
            ok = NMService_Srv_Resp_UnionPlugin_serialize_to_cdr_buffer(
                &buffer[0], 
                &length, 
                &sample,
                representation);
            ::rti::core::check_return_code(
                ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
                "Failed to copy cdr buffer");

            return buffer;
        }

        void topic_type_support< bottomtotop::NMService_Srv_Resp_Union >::from_cdr_buffer(bottomtotop::NMService_Srv_Resp_Union& sample, 
        const std::vector<char>& buffer)
        {

            RTIBool ok  = NMService_Srv_Resp_UnionPlugin_deserialize_from_cdr_buffer(
                &sample, 
                &buffer[0], 
                static_cast<unsigned int>(buffer.size()));
            ::rti::core::check_return_code(ok ? DDS_RETCODE_OK : DDS_RETCODE_ERROR,
            "Failed to create bottomtotop::NMService_Srv_Resp_Union from cdr buffer");
        }

        void topic_type_support< bottomtotop::NMService_Srv_Resp_Union >::reset_sample(bottomtotop::NMService_Srv_Resp_Union& sample) 
        {
            sample._d() = 0;
            ::rti::topic::reset_sample(sample.NMService_Set_SOA());
            sample._d() = 1;
            ::rti::topic::reset_sample(sample.NmXService_Ctrl_SOA());
            sample._d() = 2;
            ::rti::topic::reset_sample(sample.NmService_Get_SOA());

            sample._d() = bottomtotop::NMService_Srv_Resp_Union::default_discriminator();
        }

        void topic_type_support< bottomtotop::NMService_Srv_Resp_Union >::allocate_sample(bottomtotop::NMService_Srv_Resp_Union& sample, int, int) 
        {
            sample._d() = 0;
            ::rti::topic::allocate_sample(sample.NMService_Set_SOA(),  -1, -1);
            sample._d() = 1;
            ::rti::topic::allocate_sample(sample.NmXService_Ctrl_SOA(),  -1, -1);
            sample._d() = 2;
            ::rti::topic::allocate_sample(sample.NmService_Get_SOA(),  -1, -1);

            sample._d() = bottomtotop::NMService_Srv_Resp_Union::default_discriminator();
        }

    }
}  

